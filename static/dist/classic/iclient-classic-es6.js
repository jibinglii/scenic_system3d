/*!
 * 
 *          iclient-classic.(http://iclient.supermap.io)
 *          CopyrightÂ© 2000 - 2019 SuperMap Software Co.Ltd
 *          license: Apache-2.0
 *          version: v9.1.2
 *         
 */
/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 7);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports) {

module.exports = function(){try{return mapv}catch(e){return {}}}();

/***/ }),
/* 1 */
/***/ (function(module, exports) {

module.exports = function(){try{return XLSX}catch(e){return {}}}();

/***/ }),
/* 2 */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;(function (global, factory) {
  if (true) {
    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [exports, module], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory),
				__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?
				(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
  } else { var mod; }
})(this, function (exports, module) {
  'use strict';

  var defaultOptions = {
    timeout: 5000,
    jsonpCallback: 'callback',
    jsonpCallbackFunction: null
  };

  function generateCallbackFunction() {
    return 'jsonp_' + Date.now() + '_' + Math.ceil(Math.random() * 100000);
  }

  // Known issue: Will throw 'Uncaught ReferenceError: callback_*** is not defined'
  // error if request timeout
  function clearFunction(functionName) {
    // IE8 throws an exception when you try to delete a property on window
    // http://stackoverflow.com/a/1824228/751089
    try {
      delete window[functionName];
    } catch (e) {
      window[functionName] = undefined;
    }
  }

  function removeScript(scriptId) {
    var script = document.getElementById(scriptId);
    document.getElementsByTagName('head')[0].removeChild(script);
  }

  function fetchJsonp(_url) {
    var options = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];

    // to avoid param reassign
    var url = _url;
    var timeout = options.timeout || defaultOptions.timeout;
    var jsonpCallback = options.jsonpCallback || defaultOptions.jsonpCallback;

    var timeoutId = undefined;

    return new Promise(function (resolve, reject) {
      var callbackFunction = options.jsonpCallbackFunction || generateCallbackFunction();
      var scriptId = jsonpCallback + '_' + callbackFunction;

      window[callbackFunction] = function (response) {
        resolve({
          ok: true,
          // keep consistent with fetch API
          json: function json() {
            return Promise.resolve(response);
          }
        });

        if (timeoutId) clearTimeout(timeoutId);

        removeScript(scriptId);

        clearFunction(callbackFunction);
      };

      // Check if the user set their own params, and if not add a ? to start a list of params
      url += url.indexOf('?') === -1 ? '?' : '&';

      var jsonpScript = document.createElement('script');
      jsonpScript.setAttribute('src', '' + url + jsonpCallback + '=' + callbackFunction);
      jsonpScript.id = scriptId;
      document.getElementsByTagName('head')[0].appendChild(jsonpScript);

      timeoutId = setTimeout(function () {
        reject(new Error('JSONP request to ' + _url + ' timed out'));

        clearFunction(callbackFunction);
        removeScript(scriptId);
      }, timeout);
    });
  }

  // export as global function
  /*
  let local;
  if (typeof global !== 'undefined') {
    local = global;
  } else if (typeof self !== 'undefined') {
    local = self;
  } else {
    try {
      local = Function('return this')();
    } catch (e) {
      throw new Error('polyfill failed because global object is unavailable in this environment');
    }
  }
  local.fetchJsonp = fetchJsonp;
  */

  module.exports = fetchJsonp;
});

/***/ }),
/* 3 */
/***/ (function(module, exports) {

var g;

// This works in non-strict mode
g = (function() {
	return this;
})();

try {
	// This works if eval is allowed (see CSP)
	g = g || Function("return this")() || (1, eval)("this");
} catch (e) {
	// This works if the window reference is available
	if (typeof window === "object") g = window;
}

// g can still be undefined, but nothing to do about it...
// We return undefined, instead of nothing here, so it's
// easier to handle this case. if(!global) { ...}

module.exports = g;


/***/ }),
/* 4 */
/***/ (function(module, exports) {

module.exports = function(){try{return echarts}catch(e){return {}}}();

/***/ }),
/* 5 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(setImmediate) {(function (root) {

  // Store setTimeout reference so promise-polyfill will be unaffected by
  // other code modifying setTimeout (like sinon.useFakeTimers())
  var setTimeoutFunc = setTimeout;

  function noop() {}
  
  // Polyfill for Function.prototype.bind
  function bind(fn, thisArg) {
    return function () {
      fn.apply(thisArg, arguments);
    };
  }

  function Promise(fn) {
    if (typeof this !== 'object') throw new TypeError('Promises must be constructed via new');
    if (typeof fn !== 'function') throw new TypeError('not a function');
    this._state = 0;
    this._handled = false;
    this._value = undefined;
    this._deferreds = [];

    doResolve(fn, this);
  }

  function handle(self, deferred) {
    while (self._state === 3) {
      self = self._value;
    }
    if (self._state === 0) {
      self._deferreds.push(deferred);
      return;
    }
    self._handled = true;
    Promise._immediateFn(function () {
      var cb = self._state === 1 ? deferred.onFulfilled : deferred.onRejected;
      if (cb === null) {
        (self._state === 1 ? resolve : reject)(deferred.promise, self._value);
        return;
      }
      var ret;
      try {
        ret = cb(self._value);
      } catch (e) {
        reject(deferred.promise, e);
        return;
      }
      resolve(deferred.promise, ret);
    });
  }

  function resolve(self, newValue) {
    try {
      // Promise Resolution Procedure: https://github.com/promises-aplus/promises-spec#the-promise-resolution-procedure
      if (newValue === self) throw new TypeError('A promise cannot be resolved with itself.');
      if (newValue && (typeof newValue === 'object' || typeof newValue === 'function')) {
        var then = newValue.then;
        if (newValue instanceof Promise) {
          self._state = 3;
          self._value = newValue;
          finale(self);
          return;
        } else if (typeof then === 'function') {
          doResolve(bind(then, newValue), self);
          return;
        }
      }
      self._state = 1;
      self._value = newValue;
      finale(self);
    } catch (e) {
      reject(self, e);
    }
  }

  function reject(self, newValue) {
    self._state = 2;
    self._value = newValue;
    finale(self);
  }

  function finale(self) {
    if (self._state === 2 && self._deferreds.length === 0) {
      Promise._immediateFn(function() {
        if (!self._handled) {
          Promise._unhandledRejectionFn(self._value);
        }
      });
    }

    for (var i = 0, len = self._deferreds.length; i < len; i++) {
      handle(self, self._deferreds[i]);
    }
    self._deferreds = null;
  }

  function Handler(onFulfilled, onRejected, promise) {
    this.onFulfilled = typeof onFulfilled === 'function' ? onFulfilled : null;
    this.onRejected = typeof onRejected === 'function' ? onRejected : null;
    this.promise = promise;
  }

  /**
   * Take a potentially misbehaving resolver function and make sure
   * onFulfilled and onRejected are only called once.
   *
   * Makes no guarantees about asynchrony.
   */
  function doResolve(fn, self) {
    var done = false;
    try {
      fn(function (value) {
        if (done) return;
        done = true;
        resolve(self, value);
      }, function (reason) {
        if (done) return;
        done = true;
        reject(self, reason);
      });
    } catch (ex) {
      if (done) return;
      done = true;
      reject(self, ex);
    }
  }

  Promise.prototype['catch'] = function (onRejected) {
    return this.then(null, onRejected);
  };

  Promise.prototype.then = function (onFulfilled, onRejected) {
    var prom = new (this.constructor)(noop);

    handle(this, new Handler(onFulfilled, onRejected, prom));
    return prom;
  };

  Promise.all = function (arr) {
    var args = Array.prototype.slice.call(arr);

    return new Promise(function (resolve, reject) {
      if (args.length === 0) return resolve([]);
      var remaining = args.length;

      function res(i, val) {
        try {
          if (val && (typeof val === 'object' || typeof val === 'function')) {
            var then = val.then;
            if (typeof then === 'function') {
              then.call(val, function (val) {
                res(i, val);
              }, reject);
              return;
            }
          }
          args[i] = val;
          if (--remaining === 0) {
            resolve(args);
          }
        } catch (ex) {
          reject(ex);
        }
      }

      for (var i = 0; i < args.length; i++) {
        res(i, args[i]);
      }
    });
  };

  Promise.resolve = function (value) {
    if (value && typeof value === 'object' && value.constructor === Promise) {
      return value;
    }

    return new Promise(function (resolve) {
      resolve(value);
    });
  };

  Promise.reject = function (value) {
    return new Promise(function (resolve, reject) {
      reject(value);
    });
  };

  Promise.race = function (values) {
    return new Promise(function (resolve, reject) {
      for (var i = 0, len = values.length; i < len; i++) {
        values[i].then(resolve, reject);
      }
    });
  };

  // Use polyfill for setImmediate for performance gains
  Promise._immediateFn = (typeof setImmediate === 'function' && function (fn) { setImmediate(fn); }) ||
    function (fn) {
      setTimeoutFunc(fn, 0);
    };

  Promise._unhandledRejectionFn = function _unhandledRejectionFn(err) {
    if (typeof console !== 'undefined' && console) {
      console.warn('Possible Unhandled Promise Rejection:', err); // eslint-disable-line no-console
    }
  };

  /**
   * Set the immediate function to execute callbacks
   * @param fn {function} Function to execute
   * @deprecated
   */
  Promise._setImmediateFn = function _setImmediateFn(fn) {
    Promise._immediateFn = fn;
  };

  /**
   * Change the function to execute on unhandled rejection
   * @param {function} fn Function to execute on unhandled rejection
   * @deprecated
   */
  Promise._setUnhandledRejectionFn = function _setUnhandledRejectionFn(fn) {
    Promise._unhandledRejectionFn = fn;
  };
  
  if (typeof module !== 'undefined' && module.exports) {
    module.exports = Promise;
  } else if (!root.Promise) {
    root.Promise = Promise;
  }

})(this);

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(11).setImmediate))

/***/ }),
/* 6 */
/***/ (function(module, exports) {

module.exports = function(){try{return elasticsearch}catch(e){return {}}}();

/***/ }),
/* 7 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);

// CONCATENATED MODULE: ./src/common/SuperMap.js
/* CopyrightÂ© 2000 - 2019 SuperMap Software Co.Ltd. All rights reserved.
 * This program are made available under the terms of the Apache License, Version 2.0
 * which accompanies this distribution and is available at http://www.apache.org/licenses/LICENSE-2.0.html.*/
var SuperMap = window.SuperMap = window.SuperMap || {};
SuperMap.Widgets = window.SuperMap.Widgets || {};

// CONCATENATED MODULE: ./src/common/commontypes/Pixel.js
/* CopyrightÂ© 2000 - 2019 SuperMap Software Co.Ltd. All rights reserved.
 * This program are made available under the terms of the Apache License, Version 2.0
 * which accompanies this distribution and is available at http://www.apache.org/licenses/LICENSE-2.0.html.*/


/**
 * @class SuperMap.Pixel
 * @category BaseTypes Geometry
 * @classdesc æ­¤ç±»ç¨ x,y åæ æç»å±å¹åæ ï¼åç´ ç¹ï¼ã
 * @param {number} [x=0.0] - x åæ ã
 * @param {number} [y=0.0] - y åæ ã
 * @param {SuperMap.Pixel.Mode} [mode=SuperMap.Pixel.Mode.LeftTop] - åæ æ¨¡å¼ã
 *
 * @example
 * //åç¬åå»ºä¸ä¸ªå¯¹è±¡
 * var pixcel = new SuperMap.Pixel(100,50);
 *
 * //ä¾æ® size åå»º
 *  var size = new SuperMap.Size(21,25);
 *  var offset = new SuperMap.Pixel(-(size.w/2), -size.h);
 */
class Pixel_Pixel {


    constructor(x, y, mode) {
        /**
         * @member {number} [SuperMap.Pixel.prototype.x=0.0]
         * @description x åæ ã
         */
        this.x = x ? parseFloat(x) : 0.0;

        /**
         * @member {number} [SuperMap.Pixel.prototype.y=0.0]
         * @description y åæ ã
         */
        this.y = y ? parseFloat(y) : 0.0;

        /**
         * @member {SuperMap.Pixel.Mode} [SuperMap.Pixel.prototype.mode=SuperMap.Pixel.Mode.LeftTop]
         * @description åæ æ¨¡å¼ï¼æå·¦ä¸ãå³ä¸ãå³ä¸ãå·¦ä¸è¿å ç§æ¨¡å¼ï¼åå«è¡¨ç¤ºç¸å¯¹äºå·¦ä¸è§ãå³ä¸è§ãå³ä¸è§ãå·¦ä¸è§çåæ ã 
         */ 
        this.mode = mode;
        this.CLASS_NAME = "SuperMap.Pixel";
        /**
         * @enum SuperMap.Pixel.Mode
         * @readonly
         * @description æ¨¡å¼ã
         * @type {string}
         */

        SuperMap.Pixel.Mode = {
            /** å·¦ä¸æ¨¡å¼ã*/
            LeftTop: "lefttop",
            /** å³ä¸æ¨¡å¼ã */
            RightTop: "righttop",
            /** å³ä¸æ¨¡å¼ã */
            RightBottom: "rightbottom",
            /** å·¦ä¸æ¨¡å¼ã */
            LeftBottom: "leftbottom"
        };
    }

    /**
     * @function SuperMap.Pixel.prototype.toString
     * @description è¿åæ­¤å¯¹è±¡çå­ç¬¦ä¸²å½¢å¼ã
     * @example
     *
     * var pixcel = new SuperMap.Pixel(100,50);
     * var str = pixcel.toString();
     *
     * @returns {string} ä¾å¦: "x=200.4,y=242.2"
     */
    toString() {
        return ("x=" + this.x + ",y=" + this.y);
    }

    /**
     * @function SuperMap.Pixel.prototype.clone
     * @description åéå½åç pixel å¯¹è±¡ã
     * @example
     * var pixcel = new SuperMap.Pixel(100,50);
     * var pixcel2 = pixcel.clone();
     * @returns {SuperMap.Pixel} è¿åä¸ä¸ªæ°çä¸å½å pixel å¯¹è±¡æç¸å xãy åæ ç pixel å¯¹è±¡ã
     */
    clone() {
        return new Pixel_Pixel(this.x, this.y, this.mode);
    }

    /**
     * @function SuperMap.Pixel.prototype.equals
     * @description æ¯è¾ä¸¤ pixel æ¯å¦ç¸ç­ã
     * @example
     * var pixcel = new SuperMap.Pixel(100,50);
     * var pixcel2 = new SuperMap.Pixel(100,50);
     * var isEquals = pixcel.equals(pixcel2);
     *
     * @param {SuperMap.Pixel} px - ç¨äºæ¯è¾ç¸ç­ç pixel å¯¹è±¡ã
     * @returns {boolean} å¦æä¼ å¥çåç´ ç¹åå½ååç´ ç¹ç¸åè¿å trueï¼å¦æä¸åæä¼ å¥åæ°ä¸º NULL åè¿å falseã
     */
    equals(px) {
        var equals = false;
        if (px != null) {
            equals = ((this.x == px.x && this.y == px.y) ||
                (isNaN(this.x) && isNaN(this.y) && isNaN(px.x) && isNaN(px.y)));
        }
        return equals;
    }

    /**
     * @function SuperMap.Pixel.prototype.distanceTo
     * @description è¿åä¸¤ä¸ª pixel çè·ç¦»ã
     * @example
     * var pixcel = new SuperMap.Pixel(100,50);
     * var pixcel2 = new SuperMap.Pixel(110,30);
     * var distance = pixcel.distanceTo(pixcel2);
     *
     * @param {SuperMap.Pixel} px - ç¨äºè®¡ç®çä¸ä¸ª pixelã
     * @returns {float} ä½ä¸ºåæ°ä¼ å¥çåç´ ä¸å½ååç´ ç¹çè·ç¦»ã
     */
    distanceTo(px) {
        return Math.sqrt(
            Math.pow(this.x - px.x, 2) +
            Math.pow(this.y - px.y, 2)
        );
    }

    /**
     * @function SuperMap.Pixel.prototype.add
     * @description å¨åæ¥åç´ åæ åºç¡ä¸ï¼x å¼å ä¸ä¼ å¥ç x åæ°ï¼y å¼å ä¸ä¼ å¥ç y åæ°ã
     * @example
     * var pixcel = new SuperMap.Pixel(100,50);
     * //pixcel2æ¯æ°çå¯¹è±¡
     * var pixcel2 = pixcel.add(20,30);
     *
     * @param {number} x - ä¼ å¥ç x å¼ã
     * @param {number} y - ä¼ å¥ç y å¼ã
     * @returns {SuperMap.Pixel} è¿åä¸ä¸ªæ°ç pixel å¯¹è±¡ï¼è¯¥ pixel æ¯ç±å½åç pixel ä¸ä¼ å¥ç xï¼y ç¸å å¾å°ã
     */
    add(x, y) {
        if ((x == null) || (y == null)) {
            throw new TypeError('Pixel.add cannot receive null values');
        }
        return new Pixel_Pixel(this.x + x, this.y + y);
    }

    /**
     * @function SuperMap.Pixel.prototype.offset
     * @description éè¿ä¼ å¥ç {@link SuperMap.Pixel} åæ°å¯¹åå±å¹åæ è¿è¡åç§»ã
     * @example
     * var pixcel = new SuperMap.Pixel(100,50);
     * var pixcel2 = new SuperMap.Pixel(130,20);
     * //pixcel3 æ¯æ°çå¯¹è±¡
     * var pixcel3 = pixcel.offset(pixcel2);
     *
     * @param {SuperMap.Pixel} px - ä¼ å¥ç <SuperMap.Pixel> å¯¹è±¡ã
     * @returns {SuperMap.Pixel} è¿åä¸ä¸ªæ°ç pixelï¼è¯¥ pixel æ¯ç±å½åç pixel å¯¹è±¡ç xï¼y å¼ä¸ä¼ å¥ç Pixel å¯¹è±¡ç xï¼y å¼ç¸å å¾å°ã
     */
    offset(px) {
        var newPx = this.clone();
        if (px) {
            newPx = this.add(px.x, px.y);
        }
        return newPx;
    }

    /**
     *
     * @function SuperMap.Pixel.prototype.destroy
     * @description éæ¯æ­¤å¯¹è±¡ãéæ¯åæ­¤å¯¹è±¡çææå±æ§ä¸º nullï¼èä¸æ¯åå§å¼ã
     * @example
     * var pixcel = new SuperMap.Pixel(100,50);
     * pixcel.destroy();
     */
    destroy() {
        this.x = null;
        this.y = null;
        this.mode = null;
    }
}

SuperMap.Pixel = Pixel_Pixel;


// CONCATENATED MODULE: ./src/common/commontypes/BaseTypes.js
/* CopyrightÂ© 2000 - 2019 SuperMap Software Co.Ltd. All rights reserved.
 * This program are made available under the terms of the Apache License, Version 2.0
 * which accompanies this distribution and is available at http://www.apache.org/licenses/LICENSE-2.0.html.*/

/**
 *@namespace SuperMap
 *@category BaseTypes Namespace
 */

/**
 * @function SuperMap.inherit
 * @description é¤äº C å P ä¸¤ä¸ªå¿è¦åæ°å¤ï¼å¯ä»¥ä¼ éä»»ææ°éçå¯¹è±¡ï¼è¿äºå¯¹è±¡é½å°ç»§æ¿Cã
 * @memberOf SuperMap
 * @param {Object} C - ç»§æ¿çç±»ã
 * @param {Object} P - è¢«ç»§æ¿çç¶ç±»ã
 */
SuperMap.inherit = function (C, P) {
    var F = function () {
    };
    F.prototype = P.prototype;
    C.prototype = new F;
    var i, l, o;
    for (i = 2, l = arguments.length; i < l; i++) {
        o = arguments[i];
        if (typeof o === "function") {
            o = o.prototype;
        }
        SuperMap.Util.extend(C.prototype, o);
    }
};


/**
 * @function SuperMap.mixin 
 * @description å®ç°å¤éç»§æ¿ã
 * @memberOf SuperMap
 * @param {Class|Object} ...mixins - ç»§æ¿çç±»ã
 */
SuperMap.mixin = function (...mixins) {

    class Mix {
        constructor(options) {
            for (var index = 0; index < mixins.length; index++) {
                copyProperties(this, new mixins[index](options));
            }
        }
    }

    for (var index = 0; index < mixins.length; index++) {
        var mixin = mixins[index];
        copyProperties(Mix, mixin);
        copyProperties(Mix.prototype, mixin.prototype);
        copyProperties(Mix.prototype, new mixin());
    }
    return Mix;

    function copyProperties(target, source) {
        var ownKeys = Object.getOwnPropertyNames(source);
        if (Object.getOwnPropertySymbols) {
            ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source));
        }
        for (var index = 0; index < ownKeys.length; index++) {
            var key = ownKeys[index];
            if (key !== "constructor"
                && key !== "prototype"
                && key !== "name" && key !== "length") {
                let desc = Object.getOwnPropertyDescriptor(source, key);
                if (window["ActiveXObject"]) {
                    Object.defineProperty(target, key, desc || {});
                } else {
                    Object.defineProperty(target, key, desc);
                }
            }
        }
    }
};

/**
 * @name String
 * @namespace
 * @memberOf SuperMap
 * @category BaseTypes Util
 * @description å­ç¬¦ä¸²æä½çä¸ç³»åå¸¸ç¨æ©å±å½æ°ã
 */
var StringExt = SuperMap.String = {

    /**
     * @function SuperMap.String.startsWith
     * @description å¤æ­ç®æ å­ç¬¦ä¸²æ¯å¦ä»¥æå®çå­å­ç¬¦ä¸²å¼å¤´ã
     * @param {string} str - ç®æ å­ç¬¦ä¸²ã
     * @param {string} sub - æ¥æ¾çå­å­ç¬¦ä¸²ã
     * @returns {boolean} ç®æ å­ç¬¦ä¸²ä»¥æå®çå­å­ç¬¦ä¸²å¼å¤´ï¼åè¿å trueï¼å¦åè¿å falseã
     */
    startsWith: function (str, sub) {
        return (str.indexOf(sub) == 0);
    },

    /**
     * @function SuperMap.String.contains
     * @description å¤æ­ç®æ å­ç¬¦ä¸²æ¯å¦åå«æå®çå­å­ç¬¦ä¸²ã
     * @param {string} str - ç®æ å­ç¬¦ä¸²ã
     * @param {string} sub - æ¥æ¾çå­å­ç¬¦ä¸²ã
     * @returns {boolean} ç®æ å­ç¬¦ä¸²ä¸­åå«æå®çå­å­ç¬¦ä¸²ï¼åè¿å trueï¼å¦åè¿å falseã
     */
    contains: function (str, sub) {
        return (str.indexOf(sub) != -1);
    },

    /**
     * @function SuperMap.String.trim
     * @description å é¤ä¸ä¸ªå­ç¬¦ä¸²çå¼å¤´åç»å°¾å¤çææç©ºç½å­ç¬¦ã
     * @param {string} str - ï¼å¯è½ï¼å­å¨ç©ºç½å­ç¬¦å¡«å¡çå­ç¬¦ä¸²ã
     * @returns {string} å é¤å¼å¤´åç»å°¾å¤ç©ºç½å­ç¬¦åçå­ç¬¦ä¸²ã
     */
    trim: function (str) {
        return str.replace(/^\s\s*/, '').replace(/\s\s*$/, '');
    },

    /**
     * @function SuperMap.String.camelize
     * @description éªé©¼å¼("-")è¿å­ç¬¦çå­ç¬¦ä¸²å¤çã
     * ä¾å¦ï¼"chicken-head" becomes "chickenHead",
     *       "-chicken-head" becomes "ChickenHead"ã
     * @param {string} str - è¦å¤ççå­ç¬¦ä¸²ï¼åå§åå®¹ä¸åºè¢«ä¿®æ¹ã
     * @returns {string}
     */
    camelize: function (str) {
        var oStringList = str.split('-');
        var camelizedString = oStringList[0];
        for (var i = 1, len = oStringList.length; i < len; i++) {
            var s = oStringList[i];
            camelizedString += s.charAt(0).toUpperCase() + s.substring(1);
        }
        return camelizedString;
    },

    /**
     * @function SuperMap.String.format
     * @description æä¾å¸¦ ${token} æ è®°çå­ç¬¦ä¸², è¿å context å¯¹è±¡å±æ§ä¸­æå®æ è®°çå±æ§å¼ã
     * @example
     * ç¤ºä¾ï¼
     * (code)
     * 1ãtemplate = "${value,getValue}";
     *         context = {value: {getValue:function(){return Math.max.apply(null,argument);}}};
     *         args = [2,23,12,36,21];
     *       è¿åå¼:36
     * (end)
     * ç¤ºä¾:
     * (code)
     * 2ãtemplate = "$${{value,getValue}}";
     *         context = {value: {getValue:function(){return Math.max.apply(null,argument);}}};
     *         args = [2,23,12,36,21];
     *       è¿åå¼:"${36}"
     * (end)
     * ç¤ºä¾:
     * (code)
     * 3ãtemplate = "${a,b}";
     *         context = {a: {b:"format"}};
     *         args = null;
     *       è¿åå¼:"format"
     * (end)
     * ç¤ºä¾:
     * (code)
     * 3ãtemplate = "${a,b}";
     *         context = null;
     *         args = null;
     *       è¿åå¼:"${a.b}"
     * (end)
     * @param {string} template - å¸¦æ è®°çå­ç¬¦ä¸²å°è¦è¢«æ¿æ¢ãåæ° template æ ¼å¼ä¸º"${token}"ï¼æ­¤å¤ç token æ è®°ä¼æ¿æ¢ä¸º context["token"] å±æ§çå¼ã
     * @param {Object} [context=window] - å¸¦æå±æ§çå¯éå¯¹è±¡çå±æ§ç¨äºå¹éæ ¼å¼åå­ç¬¦ä¸²ä¸­çæ è®°ãå¦æè¯¥åæ°ä¸ºç©ºï¼å°ä½¿ç¨ window å¯¹è±¡ã
     * @param {Array} [args] - å¯éåæ°ä¼ éç»å¨ context å¯¹è±¡ä¸æ¾å°çå½æ°ã
     * @returns {string} ä» context å¯¹è±¡å±æ§ä¸­æ¿æ¢å­ç¬¦ä¸²æ è®°ä½çå­ç¬¦ä¸²ã 
     */
    format: function (template, context, args) {
        if (!context) {
            context = window;
        }

        // Example matching:
        // str   = ${foo.bar}
        // match = foo.bar
        var replacer = function (str, match) {
            var replacement;

            // Loop through all subs. Example: ${a.b.c}
            // 0 -> replacement = context[a];
            // 1 -> replacement = context[a][b];
            // 2 -> replacement = context[a][b][c];
            var subs = match.split(/\.+/);
            for (var i = 0; i < subs.length; i++) {
                if (i == 0) {
                    replacement = context;
                }

                replacement = replacement[subs[i]];
            }

            if (typeof replacement === "function") {
                replacement = args ?
                    replacement.apply(null, args) :
                    replacement();
            }

            // If replacement is undefined, return the string 'undefined'.
            // This is a workaround for a bugs in browsers not properly
            // dealing with non-participating groups in regular expressions:
            // http://blog.stevenlevithan.com/archives/npcg-javascript
            if (typeof replacement == 'undefined') {
                return 'undefined';
            } else {
                return replacement;
            }
        };

        return template.replace(SuperMap.String.tokenRegEx, replacer);
    },

    /**
     * @member {RegExp} [SuperMap.String.tokenRegEx]
     * @description å¯»æ¾å¸¦ token çå­ç¬¦ä¸²ï¼é»è®¤ä¸º tokenRegEx=/\$\{([\w.]+?)\}/gã
     * @example
     * Examples: ${a}, ${a.b.c}, ${a-b}, ${5}
     */
    tokenRegEx: /\$\{([\w.]+?)\}/g,

    /**
     * @member {RegExp} [SuperMap.String.numberRegEx]
     * @description å¤æ­ä¸ä¸ªå­ç¬¦ä¸²æ¯å¦åªåå«ä¸ä¸ªæ°å¼ï¼é»è®¤ä¸º numberRegEx=/^([+-]?)(?=\d|\.\d)\d*(\.\d*)?([Ee]([+-]?\d+))?$/ã
     */
    numberRegEx: /^([+-]?)(?=\d|\.\d)\d*(\.\d*)?([Ee]([+-]?\d+))?$/,

    /**
     * @function SuperMap.String.isNumeric
     * @description å¤æ­ä¸ä¸ªå­ç¬¦ä¸²æ¯å¦åªåå«ä¸ä¸ªæ°å¼ã
     * @example
     * (code)
     * SuperMap.String.isNumeric("6.02e23") // true
     * SuperMap.String.isNumeric("12 dozen") // false
     * SuperMap.String.isNumeric("4") // true
     * SuperMap.String.isNumeric(" 4 ") // false
     * (end)
     * @returns {boolean} å­ç¬¦ä¸²åå«å¯ä¸çæ°å¼ï¼è¿å trueï¼å¦åè¿å falseã
     */
    isNumeric: function (value) {
        return SuperMap.String.numberRegEx.test(value);
    },

    /**
     * @function SuperMap.String.numericIf
     * @description æä¸ä¸ªçä¼¼æ°å¼åçå­ç¬¦ä¸²è½¬åä¸ºä¸ä¸ªæ°å¼ã
     * @returns {(number|string)} å¦æè½è½¬æ¢ä¸ºæ°å¼åè¿åæ°å¼ï¼å¦åè¿åå­ç¬¦ä¸²æ¬èº«ã
     */
    numericIf: function (value) {
        return SuperMap.String.isNumeric(value) ? parseFloat(value) : value;
    }

};

/**
 * @name Number
 * @memberOf SuperMap
 * @namespace
 * @category BaseTypes Util
 * @description æ°å¼æä½çä¸ç³»åå¸¸ç¨æ©å±å½æ°ã
 */
var NumberExt = SuperMap.Number = {

    /**
     * @member {string} [SuperMap.Number.decimalSeparator='.']
     * @description æ ¼å¼åæ°å­æ¶é»è®¤çå°æ°ç¹åéç¬¦ã
     * @constant
     */
    decimalSeparator: ".",

    /**
     * @member {string} [SuperMap.Number.thousandsSeparator=',']
     * @description æ ¼å¼åæ°å­æ¶é»è®¤çåä½åéç¬¦ã
     * @constant
     */
    thousandsSeparator: ",",

    /**
     * @function SuperMap.Number.limitSigDigs
     * @description éå¶æµ®ç¹æ°çæææ°å­ä½æ°ã
     * @param {number} num - æµ®ç¹æ°ã
     * @param {integer} sig - ææä½æ°ã
     * @returns {number} å°æ°å­åèäºå¥å°æå®æ°éçææä½æ°ã
     */
    limitSigDigs: function (num, sig) {
        var fig = 0;
        if (sig > 0) {
            fig = parseFloat(num.toPrecision(sig));
        }
        return fig;
    },

    /**
     * @function SuperMap.Number.format
     * @description æ°å­æ ¼å¼åè¾åºã
     * @param {number} num - æ°å­ã
     * @param {integer} [dec=0]  - æ°å­çå°æ°é¨ååèäºå¥å°æå®çä½æ°ãè®¾ç½®ä¸º null å¼æ¶å°æ°é¨åä¸åã
     * @param {string} [tsep=','] - åä½åéç¬¦ã
     * @param {string} [dsep='.'] - å°æ°ç¹åéç¬¦ã
     * @returns {string} æ°å­æ ¼å¼ååçå­ç¬¦ä¸²ã
     */
    format: function (num, dec, tsep, dsep) {
        dec = (typeof dec != "undefined") ? dec : 0;
        tsep = (typeof tsep != "undefined") ? tsep :
            SuperMap.Number.thousandsSeparator;
        dsep = (typeof dsep != "undefined") ? dsep :
            SuperMap.Number.decimalSeparator;

        if (dec != null) {
            num = parseFloat(num.toFixed(dec));
        }

        var parts = num.toString().split(".");
        if (parts.length === 1 && dec == null) {
            // integer where we do not want to touch the decimals
            dec = 0;
        }

        var integer = parts[0];
        if (tsep) {
            var thousands = /(-?[0-9]+)([0-9]{3})/;
            while (thousands.test(integer)) {
                integer = integer.replace(thousands, "$1" + tsep + "$2");
            }
        }

        var str;
        if (dec == 0) {
            str = integer;
        } else {
            var rem = parts.length > 1 ? parts[1] : "0";
            if (dec != null) {
                rem = rem + new Array(dec - rem.length + 1).join("0");
            }
            str = integer + dsep + rem;
        }
        return str;
    }
};

if (!Number.prototype.limitSigDigs) {
    /**
     * APIMethod: Number.limitSigDigs
     * éå¶æµ®ç¹æ°çæææ°å­ä½æ°.
     * @param {integer} sig -ææä½æ°ã
     * @returns {integer} å°æ°å­åèäºå¥å°æå®æ°éçææä½æ°ã
     *           å¦æä¼ å¥å¼ ä¸º nullã0ãæèæ¯è´æ°, è¿åå¼ 0ã
     */
    Number.prototype.limitSigDigs = function (sig) {
        return NumberExt.limitSigDigs(this, sig);
    };
}

/**
 * @name Function
 * @memberOf SuperMap
 * @namespace
 * @category BaseTypes Util
 * @description å½æ°æä½çä¸ç³»åå¸¸ç¨æ©å±å½æ°ã
 */
var FunctionExt = SuperMap.Function = {
    /**
     * @function SuperMap.Function.bind
     * @description ç»å®å½æ°å°å¯¹è±¡ãæ¹ä¾¿åå»º this çä½ç¨åã
     * @param {function} func - è¾å¥å½æ°ã
     * @param {Object} object - å¯¹è±¡ç»å®å°è¾å¥å½æ°ï¼ä½ä¸ºè¾å¥å½æ°ç this å¯¹è±¡ï¼ã
     * @returns {function} object åæ°ä½ä¸º func å½æ°ç this å¯¹è±¡ã
     */
    bind: function (func, object) {
        // create a reference to all arguments past the second one
        var args = Array.prototype.slice.apply(arguments, [2]);
        return function () {
            // Push on any additional arguments from the actual function call.
            // These will come after those sent to the bind call.
            var newArgs = args.concat(
                Array.prototype.slice.apply(arguments, [0])
            );
            return func.apply(object, newArgs);
        };
    },

    /**
     * @function SuperMap.Function.bindAsEventListener
     * @description ç»å®å½æ°å°å¯¹è±¡ï¼å¨è°ç¨è¯¥å½æ°æ¶éç½®å¹¶ä½¿ç¨äºä»¶å¯¹è±¡ä½ä¸ºç¬¬ä¸ä¸ªåæ°ã
     * @param {function} func - ç¨äºçå¬äºä»¶çå½æ°ã
     * @param {Object} object - this å¯¹è±¡çå¼ç¨ã
     * @returns {function}
     */
    bindAsEventListener: function (func, object) {
        return function (event) {
            return func.call(object, event || window.event);
        };
    },

    /**
     * @function SuperMap.Function.False
     * @description è¯¥å½æ°ä»ä»è¿å falseãè¯¥å½æ°ä¸»è¦æ¯é¿åå¨ IE8 ä»¥ä¸æµè§ä¸­ DOM äºä»¶å¥æçå¿åå½æ°é®é¢ã
     * @example
     * document.onclick = SuperMap.Function.False;
     * @returns {boolean}
     */
    False: function () {
        return false;
    },

    /**
     * @function SuperMap.Function.True
     * @description è¯¥å½æ°ä»ä»è¿å trueãè¯¥å½æ°ä¸»è¦æ¯é¿åå¨ IE8 ä»¥ä¸æµè§ä¸­ DOM äºä»¶å¥æçå¿åå½æ°é®é¢ã
     * @example
     * document.onclick = SuperMap.Function.True;
     * @returns {boolean}
     */
    True: function () {
        return true;
    },

    /**
     * @function SuperMap.Function.Void
     * @description å¯éç¨å½æ°ï¼ä»ä»è¿å "undefined"ã
     * @returns {undefined}
     */
    Void: function () {
    }

};

/**
 * @name Array
 * @memberOf SuperMap
 * @namespace
 * @category BaseTypes Util
 * @description æ°ç»æä½çä¸ç³»åå¸¸ç¨æ©å±å½æ°ã
 */
var ArrayExt = SuperMap.Array = {

    /**
     * @function SuperMap.Array.filter
     * @description è¿æ»¤æ°ç»ï¼æä¾äº ECMA-262 æ åä¸­ Array.prototype.filter å½æ°çæ©å±ãè¯¦è§ï¼{@link http://developer.mozilla.org/en/Core_JavaScript_1.5_Reference/Global_Objects/Array/filter}
     * @param {Array} array - è¦è¿æ»¤çæ°ç»ã
     * @param {function} callback - æ°ç»ä¸­çæ¯ä¸ä¸ªåç´ è°ç¨è¯¥å½æ°ã</br>
     *     å¦æå½æ°çè¿åå¼ä¸º trueï¼è¯¥åç´ å°åå«å¨è¿åçæ°ç»ä¸­ãè¯¥å½æ°æä¸ä¸ªåæ°: æ°ç»ä¸­çåç´ ï¼åç´ çç´¢å¼ï¼æ°ç»èªèº«ã</br>
     *     å¦æè®¾ç½®äºå¯éåæ° callerï¼å¨è°ç¨ callback æ¶ï¼ä½¿ç¨å¯éåæ° caller è®¾ç½®ä¸º callback çåæ°ã</br>
     * @param {Object} [caller] - å¨è°ç¨ callback æ¶ï¼ä½¿ç¨åæ° caller è®¾ç½®ä¸º callback çåæ°ã
     * @returns {Array} callback å½æ°è¿å true æ¶çåç´ å°ä½ä¸ºè¿åæ°ç»ä¸­çåç´ ã
     */
    filter: function (array, callback, caller) {
        var selected = [];
        if (Array.prototype.filter) {
            selected = array.filter(callback, caller);
        } else {
            var len = array.length;
            if (typeof callback != "function") {
                throw new TypeError();
            }
            for (var i = 0; i < len; i++) {
                if (i in array) {
                    var val = array[i];
                    if (callback.call(caller, val, i, array)) {
                        selected.push(val);
                    }
                }
            }
        }
        return selected;
    }

};

// CONCATENATED MODULE: ./src/common/commontypes/Util.js
/* CopyrightÂ© 2000 - 2019 SuperMap Software Co.Ltd. All rights reserved.
 * This program are made available under the terms of the Apache License, Version 2.0
 * which accompanies this distribution and is available at http://www.apache.org/licenses/LICENSE-2.0.html.*/



var Util = SuperMap.Util = SuperMap.Util || {};
/**
 * @name Util
 * @memberOf SuperMap
 * @namespace
 * @category BaseTypes Util
 * @description common å·¥å·ç±»ã
 */

/**
 * @description å¤å¶æºå¯¹è±¡çææå±æ§å°ç®æ å¯¹è±¡ä¸ï¼æºå¯¹è±¡ä¸çæ²¡æå®ä¹çå±æ§å¨ç®æ å¯¹è±¡ä¸ä¹ä¸ä¼è¢«è®¾ç½®ã
 * @example
 * è¦å¤å¶ SuperMap.Size å¯¹è±¡çææå±æ§å°èªå®ä¹å¯¹è±¡ä¸ï¼ä½¿ç¨æ¹æ³å¦ä¸:
 *     var size = new SuperMap.Size(100, 100);
 *     var obj = {}ï¼
 *     SuperMap.Util.extend(obj, size);
 * @param {Object} [destination] - ç®æ å¯¹è±¡ã
 * @param {Object} source - æºå¯¹è±¡ï¼å¶å±æ§å°è¢«è®¾ç½®å°ç®æ å¯¹è±¡ä¸ã
 * @returns {Object} ç®æ å¯¹è±¡ã
 */

SuperMap.Util.extend = function (destination, source) {
    destination = destination || {};
    if (source) {
        for (var property in source) {
            var value = source[property];
            if (value !== undefined) {
                destination[property] = value;
            }
        }

        /**
         * IE doesn't include the toString property when iterating over an object's
         * properties with the for(property in object) syntax.  Explicitly check if
         * the source has its own toString property.
         */

        /*
         * FF/Windows < 2.0.0.13 reports "Illegal operation on WrappedNative
         * prototype object" when calling hawOwnProperty if the source object
         * is an instance of window.Event.
         */

        var sourceIsEvt = typeof window.Event === "function"
            && source instanceof window.Event;

        if (!sourceIsEvt
            && source.hasOwnProperty && source.hasOwnProperty("toString")) {
            destination.toString = source.toString;
        }
    }
    return destination;
};
/**
 * @description å¯¹è±¡æ·è´ã
 * @param {Object} [des] - ç®æ å¯¹è±¡ã
 * @param {Object} soc - æºå¯¹è±¡ã
 */
SuperMap.Util.copy = function (des, soc) {
    des = des || {};
    var v;
    if (soc) {
        for (var p in des) {
            v = soc[p];
            if (typeof v !== 'undefined') {
                des[p] = v;
            }
        }
    }
};
/**
 * @description éæ¯å¯¹è±¡ï¼å°å¶å±æ§ç½®ç©ºã
 * @param {Object} [obj] - ç®æ å¯¹è±¡ã
 */
SuperMap.Util.reset = function (obj) {
    obj = obj || {};
    for (var p in obj) {
        if (obj.hasOwnProperty(p)) {
            if (typeof obj[p] === "object" && obj[p] instanceof Array) {
                for (var i in obj[p]) {
                    if (obj[p][i].destroy) {
                        obj[p][i].destroy();
                    }
                }
                obj[p].length = 0;
            } else if (typeof obj[p] === "object" && obj[p] instanceof Object) {
                if (obj[p].destroy) {
                    obj[p].destroy();
                }
            }
            obj[p] = null;
        }
    }
};

/**
 * @description è·å HTML åç´ æ°ç»ã
 * @returns {Array.<HTMLElement>} HTML åç´ æ°ç»ã
 */
SuperMap.Util.getElement = function () {
    var elements = [];

    for (var i = 0, len = arguments.length; i < len; i++) {
        var element = arguments[i];
        if (typeof element === 'string') {
            element = document.getElementById(element);
        }
        if (arguments.length === 1) {
            return element;
        }
        elements.push(element);
    }
    return elements;
};

/**
 * @description instance of çè·¨æµè§å¨å®ç°ã
 * @param {Object} o - å¯¹è±¡ã
 * @returns {boolean} æ¯å¦æ¯é¡µé¢åç´ ã
 */
SuperMap.Util.isElement = function (o) {
    return !!(o && o.nodeType === 1);
};

/**
 * @description å¤æ­ä¸ä¸ªå¯¹è±¡æ¯å¦æ¯æ°ç»ã
 * @param {Object} a - å¯¹è±¡ã
 * @returns {boolean} æ¯å¦æ¯æ°ç»ã
 */
SuperMap.Util.isArray = function (a) {
    return (Object.prototype.toString.call(a) === '[object Array]');
};


/**
 * @description ä»æ°ç»ä¸­å é¤æä¸é¡¹ã
 * @param {Array} array - æ°ç»ã
 * @param {Object} item - æ°ç»ä¸­è¦å é¤çä¸é¡¹ã
 * @returns {Array} æ§è¡å é¤æä½åçæ°ç»ã
 */
SuperMap.Util.removeItem = function (array, item) {
    for (var i = array.length - 1; i >= 0; i--) {
        if (array[i] === item) {
            array.splice(i, 1);
            //break;more than once??
        }
    }
    return array;
};

/**
 * @description è·åæå¯¹è±¡åæ°ç»ä¸­çç´¢å¼å¼ã
 * @param {Array} array - æ°ç»ã
 * @param {Object} obj - å¯¹è±¡ã
 * @returns {number} æå¯¹è±¡åæ°ç»ä¸­çç´¢å¼å¼ã
 */
SuperMap.Util.indexOf = function (array, obj) {
    if (array == null) {
        return -1;
    } else {
        // use the build-in function if available.
        if (typeof array.indexOf === "function") {
            return array.indexOf(obj);
        } else {
            for (var i = 0, len = array.length; i < len; i++) {
                if (array[i] === obj) {
                    return i;
                }
            }
            return -1;
        }
    }
};


/**
 * @description ä¿®æ¹æ DOM åç´ çè®¸å¤å±æ§ã
 * @param {HTMLElement} element - å¾ä¿®æ¹ç DOM åç´ ã
 * @param {string} [id] - DOM åç´ ç IDã
 * @param {SuperMap.Pixel} [px] - åå« DOM åç´ ç style å±æ§ç left å top å±æ§ã
 * @param {SuperMap.Size} [sz] - åå« DOM åç´ ç width å height å±æ§ã
 * @param {string} [position] - DOM åç´ ç position å±æ§ã
 * @param {string} [border] - DOM åç´ ç style å±æ§ç border å±æ§ã
 * @param {string} [overflow] - DOM åç´ ç style å±æ§ç overflow å±æ§ã
 * @param {number} [opacity] - ä¸éæåº¦å¼ãåå¼èå´ä¸º(0.0 - 1.0)ã
 */
SuperMap.Util.modifyDOMElement = function (element, id, px, sz, position,
                                           border, overflow, opacity) {

    if (id) {
        element.id = id;
    }
    if (px) {
        element.style.left = px.x + "px";
        element.style.top = px.y + "px";
    }
    if (sz) {
        element.style.width = sz.w + "px";
        element.style.height = sz.h + "px";
    }
    if (position) {
        element.style.position = position;
    }
    if (border) {
        element.style.border = border;
    }
    if (overflow) {
        element.style.overflow = overflow;
    }
    if (parseFloat(opacity) >= 0.0 && parseFloat(opacity) < 1.0) {
        element.style.filter = 'alpha(opacity=' + (opacity * 100) + ')';
        element.style.opacity = opacity;
    } else if (parseFloat(opacity) === 1.0) {
        element.style.filter = '';
        element.style.opacity = '';
    }
};


/**
 * @description Takes an object and copies any properties that don't exist from
 *     another properties, by analogy with SuperMap.Util.extend() from
 *     Prototype.js.
 *
 * @param {Object} [to] - ç®æ å¯¹è±¡ã
 * @param {Object} from - æºå¯¹è±¡ãAny properties of this object that
 *     are undefined in the to object will be set on the to object.
 *
 * @returns {Object} A reference to the to object.  Note that the to argument is modified
 *     in place and returned by this function.
 */
SuperMap.Util.applyDefaults = function (to, from) {
    to = to || {};
    /*
     * FF/Windows < 2.0.0.13 reports "Illegal operation on WrappedNative
     * prototype object" when calling hawOwnProperty if the source object is an
     * instance of window.Event.
     */
    var fromIsEvt = typeof window.Event === "function"
        && from instanceof window.Event;

    for (var key in from) {
        if (to[key] === undefined ||
            (!fromIsEvt && from.hasOwnProperty
                && from.hasOwnProperty(key) && !to.hasOwnProperty(key))) {
            to[key] = from[key];
        }
    }
    /**
     * IE doesn't include the toString property when iterating over an object's
     * properties with the for(property in object) syntax.  Explicitly check if
     * the source has its own toString property.
     */
    if (!fromIsEvt && from && from.hasOwnProperty
        && from.hasOwnProperty('toString') && !to.hasOwnProperty('toString')) {
        to.toString = from.toString;
    }

    return to;
};


/**
 * @description å°åæ°å¯¹è±¡è½¬æ¢ä¸º HTTP ç GET è¯·æ±ä¸­çåæ°å­ç¬¦ä¸²ãä¾å¦ï¼"key1=value1&key2=value2&key3=value3"ã
 * @param {Object} params - åæ°å¯¹è±¡ã
 * @returns {string} HTTP ç GET è¯·æ±ä¸­çåæ°å­ç¬¦ä¸²ã
 */
SuperMap.Util.getParameterString = function (params) {
    var paramsArray = [];

    for (var key in params) {
        var value = params[key];
        if ((value != null) && (typeof value !== 'function')) {
            var encodedValue;
            if (typeof value === 'object' && value.constructor === Array) {
                /* value is an array; encode items and separate with "," */
                var encodedItemArray = [];
                var item;
                for (var itemIndex = 0, len = value.length; itemIndex < len; itemIndex++) {
                    item = value[itemIndex];
                    encodedItemArray.push(encodeURIComponent(
                        (item === null || item === undefined) ? "" : item)
                    );
                }
                encodedValue = encodedItemArray.join(",");
            } else {
                /* value is a string; simply encode */
                encodedValue = encodeURIComponent(value);
            }
            paramsArray.push(encodeURIComponent(key) + "=" + encodedValue);
        }
    }

    return paramsArray.join("&");
};

/**
 * @description ç» URL è¿½å åæ°ã
 * @param {string} url - å¾è¿½å åæ°ç URL å­ç¬¦ä¸²ã
 * @param {string} paramStr - å¾è¿½å çåæ°ã
 * @returns {string} æ°ç URLã
 */
SuperMap.Util.urlAppend = function (url, paramStr) {
    var newUrl = url;
    if (paramStr) {
        var parts = (url + " ").split(/[?&]/);
        newUrl += (parts.pop() === " " ?
            paramStr :
            parts.length ? "&" + paramStr : "?" + paramStr);
    }
    return newUrl;
};

/**
 * @description ä¸ºäºé¿åæµ®ç¹ç²¾åº¦éè¯¯èä¿ççææä½æ°ã
 * @type {number}
 * @default 14
 */
SuperMap.Util.DEFAULT_PRECISION = 14;

/**
 * @description å°å­ç¬¦ä¸²ä»¥æ¥è¿çç²¾åº¦è½¬æ¢ä¸ºæ°å­ã
 * @param {string} number - å­ç¬¦ä¸²ã
 * @param {number} [precision=14] - ç²¾åº¦ã
 * @returns {number} æ°å­ã
 */
SuperMap.Util.toFloat = function (number, precision) {
    if (precision == null) {
        precision = SuperMap.Util.DEFAULT_PRECISION;
    }
    if (typeof number !== "number") {
        number = parseFloat(number);
    }
    return precision === 0 ? number :
        parseFloat(number.toPrecision(precision));
};

/**
 * @description è§åº¦è½¬å¼§åº¦ã
 * @param {number} x - è§åº¦ã
 * @returns {number} å¼§åº¦ã
 */
SuperMap.Util.rad = function (x) {
    return x * Math.PI / 180;
};

/**
 * @description ä» URL å­ç¬¦ä¸²ä¸­è§£æåºåæ°å¯¹è±¡ã
 * @param {string} url - URLã
 * @returns {Object} è§£æåºçåæ°å¯¹è±¡ã
 */
SuperMap.Util.getParameters = function (url) {
    // if no url specified, take it from the location bar
    url = (url === null || url === undefined) ? window.location.href : url;

    //parse out parameters portion of url string
    var paramsString = "";
    if (SuperMap.String.contains(url, '?')) {
        var start = url.indexOf('?') + 1;
        var end = SuperMap.String.contains(url, "#") ?
            url.indexOf('#') : url.length;
        paramsString = url.substring(start, end);
    }

    var parameters = {};
    var pairs = paramsString.split(/[&;]/);
    for (var i = 0, len = pairs.length; i < len; ++i) {
        var keyValue = pairs[i].split('=');
        if (keyValue[0]) {

            var key = keyValue[0];
            try {
                key = decodeURIComponent(key);
            } catch (err) {
                key = unescape(key);
            }

            // being liberal by replacing "+" with " "
            var value = (keyValue[1] || '').replace(/\+/g, " ");

            try {
                value = decodeURIComponent(value);
            } catch (err) {
                value = unescape(value);
            }

            // follow OGC convention of comma delimited values
            value = value.split(",");

            //if there's only one value, do not return as array                    
            if (value.length == 1) {
                value = value[0];
            }

            parameters[key] = value;
        }
    }
    return parameters;
};

/**
 * @description ä¸æ­éå¢è®¡æ°åéï¼ç¨äºçæå¯ä¸ IDã
 * @type {number}
 * @default 0
 */
SuperMap.Util.lastSeqID = 0;

/**
 * @description åå»ºå¯ä¸ ID å¼ã
 * @param {string} [prefix] - åç¼ã
 * @returns {string} å¯ä¸ç ID å¼ã
 */
SuperMap.Util.createUniqueID = function (prefix) {
    if (prefix == null) {
        prefix = "id_";
    }
    SuperMap.Util.lastSeqID += 1;
    return prefix + SuperMap.Util.lastSeqID;
};

/**
 * @memberOf SuperMap
 * @description æ¯åä½çè±å°ºæ°ã
 * @type {Object}
 * @constant
 */
SuperMap.INCHES_PER_UNIT = {
    'inches': 1.0,
    'ft': 12.0,
    'mi': 63360.0,
    'm': 39.3701,
    'km': 39370.1,
    'dd': 4374754,
    'yd': 36
};
SuperMap.INCHES_PER_UNIT["in"] = SuperMap.INCHES_PER_UNIT.inches;
SuperMap.INCHES_PER_UNIT["degrees"] = SuperMap.INCHES_PER_UNIT.dd;
SuperMap.INCHES_PER_UNIT["nmi"] = 1852 * SuperMap.INCHES_PER_UNIT.m;

// Units from CS-Map
SuperMap.METERS_PER_INCH = 0.02540005080010160020;
SuperMap.Util.extend(SuperMap.INCHES_PER_UNIT, {
    "Inch": SuperMap.INCHES_PER_UNIT.inches,
    "Meter": 1.0 / SuperMap.METERS_PER_INCH,   //EPSG:9001
    "Foot": 0.30480060960121920243 / SuperMap.METERS_PER_INCH,   //EPSG:9003
    "IFoot": 0.30480000000000000000 / SuperMap.METERS_PER_INCH,   //EPSG:9002
    "ClarkeFoot": 0.3047972651151 / SuperMap.METERS_PER_INCH,   //EPSG:9005
    "SearsFoot": 0.30479947153867624624 / SuperMap.METERS_PER_INCH,   //EPSG:9041
    "GoldCoastFoot": 0.30479971018150881758 / SuperMap.METERS_PER_INCH,   //EPSG:9094
    "IInch": 0.02540000000000000000 / SuperMap.METERS_PER_INCH,
    "MicroInch": 0.00002540000000000000 / SuperMap.METERS_PER_INCH,
    "Mil": 0.00000002540000000000 / SuperMap.METERS_PER_INCH,
    "Centimeter": 0.01000000000000000000 / SuperMap.METERS_PER_INCH,
    "Kilometer": 1000.00000000000000000000 / SuperMap.METERS_PER_INCH,   //EPSG:9036
    "Yard": 0.91440182880365760731 / SuperMap.METERS_PER_INCH,
    "SearsYard": 0.914398414616029 / SuperMap.METERS_PER_INCH,   //EPSG:9040
    "IndianYard": 0.91439853074444079983 / SuperMap.METERS_PER_INCH,   //EPSG:9084
    "IndianYd37": 0.91439523 / SuperMap.METERS_PER_INCH,   //EPSG:9085
    "IndianYd62": 0.9143988 / SuperMap.METERS_PER_INCH,   //EPSG:9086
    "IndianYd75": 0.9143985 / SuperMap.METERS_PER_INCH,   //EPSG:9087
    "IndianFoot": 0.30479951 / SuperMap.METERS_PER_INCH,   //EPSG:9080
    "IndianFt37": 0.30479841 / SuperMap.METERS_PER_INCH,   //EPSG:9081
    "IndianFt62": 0.3047996 / SuperMap.METERS_PER_INCH,   //EPSG:9082
    "IndianFt75": 0.3047995 / SuperMap.METERS_PER_INCH,   //EPSG:9083
    "Mile": 1609.34721869443738887477 / SuperMap.METERS_PER_INCH,
    "IYard": 0.91440000000000000000 / SuperMap.METERS_PER_INCH,   //EPSG:9096
    "IMile": 1609.34400000000000000000 / SuperMap.METERS_PER_INCH,   //EPSG:9093
    "NautM": 1852.00000000000000000000 / SuperMap.METERS_PER_INCH,   //EPSG:9030
    "Lat-66": 110943.316488932731 / SuperMap.METERS_PER_INCH,
    "Lat-83": 110946.25736872234125 / SuperMap.METERS_PER_INCH,
    "Decimeter": 0.10000000000000000000 / SuperMap.METERS_PER_INCH,
    "Millimeter": 0.00100000000000000000 / SuperMap.METERS_PER_INCH,
    "Dekameter": 10.00000000000000000000 / SuperMap.METERS_PER_INCH,
    "Decameter": 10.00000000000000000000 / SuperMap.METERS_PER_INCH,
    "Hectometer": 100.00000000000000000000 / SuperMap.METERS_PER_INCH,
    "GermanMeter": 1.0000135965 / SuperMap.METERS_PER_INCH,   //EPSG:9031
    "CaGrid": 0.999738 / SuperMap.METERS_PER_INCH,
    "ClarkeChain": 20.1166194976 / SuperMap.METERS_PER_INCH,   //EPSG:9038
    "GunterChain": 20.11684023368047 / SuperMap.METERS_PER_INCH,   //EPSG:9033
    "BenoitChain": 20.116782494375872 / SuperMap.METERS_PER_INCH,   //EPSG:9062
    "SearsChain": 20.11676512155 / SuperMap.METERS_PER_INCH,   //EPSG:9042
    "ClarkeLink": 0.201166194976 / SuperMap.METERS_PER_INCH,   //EPSG:9039
    "GunterLink": 0.2011684023368047 / SuperMap.METERS_PER_INCH,   //EPSG:9034
    "BenoitLink": 0.20116782494375872 / SuperMap.METERS_PER_INCH,   //EPSG:9063
    "SearsLink": 0.2011676512155 / SuperMap.METERS_PER_INCH,   //EPSG:9043
    "Rod": 5.02921005842012 / SuperMap.METERS_PER_INCH,
    "IntnlChain": 20.1168 / SuperMap.METERS_PER_INCH,   //EPSG:9097
    "IntnlLink": 0.201168 / SuperMap.METERS_PER_INCH,   //EPSG:9098
    "Perch": 5.02921005842012 / SuperMap.METERS_PER_INCH,
    "Pole": 5.02921005842012 / SuperMap.METERS_PER_INCH,
    "Furlong": 201.1684023368046 / SuperMap.METERS_PER_INCH,
    "Rood": 3.778266898 / SuperMap.METERS_PER_INCH,
    "CapeFoot": 0.3047972615 / SuperMap.METERS_PER_INCH,
    "Brealey": 375.00000000000000000000 / SuperMap.METERS_PER_INCH,
    "ModAmFt": 0.304812252984505969011938 / SuperMap.METERS_PER_INCH,
    "Fathom": 1.8288 / SuperMap.METERS_PER_INCH,
    "NautM-UK": 1853.184 / SuperMap.METERS_PER_INCH,
    "50kilometers": 50000.0 / SuperMap.METERS_PER_INCH,
    "150kilometers": 150000.0 / SuperMap.METERS_PER_INCH
});

//unit abbreviations supported by PROJ.4
SuperMap.Util.extend(SuperMap.INCHES_PER_UNIT, {
    "mm": SuperMap.INCHES_PER_UNIT["Meter"] / 1000.0,
    "cm": SuperMap.INCHES_PER_UNIT["Meter"] / 100.0,
    "dm": SuperMap.INCHES_PER_UNIT["Meter"] * 100.0,
    "km": SuperMap.INCHES_PER_UNIT["Meter"] * 1000.0,
    "kmi": SuperMap.INCHES_PER_UNIT["nmi"],    //International Nautical Mile
    "fath": SuperMap.INCHES_PER_UNIT["Fathom"], //International Fathom
    "ch": SuperMap.INCHES_PER_UNIT["IntnlChain"],  //International Chain
    "link": SuperMap.INCHES_PER_UNIT["IntnlLink"], //International Link
    "us-in": SuperMap.INCHES_PER_UNIT["inches"], //U.S. Surveyor's Inch
    "us-ft": SuperMap.INCHES_PER_UNIT["Foot"],    //U.S. Surveyor's Foot
    "us-yd": SuperMap.INCHES_PER_UNIT["Yard"],    //U.S. Surveyor's Yard
    "us-ch": SuperMap.INCHES_PER_UNIT["GunterChain"], //U.S. Surveyor's Chain
    "us-mi": SuperMap.INCHES_PER_UNIT["Mile"],   //U.S. Surveyor's Statute Mile
    "ind-yd": SuperMap.INCHES_PER_UNIT["IndianYd37"],  //Indian Yard
    "ind-ft": SuperMap.INCHES_PER_UNIT["IndianFt37"],  //Indian Foot
    "ind-ch": 20.11669506 / SuperMap.METERS_PER_INCH  //Indian Chain
});

/**
 * @memberOf SuperMap
 * @member [SuperMap.DOTS_PER_INCH=96]
 * @description åè¾¨çä¸æ¯ä¾å°ºä¹é´è½¬æ¢çå¸¸éã
 * @type {Object}
 */
SuperMap.DOTS_PER_INCH = 96;

/**
 * @param {number} scale - æ¯ä¾å°ºã
 * @returns {number} è¿åæ­£å¸¸ç scale å¼ã
 */
SuperMap.Util.normalizeScale = function (scale) {
    var normScale = (scale > 1.0) ? (1.0 / scale) : scale;
    return normScale;
};

/**
 * @description æ¯ä¾å°ºè½¬åè¾¨çã
 * @param {number} scale - æ¯ä¾å°ºã
 * @param {string} [units='degrees'] - æ¯ä¾å°ºåä½ã
 * @returns {number} åè¾¨çã
 */
SuperMap.Util.getResolutionFromScale = function (scale, units) {
    var resolution;
    if (scale) {
        if (units == null) {
            units = "degrees";
        }
        var normScale = SuperMap.Util.normalizeScale(scale);
        resolution = 1 / (normScale * SuperMap.INCHES_PER_UNIT[units]
            * SuperMap.DOTS_PER_INCH);
    }
    return resolution;
};

/**
 * @description åè¾¨çè½¬æ¯ä¾å°ºã
 * @param {number} resolution - åè¾¨çã
 * @param {string} [units='degrees'] - åè¾¨çåä½ã
 * @returns {number} æ¯ä¾å°ºã
 */
SuperMap.Util.getScaleFromResolution = function (resolution, units) {

    if (units == null) {
        units = "degrees";
    }

    var scale = resolution * SuperMap.INCHES_PER_UNIT[units] *
        SuperMap.DOTS_PER_INCH;
    return scale;
};

/**
 * @memberOf SuperMap
 * @description å¦æ userAgent æè·å°æµè§å¨ä½¿ç¨çæ¯ Gecko å¼æåè¿å trueã
 * @constant
 */
SuperMap.IS_GECKO = (function () {
    var ua = navigator.userAgent.toLowerCase();
    return ua.indexOf("webkit") === -1 && ua.indexOf("gecko") !== -1;
})();

/**
 * @memberOf SuperMap
 * @description æµè§å¨åç§°ï¼ä¾èµäº userAgent å±æ§ï¼BROWSER_NAME å¯ä»¥æ¯ç©ºï¼æèä»¥ä¸æµè§å¨ï¼
 *     * "opera" -- Opera
 *     * "msie"  -- Internet Explorer
 *     * "safari" -- Safari
 *     * "firefox" -- Firefox
 *     * "mozilla" -- Mozilla
 * @constant
 */
SuperMap.Browser = (function () {
    var name = '', version = '', device = 'pc', uaMatch;
    //ä»¥ä¸è¿è¡æµè¯
    var ua = navigator.userAgent.toLowerCase();
    if (ua.indexOf("msie") > -1 || (ua.indexOf("trident") > -1 && ua.indexOf("rv") > -1)) {
        name = 'msie';
        uaMatch = ua.match(/msie ([\d.]+)/) || ua.match(/rv:([\d.]+)/);
    } else if (ua.indexOf("chrome") > -1) {
        name = 'chrome';
        uaMatch = ua.match(/chrome\/([\d.]+)/);
    } else if (ua.indexOf("firefox") > -1) {
        name = 'firefox';
        uaMatch = ua.match(/firefox\/([\d.]+)/);
    } else if (ua.indexOf("opera") > -1) {
        name = 'opera';
        uaMatch = ua.match(/version\/([\d.]+)/);
    } else if (ua.indexOf("safari") > -1) {
        name = 'safari';
        uaMatch = ua.match(/version\/([\d.]+)/);
    }
    version = uaMatch ? uaMatch[1] : '';

    if (ua.indexOf("ipad") > -1 || ua.indexOf("ipod") > -1 || ua.indexOf("iphone") > -1) {
        device = 'apple';
    } else if (ua.indexOf("android") > -1) {
        uaMatch = ua.match(/version\/([\d.]+)/);
        version = uaMatch ? uaMatch[1] : '';
        device = 'android';
    }
    return {name: name, version: version, device: device};
})();

/**
 * @description è·åæµè§å¨ç¸å³ä¿¡æ¯ãæ¯æçæµè§å¨åæ¬ï¼Operaï¼Internet Explorerï¼Safariï¼Firefoxã
 * @returns {Object} è·åæµè§å¨åç§°ãçæ¬ãè®¾å¤åç§°ãå¯¹åºçå±æ§åå«ä¸º name, version, deviceã
 */
SuperMap.Util.getBrowser = function () {
    return SuperMap.Browser;
};

/**
 * @description æµè§å¨æ¯å¦æ¯æ Canvasã
 * @returns {boolean} è·åå½åæµè§å¨æ¯å¦æ¯æ HTML5 Canvasã
 */
SuperMap.Util.isSupportCanvas = (function () {
    var checkRes = true, broz = SuperMap.Util.getBrowser();
    if (document.createElement("canvas").getContext) {
        if (broz.name === 'firefox' && parseFloat(broz.version) < 5) {
            checkRes = false;
        }
        if (broz.name === 'safari' && parseFloat(broz.version) < 4) {
            checkRes = false;
        }
        if (broz.name === 'opera' && parseFloat(broz.version) < 10) {
            checkRes = false;
        }
        if (broz.name === 'msie' && parseFloat(broz.version) < 9) {
            checkRes = false;
        }
    } else {
        checkRes = false;
    }
    return checkRes;
})();

/**
 * @description å¤æ­ï¼æµè§å¨æ¯å¦æ¯æ Canvasã
 * @returns {boolean} è·åå½åæµè§å¨æ¯å¦æ¯æ HTML5 Canvas ã
 */
SuperMap.Util.supportCanvas = function () {
    return SuperMap.Util.isSupportCanvas;
};

//å°æå¡ç«¯çå°å¾åä½è½¬æSuperMapçå°å¾åä½
SuperMap.INCHES_PER_UNIT["degree"] = SuperMap.INCHES_PER_UNIT.dd;
SuperMap.INCHES_PER_UNIT["meter"] = SuperMap.INCHES_PER_UNIT.m;
SuperMap.INCHES_PER_UNIT["foot"] = SuperMap.INCHES_PER_UNIT.ft;
SuperMap.INCHES_PER_UNIT["inch"] = SuperMap.INCHES_PER_UNIT.inches;
SuperMap.INCHES_PER_UNIT["mile"] = SuperMap.INCHES_PER_UNIT.mi;
SuperMap.INCHES_PER_UNIT["kilometer"] = SuperMap.INCHES_PER_UNIT.km;
SuperMap.INCHES_PER_UNIT["yard"] = SuperMap.INCHES_PER_UNIT.yd;

/**
 * @description å¤æ­ä¸ä¸ª URL è¯·æ±æ¯å¦å¨å½ååä¸­ã
 * @param {string} url - URL è¯·æ±å­ç¬¦ä¸²ã
 * @returns {boolean} URL è¯·æ±æ¯å¦å¨å½ååä¸­ã
 */
SuperMap.Util.isInTheSameDomain = function (url) {
    if (!url) {
        return true;
    }
    var index = url.indexOf("//");
    var documentUrl = document.location.toString();
    var documentIndex = documentUrl.indexOf("//");
    if (index === -1) {
        return true;
    } else {
        var protocol;
        var substring = protocol = url.substring(0, index);
        var documentSubString = documentUrl.substring(documentIndex + 2);
        documentIndex = documentSubString.indexOf("/");
        var documentPortIndex = documentSubString.indexOf(":");
        var documentDomainWithPort = documentSubString.substring(0, documentIndex);
        //var documentPort;

        var documentprotocol = document.location.protocol;
        if (documentPortIndex !== -1) {
            // documentPort = +documentSubString.substring(documentPortIndex, documentIndex);
        } else {
            documentDomainWithPort += ':' + (documentprotocol.toLowerCase() === 'http:' ? 80 : 443);
        }
        if (documentprotocol.toLowerCase() !== substring.toLowerCase()) {
            return false;
        }
        substring = url.substring(index + 2);
        var portIndex = substring.indexOf(":");
        index = substring.indexOf("/");
        var domainWithPort = substring.substring(0, index);
        var domain;
        if (portIndex !== -1) {
            domain = substring.substring(0, portIndex);
        } else {
            domain = substring.substring(0, index);
            domainWithPort += ':' + (protocol.toLowerCase() === 'http:' ? 80 : 443);
        }
        var documentDomain = document.domain;
        if (domain === documentDomain && domainWithPort === documentDomainWithPort) {
            return true;
        }
    }
    return false;
};

/**
 * @description è®¡ç® iServer æå¡ç REST å¾å±çæ¾ç¤ºåè¾¨çï¼éè¦ä» iServer ç REST å¾å±è¡¨è¿°ä¸­è·å viewBoundsãviewerãscaleãcoordUnitãdatumAxis äºä¸ªåæ°ï¼æ¥è¿è¡è®¡ç®ã
 * @param {SuperMap.Bounds} viewBounds - å°å¾çåç§å¯è§èå´ï¼å³å°å¾åå§åæ¶é»è®¤çå°å¾æ¾ç¤ºèå´ã
 * @param {SuperMap.Size} viewer - å°å¾åå§åæ¶é»è®¤çå°å¾å¾ççå°ºå¯¸ã
 * @param {number} scale - å°å¾åå§åæ¶é»è®¤çæ¾ç¤ºæ¯ä¾å°ºã
 * @param {string} [coordUnit='degrees'] - æå½±åæ ç³»ç»çå°å¾åä½ã
 * @param {number} [datumAxis=6378137] - å°çåæ ç³»ç»æ¤­çä½é¿åè½´ãç¨æ·èªå®ä¹å°å¾ç Options æ¶ï¼è¥æªæå®è¯¥åæ°çå¼ï¼åç³»ç»é»è®¤ä¸º WGS84 åèç³»çæ¤­çä½é¿åè½´ 6378137ã
 * @returns {number} è¿åå¾å±æ¾ç¤ºåè¾¨çã
 */
SuperMap.Util.calculateDpi = function (viewBounds, viewer, scale, coordUnit, datumAxis) {
    //10000 æ¯ 0.1æ¯«ç±³ä¸ç±³çè½¬æ¢ãDPIçè®¡ç®å¬å¼ï¼Viewer / DPI *  0.0254 * 10000 = ViewBounds * scale ï¼å¬å¼ä¸­ç10000æ¯ä¸ºäºæé«è®¡ç®ç»æçç²¾åº¦ï¼ä»¥ä¸åºç°çratioçä¸ºå¦æ­¤ã
    if (!viewBounds || !viewer || !scale) {
        return;
    }
    var ratio = 10000,
        rvbWidth = viewBounds.getWidth(),
        rvbHeight = viewBounds.getHeight(),
        rvWidth = viewer.w,
        rvHeight = viewer.h;
    //ç¨æ·èªå®ä¹å°å¾çOptionsæ¶ï¼è¥æªæå®è¯¥åæ°çå¼ï¼åç³»ç»é»è®¤ä¸º6378137ç±³ï¼å³WGS84åèç³»çæ¤­çä½é¿åè½´ã
    datumAxis = datumAxis || 6378137;
    coordUnit = coordUnit || "degrees";
    var dpi;
    if (coordUnit.toLowerCase() === "degree" || coordUnit.toLowerCase() === "degrees" || coordUnit.toLowerCase() === "dd") {
        let num1 = rvbWidth / rvWidth,
            num2 = rvbHeight / rvHeight,
            resolution = num1 > num2 ? num1 : num2;
        dpi = 0.0254 * ratio / resolution / scale / ((Math.PI * 2 * datumAxis) / 360) / ratio;

    } else {
        let resolution = rvbWidth / rvWidth;
        dpi = 0.0254 * ratio / resolution / scale / ratio;
    }
    return dpi;
};

/**
 * @description å°å¯¹è±¡è½¬æ¢æ JSON å­ç¬¦ä¸²ã
 * @param {Object} obj - è¦è½¬æ¢æ JSON ç Object å¯¹è±¡ã
 * @returns {string} è¿åè½¬æ¢åç JSON å¯¹è±¡ã
 */
SuperMap.Util.toJSON = function (obj) {
    var objInn = obj;
    if (objInn == null) {
        return null;
    }
    switch (objInn.constructor) {
        case String:
            //s = "'" + str.replace(/(["\\])/g, "\\$1") + "'";   stringå«æåå¼å·åºé
            objInn = '"' + objInn.replace(/(["\\])/g, '\\$1') + '"';
            objInn = objInn.replace(/\n/g, "\\n");
            objInn = objInn.replace(/\r/g, "\\r");
            objInn = objInn.replace("<", "&lt;");
            objInn = objInn.replace(">", "&gt;");
            objInn = objInn.replace(/%/g, "%25");
            objInn = objInn.replace(/&/g, "%26");
            return objInn;
        case Array:
            var arr = [];
            for (var i = 0, len = objInn.length; i < len; i++) {
                arr.push(SuperMap.Util.toJSON(objInn[i]));
            }
            return "[" + arr.join(",") + "]";
        case Number:
            return isFinite(objInn) ? String(objInn) : null;
        case Boolean:
            return String(objInn);
        case Date:
            var dateStr = "{" + "'__type':\"System.DateTime\"," +
                "'Year':" + objInn.getFullYear() + "," +
                "'Month':" + (objInn.getMonth() + 1) + "," +
                "'Day':" + objInn.getDate() + "," +
                "'Hour':" + objInn.getHours() + "," +
                "'Minute':" + objInn.getMinutes() + "," +
                "'Second':" + objInn.getSeconds() + "," +
                "'Millisecond':" + objInn.getMilliseconds() + "," +
                "'TimezoneOffset':" + objInn.getTimezoneOffset() + "}";
            return dateStr;
        default:
            if (objInn["toJSON"] != null && typeof objInn["toJSON"] === "function") {
                return objInn.toJSON();
            }
            if (typeof objInn === "object") {
                if (objInn.length) {
                    let arr = [];
                    for (let i = 0, len = objInn.length; i < len; i++) {
                        arr.push(SuperMap.Util.toJSON(objInn[i]));
                    }
                    return "[" + arr.join(",") + "]";
                }
                let arr = [];
                for (let attr in objInn) {
                    //ä¸ºè§£å³SuperMap.Geometryç±»åå¤´jsonæ¶å æ æº¢åºçé®é¢ï¼attr == "parent"æ¶ä¸è¿è¡jsonè½¬æ¢
                    if (typeof objInn[attr] !== "function" && attr !== "CLASS_NAME" && attr !== "parent") {
                        arr.push("'" + attr + "':" + SuperMap.Util.toJSON(objInn[attr]));
                    }
                }

                if (arr.length > 0) {
                    return "{" + arr.join(",") + "}";
                } else {
                    return "{}";
                }
            }
            return objInn.toString();
    }
};

/**
 * @description æ ¹æ®æ¯ä¾å°ºå dpi è®¡ç®å±å¹åè¾¨çã
 * @param {number} scale - æ¯ä¾å°ºã
 * @param {number} dpi - å¾ååè¾¨çï¼è¡¨ç¤ºæ¯è±å¯¸åçåç´ ä¸ªæ°ã
 * @param {string} [coordUnit] - æå½±åæ ç³»ç»çå°å¾åä½ã
 * @param {number} [datumAxis=6378137] - å°çåæ ç³»ç»æ¤­çä½é¿åè½´ãç¨æ·èªå®ä¹å°å¾ç Options æ¶ï¼è¥æªæå®è¯¥åæ°çå¼ï¼å DPI é»è®¤æç§ WGS84 åèç³»çæ¤­çä½é¿åè½´ 6378137 æ¥è®¡ç®ã
 * @returns {number} è¿åå½åæ¯ä¾å°ºä¸çå±å¹åè¾¨çã
 */
SuperMap.Util.getResolutionFromScaleDpi = function (scale, dpi, coordUnit, datumAxis) {
    var resolution = null,
        ratio = 10000;
    //ç¨æ·èªå®ä¹å°å¾çOptionsæ¶ï¼è¥æªæå®è¯¥åæ°çå¼ï¼åç³»ç»é»è®¤ä¸º6378137ç±³ï¼å³WGS84åèç³»çæ¤­çä½é¿åè½´ã
    datumAxis = datumAxis || 6378137;
    coordUnit = coordUnit || "";
    if (scale > 0 && dpi > 0) {
        scale = SuperMap.Util.normalizeScale(scale);
        if (coordUnit.toLowerCase() === "degree" || coordUnit.toLowerCase() === "degrees" || coordUnit.toLowerCase() === "dd") {
            //scale = SuperMap.Util.normalizeScale(scale);
            resolution = 0.0254 * ratio / dpi / scale / ((Math.PI * 2 * datumAxis) / 360) / ratio;
            return resolution;
        } else {
            resolution = 0.0254 * ratio / dpi / scale / ratio;
            return resolution;
        }
    }
    return -1;
};

/**
 * @description æ ¹æ® resolutionãdpiãcoordUnit å datumAxis è®¡ç®æ¯ä¾å°ºã
 * @param {number} resolution - ç¨äºè®¡ç®æ¯ä¾å°ºçå°å¾åè¾¨çã
 * @param {number} dpi - å¾ååè¾¨çï¼è¡¨ç¤ºæ¯è±å¯¸åçåç´ ä¸ªæ°ã
 * @param {string} [coordUnit] - æå½±åæ ç³»ç»çå°å¾åä½ã
 * @param {number} [datumAxis=6378137] - å°çåæ ç³»ç»æ¤­çä½é¿åè½´ãç¨æ·èªå®ä¹å°å¾ç Options æ¶ï¼è¥æªæå®è¯¥åæ°çå¼ï¼å DPI é»è®¤æç§ WGS84 åèç³»çæ¤­çä½é¿åè½´ 6378137 æ¥è®¡ç®ã
 * @returns {number} è¿åå½åå±å¹åè¾¨çä¸çæ¯ä¾å°ºã
 */
SuperMap.Util.getScaleFromResolutionDpi = function (resolution, dpi, coordUnit, datumAxis) {
    var scale = null,
        ratio = 10000;
    //ç¨æ·èªå®ä¹å°å¾çOptionsæ¶ï¼è¥æªæå®è¯¥åæ°çå¼ï¼åç³»ç»é»è®¤ä¸º6378137ç±³ï¼å³WGS84åèç³»çæ¤­çä½é¿åè½´ã
    datumAxis = datumAxis || 6378137;
    coordUnit = coordUnit || "";
    if (resolution > 0 && dpi > 0) {
        if (coordUnit.toLowerCase() === "degree" || coordUnit.toLowerCase() === "degrees" || coordUnit.toLowerCase() === "dd") {
            scale = 0.0254 * ratio / dpi / resolution / ((Math.PI * 2 * datumAxis) / 360) / ratio;
            return scale;
        } else {
            scale = 0.0254 * ratio / dpi / resolution / ratio;
            return scale;
        }
    }
    return -1;
};

/**
 * @description è½¬æ¢æ¥è¯¢ç»æã
 * @param {Object} result - æ¥è¯¢ç»æã
 * @returns {Object} è½¬æ¢åçæ¥è¯¢ç»æã
 */
SuperMap.Util.transformResult = function (result) {
    if (result.responseText && typeof result.responseText === "string") {
        result = JSON.parse(result.responseText);
    }
    return result;
};

/**
 * @description å±æ§æ·è´ï¼ä¸æ·è´æ¹æ³ç±»å(CLASS_NAME)ç­ã
 * @param {Object} [destination] - æ·è´ç®æ ã
 * @param {Object} source - æºå¯¹è±¡ã
 *
 */
SuperMap.Util.copyAttributes = function (destination, source) {
    destination = destination || {};
    if (source) {
        for (var property in source) {
            var value = source[property];
            if (value !== undefined && property !== "CLASS_NAME" && typeof value !== "function") {
                destination[property] = value;
            }
        }
    }
    return destination;
};

/**
 * @description å°æºå¯¹è±¡ä¸çå±æ§æ·è´å°ç®æ å¯¹è±¡ä¸ãï¼ä¸æ·è´ CLASS_NAME åæ¹æ³ï¼
 * @param {Object} [destination] - ç®æ å¯¹è±¡ã
 * @param {Object} source - æºå¯¹è±¡ã
 * @param {Array.<string>} clip - æºå¯¹è±¡ä¸­ç¦æ­¢æ·è´å°ç®æ å¯¹è±¡çå±æ§ï¼ç®çæ¯é²æ­¢ç®æ å¯¹è±¡ä¸ä¸å¯ä¿®æ¹çå±æ§è¢«ç¯¡æ¹ã
 *
 */
SuperMap.Util.copyAttributesWithClip = function (destination, source, clip) {
    destination = destination || {};
    if (source) {
        for (var property in source) {
            //å»æç¦æ­¢æ·è´çå±æ§
            var isInClip = false;
            if (clip && clip.length) {
                for (var i = 0, len = clip.length; i < len; i++) {
                    if (property === clip[i]) {
                        isInClip = true;
                        break;
                    }
                }
            }
            if (isInClip === true) {
                continue;
            }

            var value = source[property];
            if (value !== undefined && property !== "CLASS_NAME" && typeof value !== "function") {
                destination[property] = value;
            }
        }
    }
    return destination;
};

/**
 * @description åéä¸ä¸ª Object å¯¹è±¡
 * @param {Object} obj - éè¦åéçå¯¹è±¡ã
 * @returns {Object} è¿åå¯¹è±¡çæ·è´å¯¹è±¡ï¼æ³¨ææ¯æ°çå¯¹è±¡ï¼ä¸æ¯æåã
 */
SuperMap.Util.cloneObject = function (obj) {
    // Handle the 3 simple types, and null or undefined
    if (null === obj || "object" !== typeof obj) {
        return obj;
    }

    // Handle Date
    if (obj instanceof Date) {
        let copy = new Date();
        copy.setTime(obj.getTime());
        return copy;
    }

    // Handle Array
    if (obj instanceof Array) {
        let copy = obj.slice(0);
        return copy;
    }

    // Handle Object
    if (obj instanceof Object) {
        let copy = {};
        for (var attr in obj) {
            if (obj.hasOwnProperty(attr)) {
                copy[attr] = SuperMap.Util.cloneObject(obj[attr]);
            }
        }
        return copy;
    }

    throw new Error("Unable to copy obj! Its type isn't supported.");
};

/**
 * @description å¤æ­ä¸¤æ¡çº¿æ®µæ¯ä¸æ¯æäº¤ç¹ã
 * @param {SuperMap.Geometry.Point} a1 - ç¬¬ä¸æ¡çº¿æ®µçèµ·å§èç¹ã
 * @param {SuperMap.Geometry.Point} a2 - ç¬¬ä¸æ¡çº¿æ®µçç»æèç¹ã
 * @param {SuperMap.Geometry.Point} b1 - ç¬¬äºæ¡çº¿æ®µçèµ·å§èç¹ã
 * @param {SuperMap.Geometry.Point} b2 - ç¬¬äºæ¡çº¿æ®µçç»æèç¹ã
 * @returns {Object} å¦æç¸äº¤è¿åäº¤ç¹ï¼å¦æä¸ç¸äº¤è¿åä¸¤æ¡çº¿æ®µçä½ç½®å³ç³»ã
 */
SuperMap.Util.lineIntersection = function (a1, a2, b1, b2) {
    var intersectValue = null;
    var k1;
    var k2;
    var b = (b2.x - b1.x) * (a1.y - b1.y) - (b2.y - b1.y) * (a1.x - b1.x);
    var a = (a2.x - a1.x) * (a1.y - b1.y) - (a2.y - a1.y) * (a1.x - b1.x);
    var ab = (b2.y - b1.y) * (a2.x - a1.x) - (b2.x - b1.x) * (a2.y - a1.y);
    //ab==0ä»£è¡¨ä¸¤æ¡çº¿æ­çæçä¸æ ·
    if (ab != 0) {
        k1 = b / ab;
        k2 = a / ab;

        if (k1 >= 0 && k2 <= 1 && k1 <= 1 && k2 >= 0) {
            intersectValue = new SuperMap.Geometry.Point(a1.x + k1 * (a2.x - a1.x), a1.y + k1 * (a2.y - a1.y));
        } else {
            intersectValue = "No Intersection";
        }
    } else {

        if (b == 0 && a == 0) {
            var maxy = Math.max(a1.y, a2.y);
            var miny = Math.min(a1.y, a2.y);
            var maxx = Math.max(a1.x, a2.x);
            var minx = Math.min(a1.x, a2.x);
            if (((b1.y >= miny && b1.y <= maxy) || (b2.y >= miny && b2.y <= maxy)) &&
                (b1.x >= minx && b1.x <= maxx) || (b2.x >= minx && b2.x <= maxx)) {
                intersectValue = "Coincident";//éå
            } else {
                intersectValue = "Parallel";//å¹³è¡
            }

        } else {
            intersectValue = "Parallel";//å¹³è¡
        }
    }
    return intersectValue;
};

/**
 * @description è·åææ¬å¤æ¥ç©å½¢å®½åº¦ä¸é«åº¦ã
 * @param {SuperMap.ThemeStyle} style - ææ¬æ ·å¼ã
 * @param {string} text - ææ¬åå®¹ã
 * @param {Object} element - DOM åç´ ã
 * @returns {Object} è¿åè£åªåçå®½åº¦ï¼é«åº¦ä¿¡æ¯ã
 */
SuperMap.Util.getTextBounds = function (style, text, element) {
    document.body.appendChild(element);
    element.style.width = 'auto';
    element.style.height = 'auto';
    if (style.fontSize) {
        element.style.fontSize = style.fontSize;
    }
    if (style.fontFamily) {
        element.style.fontFamily = style.fontFamily;
    }
    if (style.fontWeight) {
        element.style.fontWeight = style.fontWeight;
    }
    element.style.position = 'relative';
    element.style.visibility = 'hidden';
    //fix å¨æäºæåµä¸ï¼elementåçææ¬åæç«èµ·æåï¼å¯¼è´å®½åº¦è®¡ç®ä¸æ­£ç¡®çbug
    element.style.display = 'inline-block';
    element.innerHTML = text;
    var textWidth = element.clientWidth;
    var textHeight = element.clientHeight;
    document.body.removeChild(element);
    return {
        textWidth: textWidth,
        textHeight: textHeight
    };
};

// CONCATENATED MODULE: ./src/common/commontypes/Event.js
/* CopyrightÂ© 2000 - 2019 SuperMap Software Co.Ltd. All rights reserved.
 * This program are made available under the terms of the Apache License, Version 2.0
 * which accompanies this distribution and is available at http://www.apache.org/licenses/LICENSE-2.0.html.*/



/**
 * @name Event
 * @memberOf SuperMap
 * @namespace
 * @description äºä»¶å¤çå½æ°.
 */
var Event = SuperMap.Event = {

    /**
     * @description  A hash table cache of the event observers. Keyed by element._eventCacheID
     * @type {boolean}
     * @default false
     */
    observers: false,

    /**
     * @description KEY_SPACE
     * @type {number}
     * @default 32
     */
    KEY_SPACE: 32,

    /**
     * @description KEY_BACKSPACE
     * @type {number}
     * @default 8
     */
    KEY_BACKSPACE: 8,

    /**
     * @description KEY_TAB
     * @type {number}
     * @default 9
     */
    KEY_TAB: 9,

    /**
     * @description KEY_RETURN
     * @type {number}
     * @default 13
     */
    KEY_RETURN: 13,

    /**
     * @description KEY_ESC
     * @type {number}
     * @default 27
     */
    KEY_ESC: 27,

    /**
     * @description KEY_LEFT
     * @type {number}
     * @default 37
     */
    KEY_LEFT: 37,

    /**
     * @description KEY_UP
     * @type {number}
     * @default 38
     */
    KEY_UP: 38,

    /**
     * @description KEY_RIGHT
     * @type {number}
     * @default 39
     */
    KEY_RIGHT: 39,

    /**
     * @description KEY_DOWN
     * @type {number}
     * @default 40
     */
    KEY_DOWN: 40,

    /**
     * @description KEY_DELETE
     * @type {number}
     * @default 46
     */
    KEY_DELETE: 46,


    /**
     * @description Cross browser event element detection.
     * @param {Event} event - The event
     * @returns {HTMLElement} The element that caused the event
     */
    element: function (event) {
        return event.target || event.srcElement;
    },

    /**
     * @description Determine whether event was caused by a single touch
     * @param {Event} event - The event
     * @returns {boolean}
     */
    isSingleTouch: function (event) {
        return event.touches && event.touches.length === 1;
    },

    /**
     * @description Determine whether event was caused by a multi touch
     * @param {Event} event - The event
     * @returns {boolean}
     */
    isMultiTouch: function (event) {
        return event.touches && event.touches.length > 1;
    },

    /**
     * @description Determine whether event was caused by a left click.
     * @param {Event} event - The event
     * @returns {boolean}
     */
    isLeftClick: function (event) {
        return (((event.which) && (event.which === 1)) ||
            ((event.button) && (event.button === 1)));
    },

    /**
     * @description Determine whether event was caused by a right mouse click.
     * @param {Event} event - The event
     * @returns {boolean}
     */
    isRightClick: function (event) {
        return (((event.which) && (event.which === 3)) ||
            ((event.button) && (event.button === 2)));
    },

    /**
     * @description Stops an event from propagating.
     * @param {Event} event - The event
     * @param {boolean} allowDefault - If true, we stop the event chain but still allow the default browser  behaviour (text selection, radio-button clicking, etc) Default false
     */
    stop: function (event, allowDefault) {

        if (!allowDefault) {
            if (event.preventDefault) {
                event.preventDefault();
            } else {
                event.returnValue = false;
            }
        }

        if (event.stopPropagation) {
            event.stopPropagation();
        } else {
            event.cancelBubble = true;
        }
    },

    /**
     * @param {Event} event - The eventã
     * @param {string} tagName - html æ ç­¾åã
     * @returns {HTMLElement} The first node with the given tagName, starting from the node the event was triggered on and traversing the DOM upwards
     */
    findElement: function (event, tagName) {
        var element = SuperMap.Event.element(event);
        while (element.parentNode && (!element.tagName ||
            (element.tagName.toUpperCase() != tagName.toUpperCase()))) {
            element = element.parentNode;
        }
        return element;
    },

    /**
     * @description çå¬äºä»¶ï¼æ³¨åäºä»¶å¤çæ¹æ³ã
     * @param {(HTMLElement|string)} elementParam - å¾çå¬ç DOM å¯¹è±¡æèå¶ ID æ è¯ã
     * @param {string} name - çå¬äºä»¶çç±»å«åç§°ã
     * @param {function} observer - æ³¨åçäºä»¶å¤çæ¹æ³ã
     * @param {boolean} [useCapture=false] - æ¯å¦æè·ã
     */
    observe: function (elementParam, name, observer, useCapture) {
        var element = Util.getElement(elementParam);
        useCapture = useCapture || false;

        if (name === 'keypress' &&
            (navigator.appVersion.match(/Konqueror|Safari|KHTML/)
                || element.attachEvent)) {
            name = 'keydown';
        }

        //if observers cache has not yet been created, create it
        if (!this.observers) {
            this.observers = {};
        }

        //if not already assigned, make a new unique cache ID
        if (!element._eventCacheID) {
            var idPrefix = "eventCacheID_";
            if (element.id) {
                idPrefix = element.id + "_" + idPrefix;
            }
            element._eventCacheID = Util.createUniqueID(idPrefix);
        }

        var cacheID = element._eventCacheID;

        //if there is not yet a hash entry for this element, add one
        if (!this.observers[cacheID]) {
            this.observers[cacheID] = [];
        }

        //add a new observer to this element's list
        this.observers[cacheID].push({
            'element': element,
            'name': name,
            'observer': observer,
            'useCapture': useCapture
        });

        //add the actual browser event listener
        if (element.addEventListener) {
            element.addEventListener(name, observer, useCapture);
        } else if (element.attachEvent) {
            element.attachEvent('on' + name, observer);
        }
    },

    /**
     * @description Given the id of an element to stop observing, cycle through the
     *   element's cached observers, calling stopObserving on each one,
     *   skipping those entries which can no longer be removed.
     *
     * @param {(HTMLElement|string)} elementParam - 
     */
    stopObservingElement: function (elementParam) {
        var element = Util.getElement(elementParam);
        var cacheID = element._eventCacheID;

        this._removeElementObservers(SuperMap.Event.observers[cacheID]);
    },

    /**
     * @param {Array.<Object>} elementObservers - Array of (element, name,
     *                                         observer, usecapture) objects,
     *                                         taken directly from hashtable
     */
    _removeElementObservers: function (elementObservers) {
        if (elementObservers) {
            for (var i = elementObservers.length - 1; i >= 0; i--) {
                var entry = elementObservers[i];
                var args = new Array(entry.element, entry.name, entry.observer, entry.useCapture);
                SuperMap.Event.stopObserving.apply(this, args);
            }
        }
    },

    /**
     * @description ç§»é¤äºä»¶çå¬åæ³¨åçäºä»¶å¤çæ¹æ³ãæ³¨æï¼äºä»¶çç§»é¤åçå¬ç¸å¯¹åºï¼ç§»é¤æ¶çåå±æ§ä¿¡æ¯å¿é¡»çå¬æ¶
     * ä¿æä¸è´æè½ç¡®ä¿äºä»¶ç§»é¤æåã
     * @param {(HTMLElement|string)} elementParam - è¢«çå¬ç DOM åç´ æèå¶ IDã
     * @param {string} name - éè¦ç§»é¤çè¢«çå¬äºä»¶åç§°ã
     * @param {function} observer - éè¦ç§»é¤çäºä»¶å¤çæ¹æ³ã
     * @param {boolean} [useCapture=false] - æ¯å¦æè·ã
     * @returns {boolean} Whether or not the event observer was removed
     */
    stopObserving: function (elementParam, name, observer, useCapture) {
        useCapture = useCapture || false;

        var element = Util.getElement(elementParam);
        var cacheID = element._eventCacheID;

        if (name === 'keypress') {
            if (navigator.appVersion.match(/Konqueror|Safari|KHTML/) ||
                element.detachEvent) {
                name = 'keydown';
            }
        }

        // find element's entry in this.observers cache and remove it
        var foundEntry = false;
        var elementObservers = SuperMap.Event.observers[cacheID];
        if (elementObservers) {

            // find the specific event type in the element's list
            var i = 0;
            while (!foundEntry && i < elementObservers.length) {
                var cacheEntry = elementObservers[i];

                if ((cacheEntry.name === name) &&
                    (cacheEntry.observer === observer) &&
                    (cacheEntry.useCapture === useCapture)) {

                    elementObservers.splice(i, 1);
                    if (elementObservers.length == 0) {
                        delete SuperMap.Event.observers[cacheID];
                    }
                    foundEntry = true;
                    break;
                }
                i++;
            }
        }

        //actually remove the event listener from browser
        if (foundEntry) {
            if (element.removeEventListener) {
                element.removeEventListener(name, observer, useCapture);
            } else if (element && element.detachEvent) {
                element.detachEvent('on' + name, observer);
            }
        }
        return foundEntry;
    },

    /**
     * @description Cycle through all the element entries in the events cache and call
     *   stopObservingElement on each.
     */
    unloadCache: function () {
        // check for SuperMap.Event before checking for observers, because
        // SuperMap.Event may be undefined in IE if no map instance was
        // created
        if (SuperMap.Event && SuperMap.Event.observers) {
            for (var cacheID in SuperMap.Event.observers) {
                var elementObservers = SuperMap.Event.observers[cacheID];
                SuperMap.Event._removeElementObservers.apply(this,
                    [elementObservers]);
            }
            SuperMap.Event.observers = false;
        }
    },

    CLASS_NAME: "SuperMap.Event"
};
SuperMap.Event = Event;
/* prevent memory leaks in IE */
SuperMap.Event.observe(window, 'unload', SuperMap.Event.unloadCache, false);


// CONCATENATED MODULE: ./src/common/commontypes/Events.js
/* CopyrightÂ© 2000 - 2019 SuperMap Software Co.Ltd. All rights reserved.
 * This program are made available under the terms of the Apache License, Version 2.0
 * which accompanies this distribution and is available at http://www.apache.org/licenses/LICENSE-2.0.html.*/






/**
 * @class SuperMap.Events
 * @classdesc äºä»¶ç±»ã
 * @param {Object} object - å½åäºä»¶å¯¹è±¡è¢«æ·»å å°ç JS å¯¹è±¡ã
 * @param {HTMLElement} element - ååºæµè§å¨äºä»¶ç DOM åç´ ã
 * @param {Array.<string>} eventTypes - èªå®ä¹åºç¨äºä»¶çæ°ç»ã
 * @param {boolean} [fallThrough=false] - æ¯å¦åè®¸äºä»¶å¤çä¹ååä¸ä¼ éï¼åæ³¡ï¼ï¼ä¸º false çæ¶åé»æ­¢äºä»¶åæ³¡ã
 * @param {Object} options - äºä»¶å¯¹è±¡éé¡¹ã
 */
class Events_Events {


    constructor(object, element, eventTypes, fallThrough, options) {
        /**
         * @member {Array.<string>} SuperMap.Events.prototype.BROWSER_EVENTS
         * @description æ¯æçäºä»¶ã
         * @constant
         * @default [
         "mouseover", "mouseout","mousedown", "mouseup", "mousemove",
         "click", "dblclick", "rightclick", "dblrightclick","resize",
         "focus", "blur","touchstart", "touchmove", "touchend","keydown",
         "MSPointerDown", "MSPointerUp", "pointerdown", "pointerup",
         "MSGestureStart", "MSGestureChange", "MSGestureEnd","contextmenu"
         ]
         */
        this.BROWSER_EVENTS = [
            "mouseover", "mouseout",
            "mousedown", "mouseup", "mousemove",
            "click", "dblclick", "rightclick", "dblrightclick",
            "resize", "focus", "blur",
            "touchstart", "touchmove", "touchend",
            "keydown", "MSPointerDown", "MSPointerUp", "pointerdown", "pointerup",
            "MSGestureStart", "MSGestureChange", "MSGestureEnd",
            "contextmenu"
        ];

        /**
         * @member {Object} SuperMap.Events.prototype.listeners
         * @description Hashtable of Array(function): events listener functions
         */
        this.listeners = {};

        /**
         * @member {Object} SuperMap.Events.prototype.object
         * @description  åå¸åºç¨ç¨åºäºä»¶çå¯¹è±¡ã
         */
        this.object = object;

        /**
         * @member {HTMLElement} SuperMap.Events.prototype.element
         * @description æ¥åæµè§å¨äºä»¶ç DOM èç¹ã
         */
        this.element = null;

        /**
         * @member {Array.<string>} SuperMap.Events.prototype.eventTypes
         * @description æ¯æçäºä»¶ç±»ååè¡¨ã
         */
        this.eventTypes = [];

        /**
         * @member {function} SuperMap.Events.prototype.eventHandler
         * @description ç»å®å¨åç´ ä¸çäºä»¶å¤çå¨å¯¹è±¡ã
         */
        this.eventHandler = null;

        /**
         * @member {boolean} [SuperMap.Events.prototype.fallThrough=false]
         * @description æ¯å¦åè®¸äºä»¶å¤çä¹ååä¸ä¼ éï¼åæ³¡ï¼ï¼ä¸º false çæ¶åé»æ­¢äºä»¶åæ³¡ã
         */
        this.fallThrough = fallThrough;

        /**
         * @member {boolean} [SuperMap.Events.prototype.includeXY=false]
         * @description å¤æ­æ¯å¦è®© xy å±æ§èªå¨åå»ºå°æµè§å¨ä¸çé¼ æ äºä»¶ï¼ä¸è¬è®¾ç½®ä¸º falseï¼å¦æè®¾ç½®ä¸º trueï¼é¼ æ äºä»¶å°ä¼å¨äºä»¶ä¼ éè¿ç¨ä¸­èªå¨äº§ç xy å±æ§ã
         *              å¯æ ¹æ®äºä»¶å¯¹è±¡ç 'evt.object' å±æ§å¨ç¸å³çäºä»¶å¥æä¸è°ç¨ getMousePosition å½æ°ãè¿ä¸ªéé¡¹ä¹ æ¯é»è®¤ä¸º false çåå å¨äºï¼å½åå»ºä¸ä¸ª
         *              äºä»¶å¯¹è±¡ï¼å¶ä¸»è¦ç®çæ¯ç®¡çãå¨ä¸ä¸ª div çç¸å¯¹å®ä½çé¼ æ äºä»¶ï¼å°å¶è®¾ä¸º true ä¹æ¯ææä¹çãè¿ä¸ªéé¡¹ä¹å¯ä»¥ç¨æ¥æ§å¶æ¯å¦æµæ¶ç¼å­ãå¦æ
         *              è®¾ä¸º false ä¸æµæ¶ï¼å¦æè®¾ä¸º trueï¼ç¨ this.clearMouseCache() æ¸é¤ç¼å­åç§»ï¼è¾¹çåç´ åç§»ï¼åç´ å¨é¡µé¢çä½ç½®åç§»ï¼ã
         * @example
         *  function named(evt) {
         *        this.xy = this.object.events.getMousePosition(evt);
         *  }
         */
        this.includeXY = false;

        /**
         * @member {Object} SuperMap.Events.prototype.extensions
         * @description äºä»¶æ©å±ãKeys ä»£è¡¨äºä»¶ç±»åï¼values ä»£è¡¨äºä»¶å¯¹è±¡ã
         * @example
         * ä»¥æ©å± "foostart" å "fooend" äºä»¶ä¸ºä¾ãå±ç¤ºæ¿æ¢ css å±æ§ä¸º foo çåç´ ç click äºä»¶ã
         *
         *   SuperMap.Events.foostart = SuperMap.Class({
     *       initialize: function(target) {
     *           this.target = target;
     *           this.target.register("click", this, this.doStuff, {extension: true});
     *           // only required if extension provides more than one event type
     *           this.target.extensions["foostart"] = true;
     *           this.target.extensions["fooend"] = true;
     *       },
     *       destroy: function() {
     *           var target = this.target;
     *           target.unregister("click", this, this.doStuff);
     *           delete this.target;
     *           // only required if extension provides more than one event type
     *           delete target.extensions["foostart"];
     *           delete target.extensions["fooend"];
     *       },
     *       doStuff: function(evt) {
     *           var propagate = true;
     *           if (SuperMap.Event.element(evt).className === "foo") {
     *               propagate = false;
     *               var target = this.target;
     *               target.triggerEvent("foostart");
     *               window.setTimeout(function() {
     *                   target.triggerEvent("fooend");
     *               }, 1000);
     *           }
     *           return propagate;
     *       }
     *   });
         *   // only required if extension provides more than one event type
         *   SuperMap.Events.fooend = SuperMap.Events.foostart;
         */
        this.extensions = {};

        /**
         * @member {Object} SuperMap.Events.prototype.extensionCount
         */
        this.extensionCount = {};
        /**
         * @member {Object} SuperMap.Events.prototype.clearMouseListener
         */
        this.clearMouseListener = null;

        Util.extend(this, options);

        if (eventTypes != null) {
            for (var i = 0, len = eventTypes.length; i < len; i++) {
                this.addEventType(eventTypes[i]);
            }
        }

        if (element != null) {
            this.attachToElement(element);
        }

        this.CLASS_NAME = "SuperMap.Events";
    }

    /**
     * @function SuperMap.Events.prototype.destroy
     * @description ç§»é¤å½åè¦ç´  element ä¸çææäºä»¶çå¬åå¤çã
     */
    destroy() {
        for (var e in this.extensions) {
            if (typeof this.extensions[e] !== "boolean") {
                this.extensions[e].destroy();
            }
        }
        this.extensions = null;
        if (this.element) {
            Event.stopObservingElement(this.element);
            if (this.element.hasScrollEvent) {
                Event.stopObserving(
                    window, "scroll", this.clearMouseListener
                );
            }
        }
        this.element = null;

        this.listeners = null;
        this.object = null;
        this.eventTypes = null;
        this.fallThrough = null;
        this.eventHandler = null;
    }

    /**
     * @function SuperMap.Events.prototype.addEventType
     * @description å¨æ­¤äºä»¶å¯¹è±¡ä¸­æ·»å æ°çäºä»¶ç±»åï¼å¦æè¿ä¸ªäºä»¶ç±»åå·²ç»æ·»å è¿äºï¼åä¸åä»»ä½äºæã
     * @param {string} eventName - äºä»¶åã
     */
    addEventType(eventName) {
        if (!this.listeners[eventName]) {
            this.eventTypes.push(eventName);
            this.listeners[eventName] = [];
        }
    }

    /**
     * @function SuperMap.Events.prototype.attachToElement
     * @description ç» DOM åç´ ç»å®æµè§å¨äºä»¶ã
     * @param {HTMLDOMElement} element - ç»å®æµè§å¨äºä»¶ç DOM åç´ ã
     */
    attachToElement(element) {
        if (this.element) {
            Event.stopObservingElement(this.element);
        } else {
            // keep a bound copy of handleBrowserEvent() so that we can
            // pass the same function to both Event.observe() and .stopObserving()
            this.eventHandler = FunctionExt.bindAsEventListener(
                this.handleBrowserEvent, this
            );

            // to be used with observe and stopObserving
            this.clearMouseListener = FunctionExt.bind(
                this.clearMouseCache, this
            );
        }
        this.element = element;
        for (var i = 0, len = this.BROWSER_EVENTS.length; i < len; i++) {
            var eventType = this.BROWSER_EVENTS[i];

            // every browser event has a corresponding application event
            // (whether it's listened for or not).
            this.addEventType(eventType);

            // use Prototype to register the event cross-browser
            Event.observe(element, eventType, this.eventHandler);
        }
        // disable dragstart in IE so that mousedown/move/up works normally
        Event.observe(element, "dragstart", Event.stop);
    }


    /**
     * @function SuperMap.Events.prototype.on
     * @description å¨ä¸ä¸ªç¸åçèå´åæ³¨åçå¬å¨çæ¹æ³ï¼æ­¤æ¹æ³è°ç¨ register å½æ°ã
     * @example
     * // æ³¨åä¸ä¸ª "loadstart" çå¬äºä»¶
     * events.on({"loadstart": loadStartListener});
     *
     * // åæ ·æ³¨åä¸ä¸ª "loadstart" çå¬äºä»¶
     * events.register("loadstart", undefined, loadStartListener);
     *
     * // åæ¶ä¸ºå¯¹è±¡æ³¨åå¤ä¸ªçå¬äºä»¶
     * events.on({
     *     "loadstart": loadStartListener,
     *     "loadend": loadEndListener,
     *     scope: object
     * });
     *
     * // åæ¶ä¸ºå¯¹è±¡æ³¨åå¤ä¸ªçå¬äºä»¶ï¼å¤æ¬¡è°ç¨ register æ¹æ³
     * events.register("loadstart", object, loadStartListener);
     * events.register("loadend", object, loadEndListener);
     *
     *
     * @param {Object} object - æ·»å çå¬çå¯¹è±¡ã
     */
    on(object) {
        for (var type in object) {
            if (type !== "scope" && object.hasOwnProperty(type)) {
                this.register(type, object.scope, object[type]);
            }
        }
    }


    /**
     * @function SuperMap.Events.prototype.register
     * @description å¨äºä»¶å¯¹è±¡ä¸æ³¨åä¸ä¸ªäºä»¶ãå½äºä»¶è¢«è§¦åæ¶ï¼'func' å½æ°è¢«è°ç¨ï¼åè®¾æä»¬è§¦åä¸ä¸ªäºä»¶ï¼
     *              æå® SuperMap.Bounds ä½ä¸º "obj"ï¼å½äºä»¶è¢«è§¦åæ¶ï¼åè°å½æ°çä¸ä¸æä½ä¸º Bounds å¯¹è±¡ã
     * @param {string} type - äºä»¶æ³¨åèçåå­ã
     * @param {Object} [obj=this.object] - å¯¹è±¡ç»å®çåè°ã
     * @param {function} [func] - åè°å½æ°ï¼å¦ææ²¡æç¹å®çåè°ï¼åè¿ä¸ªå½æ°ä¸åä»»ä½äºæã
     * @param {(boolean|Object)} [priority] - å½ä¸º true æ¶å°æ°ççå¬å å¨äºä»¶éåçåé¢ã
     */
    register(type, obj, func, priority) {
        if (type in Events_Events && !this.extensions[type]) {
            this.extensions[type] = new Events_Events[type](this);
        }
        if ((func != null) &&
            (Util.indexOf(this.eventTypes, type) !== -1)) {

            if (obj == null) {
                obj = this.object;
            }
            var listeners = this.listeners[type];
            if (!listeners) {
                listeners = [];
                this.listeners[type] = listeners;
                this.extensionCount[type] = 0;
            }
            var listener = {obj: obj, func: func};
            if (priority) {
                listeners.splice(this.extensionCount[type], 0, listener);
                if (typeof priority === "object" && priority.extension) {
                    this.extensionCount[type]++;
                }
            } else {
                listeners.push(listener);
            }
        }
    }

    /**
     * @function SuperMap.Events.prototype.registerPriority
     * @description ç¸åçæ³¨åæ¹æ³ï¼ä½æ¯å¨åé¢å¢å æ°ççå¬èäºä»¶æ¥è¯¢èä»£æ¿å°æ¹æ³çç»æã
     * @param {string} type - äºä»¶æ³¨åèçåå­ã
     * @param {Object} [obj=this.object] - å¯¹è±¡ç»å®æ¹é¢çåè°ã
     * @param {function} [func] - åè°å½æ°ï¼å¦ææ²¡æç¹å®çåè°ï¼åè¿ä¸ªå½æ°ä¸åä»»ä½äºæã
     */
    registerPriority(type, obj, func) {
        this.register(type, obj, func, true);
    }


    /**
     * @function SuperMap.Events.prototype.un
     * @description å¨ä¸ä¸ªç¸åçèå´ååæ¶æ³¨åçå¬å¨çæ¹æ³ï¼æ­¤æ¹æ³è°ç¨ unregister å½æ°ã
     * @example
     * // ç§»é¤ "loadstart" äºä»¶çå¬
     * events.un({"loadstart": loadStartListener});
     *
     * // ä½¿ç¨ "unregister" æ¹æ³ç§»é¤ "loadstart" äºä»¶çå¬
     * events.unregister("loadstart", undefined, loadStartListener);
     *
     * // åæ¶å¯¹è±¡å¤ä¸ªäºä»¶çå¬
     * events.un({
     *     "loadstart": loadStartListener,
     *     "loadend": loadEndListener,
     *     scope: object
     * });
     *
     * // åæ¶å¯¹è±¡å¤ä¸ªäºä»¶çå¬ï¼å¤æ¬¡è°ç¨unregisteræ¹æ³ã
     * events.unregister("loadstart", object, loadStartListener);
     * events.unregister("loadend", object, loadEndListener);
     *
     * @param {Object} object - ç§»é¤çå¬çå¯¹è±¡ã
     */
    un(object) {
        for (var type in object) {
            if (type !== "scope" && object.hasOwnProperty(type)) {
                this.unregister(type, object.scope, object[type]);
            }
        }
    }

    /**
     * @function SuperMap.Events.prototype.unregister
     * @description åæ¶æ³¨åã
     * @param {string} type - äºä»¶ç±»åã
     * @param {Object} [obj=this.object] - å¯¹è±¡ç»å®æ¹é¢çåè°ã
     * @param {function} [func] - åè°å½æ°ï¼å¦ææ²¡æç¹å®çåè°ï¼åè¿ä¸ªå½æ°ä¸åä»»ä½äºæã
     */
    unregister(type, obj, func) {
        if (obj == null) {
            obj = this.object;
        }
        var listeners = this.listeners[type];
        if (listeners != null) {
            for (var i = 0, len = listeners.length; i < len; i++) {
                if (listeners[i].obj === obj && listeners[i].func === func) {
                    listeners.splice(i, 1);
                    break;
                }
            }
        }
    }


    /**
     * @function SuperMap.Events.prototype.remove
     * @description å é¤æä¸ªäºä»¶ç±»åçææçå¬ï¼å¦æè¯¥äºä»¶ç±»åæ²¡ææ³¨åï¼åä¸åä»»ä½æä½ã
     * @param {string} type - äºä»¶ç±»åã
     */
    remove(type) {
        if (this.listeners[type] != null) {
            this.listeners[type] = [];
        }
    }

    /**
     * @function SuperMap.Events.prototype.triggerEvent
     * @description è§¦åä¸ä¸ªç¹å®çæ³¨åäºä»¶ã
     * @param {string} type - è§¦åäºä»¶ç±»åã
     * @param {Event} evt - äºä»¶å¯¹è±¡ã
     * @returns {boolean} è¿åçå¬å¯¹è±¡ï¼å¦æè¿åæ¯ falseï¼ååæ­¢çå¬ã
     */
    triggerEvent(type, evt) {
        var listeners = this.listeners[type];

        // fast path
        if (!listeners || listeners.length == 0) {
            return undefined;
        }

        // prep evt object with object & div references
        if (evt == null) {
            evt = {};
        }
        evt.object = this.object;
        evt.element = this.element;
        if (!evt.type) {
            evt.type = type;
        }

        // execute all callbacks registered for specified type
        // get a clone of the listeners array to
        // allow for splicing during callbacks
        listeners = listeners.slice();
        var continueChain;
        for (var i = 0, len = listeners.length; i < len; i++) {
            var callback = listeners[i];
            // bind the context to callback.obj
            continueChain = callback.func.apply(callback.obj, [evt]);

            if ((continueChain != undefined) && (continueChain == false)) {
                // if callback returns false, execute no more callbacks.
                break;
            }
        }
        // don't fall through to other DOM elements
        if (!this.fallThrough) {
            Event.stop(evt, true);
        }
        return continueChain;
    }


    /**
     * @function SuperMap.Events.prototype.handleBrowserEvent
     * @description å¯¹ triggerEvent å½æ°çåè£ï¼ç»äºä»¶å¯¹è±¡è®¾ç½®äº xy å±æ§ï¼å³å½åé¼ æ ç¹ç xy åæ ï¼ã
     * @param {Event} evt - äºä»¶å¯¹è±¡ã
     */
    handleBrowserEvent(evt) {
        var type = evt.type, listeners = this.listeners[type];
        if (!listeners || listeners.length == 0) {
            // noone's listening, bail out
            return;
        }
        // add clientX & clientY to all events - corresponds to average x, y
        var touches = evt.touches;
        if (touches && touches[0]) {
            var x = 0;
            var y = 0;
            var num = touches.length;
            var touch;
            for (var i = 0; i < num; ++i) {
                touch = touches[i];
                x += touch.clientX;
                y += touch.clientY;
            }
            evt.clientX = x / num;
            evt.clientY = y / num;
        }
        if (this.includeXY) {
            evt.xy = this.getMousePosition(evt);
        }
        this.triggerEvent(type, evt);
    }


    /**
     * @function SuperMap.Events.prototype.clearMouseCache
     * @description æ¸é¤é¼ æ ç¼å­ã
     */
    clearMouseCache() {
        this.element.scrolls = null;
        this.element.lefttop = null;
        var body = document.body;
        if (body && !((body.scrollTop != 0 || body.scrollLeft != 0) &&
                navigator.userAgent.match(/iPhone/i))) {
            this.element.offsets = null;
        }
    }

    /**
     * @function SuperMap.Events.prototype.getMousePosition
     * @param {Event} evt - äºä»¶å¯¹è±¡ã
     * @returns {SuperMap.Pixel} å½åçé¼ æ ç xy åæ ç¹ã
     */
    getMousePosition(evt) {
        if (!this.includeXY) {
            this.clearMouseCache();
        } else if (!this.element.hasScrollEvent) {
            Event.observe(window, "scroll", this.clearMouseListener);
            this.element.hasScrollEvent = true;
        }

        if (!this.element.scrolls) {
            var viewportElement = Util.getViewportElement();
            this.element.scrolls = [
                viewportElement.scrollLeft,
                viewportElement.scrollTop
            ];
        }

        if (!this.element.lefttop) {
            this.element.lefttop = [
                (document.documentElement.clientLeft || 0),
                (document.documentElement.clientTop || 0)
            ];
        }

        if (!this.element.offsets) {
            this.element.offsets = Util.pagePosition(this.element);
        }

        return new Pixel_Pixel(
            (evt.clientX + this.element.scrolls[0]) - this.element.offsets[0]
            - this.element.lefttop[0],
            (evt.clientY + this.element.scrolls[1]) - this.element.offsets[1]
            - this.element.lefttop[1]
        );
    }

}

SuperMap.Events = Events_Events;
SuperMap.Events.prototype.BROWSER_EVENTS = [
    "mouseover", "mouseout",
    "mousedown", "mouseup", "mousemove",
    "click", "dblclick", "rightclick", "dblrightclick",
    "resize", "focus", "blur",
    "touchstart", "touchmove", "touchend",
    "keydown", "MSPointerDown", "MSPointerUp", "pointerdown", "pointerup",
    "MSGestureStart", "MSGestureChange", "MSGestureEnd",
    "contextmenu"
];
// EXTERNAL MODULE: external "function(){try{return elasticsearch}catch(e){return {}}}()"
var external_function_try_return_elasticsearch_catch_e_return_ = __webpack_require__(6);
var external_function_try_return_elasticsearch_catch_e_return_default = /*#__PURE__*/__webpack_require__.n(external_function_try_return_elasticsearch_catch_e_return_);

// CONCATENATED MODULE: ./src/common/thirdparty/elasticsearch/ElasticSearch.js
/* CopyrightÂ© 2000 - 2019 SuperMap Software Co.Ltd. All rights reserved.
 * This program are made available under the terms of the Apache License, Version 2.0
 * which accompanies this distribution and is available at http://www.apache.org/licenses/LICENSE-2.0.html.*/





/**
 * @class SuperMap.ElasticSearch
 * @classdesc ElasticSearchæå¡ç±»ã
 * @category ElasticSearch
 * @param {string} url - ElasticSearchæå¡å°åã
 * @param {Object} options - åæ°ã
 * @param {function} [options.change] - æå¡å¨è¿åæ°æ®åæ§è¡çå½æ°ãåºå¼,ä¸å»ºè®®ä½¿ç¨ãä½¿ç¨searchæmsearchæ¹æ³ã
 * @param {boolean} [options.openGeoFence=false] - æ¯å¦å¼å¯å°çå´æ éªè¯ï¼é»è®¤ä¸ºä¸å¼å¯ã
 * @param {function} [options.outOfGeoFence] - æ°æ®è¶åºå°çå´æ åæ§è¡çå½æ°ã
 * @param {Object} [options.geoFence] - å°çå´æ ã
 */

class ElasticSearch_ElasticSearch {

    constructor(url, options) {
        options = options || {};
        /**
         *  @member {string} SuperMap.ElasticSearch.prototype.url 
         *  @description ElasticSearchæå¡å°å
         */
        this.url = url;
        /**
         *  @member {Object} SuperMap.ElasticSearch.prototype.client
         *  @description client ESå®¢æ·ç«¯
         */
        this.client = new external_function_try_return_elasticsearch_catch_e_return_default.a.Client({
            host: this.url
        });
        /**
         *  @deprecated
         *  @member {function} [SuperMap.ElasticSearch.prototype.change]
         *  @description æå¡å¨è¿åæ°æ®åæ§è¡çå½æ°ãåºå¼,ä¸å»ºè®®ä½¿ç¨ãä½¿ç¨searchæmsearchæ¹æ³ã
         */
        this.change = null;
        /**
         *  @member {boolean} [SuperMap.ElasticSearch.prototype.openGeoFence=false]
         *  @description æ¯å¦å¼å¯å°çå´æ éªè¯ï¼é»è®¤ä¸ºä¸å¼å¯ã
         */
        this.openGeoFence = false;
        /**
         *  @member {function} [SuperMap.ElasticSearch.prototype.outOfGeoFence]
         *  @description æ°æ®è¶åºå°çå´æ åæ§è¡çå½æ°
         */
        this.outOfGeoFence = null;

        /**
         * @member {Object} [SuperMap.ElasticSearch.prototype.geoFence]
         * @description å°çå´æ 
         * @example {
     *    radius: 1000,//åä½æ¯m
     *    center: [104.40, 30.43],
     *    unit: 'meter|degree'
     *  }
         */
        this.geoFence = null;

        /*
         * Constant: EVENT_TYPES
         * {Array.<String>}
         * æ­¤ç±»æ¯æçäºä»¶ç±»åã
         *
         */
        this.EVENT_TYPES = ['change', 'error', 'outOfGeoFence'];

        /**
         * @member {SuperMap.Events} SuperMap.ElasticSearch.prototype.events
         * @description äºä»¶
         */
        this.events = new Events_Events(this, null, this.EVENT_TYPES);

        /**
         * @member {Object} SuperMap.ElasticSearch.prototype.eventListeners
         * @description å¬å¨å¯¹è±¡ï¼å¨æé å½æ°ä¸­è®¾ç½®æ­¤åæ°ï¼å¯éï¼ï¼å¯¹ MapService æ¯æçä¸¤ä¸ªäºä»¶ processCompleted ãprocessFailed è¿è¡çå¬ï¼
         * ç¸å½äºè°ç¨ SuperMap.Events.on(eventListeners)ã
         */
        this.eventListeners = null;
        Util.extend(this, options);
        if (this.eventListeners instanceof Object) {
            this.events.on(this.eventListeners);
        }
    }

    /**
     * @function  SuperMap.ElasticSearch.prototype.setGeoFence
     * @description è®¾ç½®å°çå´æ ï¼openGeoFenceåæ°ä¸ºtrueçæ¶åï¼è®¾ç½®çå°çå´æ æçæã
     * @param {SuperMap.Geometry} geoFence - å°çå´æ ã
     */

    setGeoFence(geoFence) {
        this.geoFence = geoFence;
    }

    /**
     * @function  SuperMap.ElasticSearch.prototype.bulk
     * @description æ¹éæä½APIï¼åè®¸æ§è¡å¤ä¸ªç´¢å¼/å é¤æä½ã
     * åæ°è®¾ç½®åè {@link https://www.elastic.co/guide/en/elasticsearch/client/javascript-api/current/api-reference.html#api-bulk}</br>
     * æ´å¤ä¿¡æ¯åè {@link https://www.elastic.co/guide/en/elasticsearch/reference/current/docs-bulk.html}</br>
     * @param {Object} params - åæ°ã
     * @param {function} callback - åè°å½æ°ã
     */
    bulk(params, callback) {
        return this.client.bulk(params, callback);
    }

    /**
     * @function  SuperMap.ElasticSearch.prototype.clearScroll
     * @description éè¿æå®scrollåæ°è¿è¡æ¥è¯¢æ¥æ¸é¤å·²ç»åå»ºçscrollè¯·æ±ã
     * åæ°è®¾ç½®åè {@link https://www.elastic.co/guide/en/elasticsearch/client/javascript-api/current/api-reference.html#api-clearscroll}</br>
     *æ´å¤ä¿¡æ¯åè {@link https://www.elastic.co/guide/en/elasticsearch/reference/current/search-request-scroll.html}</br>
     * @param {Object} params - åæ°ã
     * @param {function} callback - åè°å½æ°ã
     */
    clearScroll(params, callback) {
        return this.client.clearScroll(params, callback);
    }

    /**
     * @function  SuperMap.ElasticSearch.prototype.count
     * @description è·åéç¾¤ãç´¢å¼ãç±»åææ¥è¯¢çææ¡£ä¸ªæ°ã
     * åæ°è®¾ç½®åè {@link https://www.elastic.co/guide/en/elasticsearch/client/javascript-api/current/api-reference.html#api-count}</br>
     * æ´å¤ä¿¡æ¯åè {@link https://www.elastic.co/guide/en/elasticsearch/reference/current/search-count.html}</br>
     * @param {Object} params - åæ°ã
     * @param {function} callback - åè°å½æ°ã
     */
    count(params, callback) {
        return this.client.count(params, callback);
    }

    /**
     * @function  SuperMap.ElasticSearch.prototype.count
     * @description å¨ç¹å®ç´¢å¼ä¸­æ·»å ä¸ä¸ªç±»ååçJSONææ¡£ï¼ä½¿å¶å¯æç´¢ãå¦æå·æç¸åindexï¼typeä¸idå·²ç»å­å¨çææ¡£å°åçéè¯¯ã</br>
     * åæ°è®¾ç½®åè {@link https://www.elastic.co/guide/en/elasticsearch/client/javascript-api/current/api-reference.html#api-create}
     * æ´å¤ä¿¡æ¯åè {@link https://www.elastic.co/guide/en/elasticsearch/reference/current/docs-index_.html}
     * @param {Object} params - åæ°ã
     * @param {function} callback - åè°å½æ°ã
     */
    create(params, callback) {
        return this.client.create(params, callback);
    }

    /**
     * @function  SuperMap.ElasticSearch.prototype.delete
     * @description æ ¹æ®å¶IDä»ç¹å®ç´¢å¼ä¸­å é¤é®å¥çJSONææ¡£ã
     * åæ°è®¾ç½®åè {@link https://www.elastic.co/guide/en/elasticsearch/client/javascript-api/current/api-reference.html#api-delete}</br>
     * æ´å¤ä¿¡æ¯åè {@link https://www.elastic.co/guide/en/elasticsearch/reference/current/docs-delete.html}</br>
     * @param {Object} params - åæ°ã
     * @param {function} callback - åè°å½æ°ã
     */
    delete(params, callback) {
        return this.client.delete(params, callback);
    }

    /**
     * @function  SuperMap.ElasticSearch.prototype.delete
     * @description æ ¹æ®å¶IDä»ç¹å®ç´¢å¼ä¸­å é¤é®å¥çJSONææ¡£ã
     * åæ°è®¾ç½®åè {@link https://www.elastic.co/guide/en/elasticsearch/client/javascript-api/current/api-reference.html#api-deletebyquery}</br>
     * æ´å¤ä¿¡æ¯åè {@link https://www.elastic.co/guide/en/elasticsearch/reference/current/docs-delete-by-query.html}</br>
     * @param {Object} params - åæ°ã
     * @param {function} callback - åè°å½æ°ã
     */
    deleteByQuery(params, callback) {
        return this.client.deleteByQuery(params, callback);
    }

    /**
     * @function  SuperMap.ElasticSearch.prototype.delete
     * @description æ ¹æ®å¶IDå é¤èæ¬ã</br>
     * åæ°è®¾ç½®åè {@link https://www.elastic.co/guide/en/elasticsearch/client/javascript-api/current/api-reference.html#api-deletescript}</br>
     * æ´å¤ä¿¡æ¯åè {@link https://www.elastic.co/guide/en/elasticsearch/reference/current/modules-scripting.html}</br>
     * @param {Object} params - åæ°ã
     * @param {function} callback - åè°å½æ°ã
     */
    deleteScript(params, callback) {
        return this.client.deleteScript(params, callback);
    }

    /**
     * @function  SuperMap.ElasticSearch.prototype.deleteTemplate
     * @description æ ¹æ®å¶IDå é¤æ¨¡æ¿ã</br>
     * åæ°è®¾ç½®åè {@link https://www.elastic.co/guide/en/elasticsearch/client/javascript-api/current/api-reference.html#api-deletetemplate}</br>
     * æ´å¤ä¿¡æ¯åè {@link https://www.elastic.co/guide/en/elasticsearch/reference/current/search-template.html}</br>
     * @param {Object} params - åæ°ã
     * @param {function} callback - åè°å½æ°ã
     */
    deleteTemplate(params, callback) {
        return this.client.deleteTemplate(params, callback);
    }

    /**
     * @function  SuperMap.ElasticSearch.prototype.exists
     * @description æ£æ¥ç»å®ææ¡£æ¯å¦å­å¨ã</br>
     * åæ°è®¾ç½®åè {@link https://www.elastic.co/guide/en/elasticsearch/client/javascript-api/current/api-reference.html#api-exists}</br>
     * æ´å¤ä¿¡æ¯åè {@link https://www.elastic.co/guide/en/elasticsearch/reference/current/docs-get.html}</br>
     * @param {Object} params - åæ°ã
     * @param {function} callback - åè°å½æ°ã
     */
    exists(params, callback) {
        return this.client.exists(params, callback);
    }

    /**
     * @function  SuperMap.ElasticSearch.prototype.existsSource
     * @description æ£æ¥èµæºæ¯å¦å­å¨ã</br>
     * åæ°è®¾ç½®åè {@link https://www.elastic.co/guide/en/elasticsearch/client/javascript-api/current/api-reference.html#api-existssource}</br>
     * æ´å¤ä¿¡æ¯åè {@link https://www.elastic.co/guide/en/elasticsearch/reference/current/docs-get.html}</br>
     * @param {Object} params - åæ°ã
     * @param {function} callback - åè°å½æ°ã
     */

    existsSource(params, callback) {
        return this.client.existsSource(params, callback);
    }

    /**
     * @function  SuperMap.ElasticSearch.prototype.explain
     * @description æä¾ä¸ç¹å®æ¥è¯¢ç¸å³çç¹å®ææ¡£åæ°çè¯¦ç»ä¿¡æ¯ãå®è¿ä¼åè¯æ¨ææ¡£æ¯å¦ä¸æå®çæ¥è¯¢å¹éã</br>
     * åæ°è®¾ç½®åè {@link https://www.elastic.co/guide/en/elasticsearch/client/javascript-api/current/api-reference.html#api-explain}</br>
     * æ´å¤ä¿¡æ¯åè {@link https://www.elastic.co/guide/en/elasticsearch/reference/current/search-explain.html}</br>
     * @param {Object} params - åæ°ã
     * @param {function} callback - åè°å½æ°ã
     */
    explain(params, callback) {
        return this.client.explain(params, callback);
    }

    /**
     * @function  SuperMap.ElasticSearch.prototype.fieldCaps
     * @description åè®¸æ£ç´¢å¤ä¸ªç´¢å¼ä¹é´çå­æ®µçåè½ã(å®éªæ§APIï¼å¯è½ä¼å¨æªæ¥çæ¬ä¸­å é¤)</br>
     * åæ°è®¾ç½®åè {@link https://www.elastic.co/guide/en/elasticsearch/client/javascript-api/current/api-reference.html#api-fieldcaps}</br>
     * æ´å¤ä¿¡æ¯åè {@link https://www.elastic.co/guide/en/elasticsearch/reference/current/search-field-caps.html}</br>
     * @param {Object} params - åæ°ã
     * @param {function} callback - åè°å½æ°ã
     */
    fieldCaps(params, callback) {
        return this.client.fieldCaps(params, callback);
    }


    /**
     * @function  SuperMap.ElasticSearch.prototype.get
     * @description ä»ç´¢å¼è·åä¸ä¸ªåºäºå¶idçç±»åçJSONææ¡£ã</br>
     * åæ°è®¾ç½®åè {@link https://www.elastic.co/guide/en/elasticsearch/client/javascript-api/current/api-reference.html#api-get}</br>
     * æ´å¤ä¿¡æ¯åè {@link https://www.elastic.co/guide/en/elasticsearch/reference/current/docs-get.html}</br>
     * @param {Object} params - åæ°ã
     * @param {function} callback - åè°å½æ°ã
     */
    get(params, callback) {
        return this.client.get(params, callback);
    }

    /**
     * @function  SuperMap.ElasticSearch.prototype.getScript
     * @description è·åèæ¬ã</br>
     * åæ°è®¾ç½®åè {@link https://www.elastic.co/guide/en/elasticsearch/client/javascript-api/current/api-reference.html#api-getscript}</br>
     * æ´å¤ä¿¡æ¯åè {@link https://www.elastic.co/guide/en/elasticsearch/reference/current/modules-scripting.html}</br>
     * @param {Object} params - åæ°ã
     * @param {function} callback - åè°å½æ°ã
     */
    getScript(params, callback) {
        return this.client.getScript(params, callback);
    }

    /**
     * @function  SuperMap.ElasticSearch.prototype.getSource
     * @description éè¿ç´¢å¼ï¼ç±»ååIDè·åææ¡£çæºã</br>
     * åæ°è®¾ç½®åè {@link https://www.elastic.co/guide/en/elasticsearch/client/javascript-api/current/api-reference.html#api-getsource}</br>
     * æ´å¤ä¿¡æ¯åè {@link https://www.elastic.co/guide/en/elasticsearch/reference/current/docs-get.html}</br>
     * @param {Object} params - åæ°ã
     * @param {function} callback - åè°å½æ°ã
     */
    getSource(params, callback) {
        return this.client.getSource(params, callback);
    }

    /**
     * @function  SuperMap.ElasticSearch.prototype.getTemplate
     * @description è·åæ¨¡æ¿ã</br>
     * åæ°è®¾ç½®åè {@link https://www.elastic.co/guide/en/elasticsearch/client/javascript-api/current/api-reference.html#api-gettemplate}</br>
     * æ´å¤ä¿¡æ¯åè {@link https://www.elastic.co/guide/en/elasticsearch/reference/current/search-template.html}</br>
     * @param {Object} params - åæ°ã
     * @param {function} callback - åè°å½æ°ã
     */
    getTemplate(params, callback) {
        return this.client.getTemplate(params, callback);
    }

    /**
     * @function  SuperMap.ElasticSearch.prototype.index
     * @description å¨ç´¢å¼ä¸­å­å¨ä¸ä¸ªé®å¥çJSONææ¡£ï¼ä½¿å¶å¯æç´¢ã</br>
     * åæ°è®¾ç½®åè {@link https://www.elastic.co/guide/en/elasticsearch/client/javascript-api/current/api-reference.html#api-index}</br>
     * æ´å¤ä¿¡æ¯åè {@link https://www.elastic.co/guide/en/elasticsearch/reference/current/docs-index_.html}</br>
     * @param {Object} params - åæ°ã
     * @param {function} callback - åè°å½æ°ã
     */
    index(params, callback) {
        return this.client.index(params, callback);
    }

    /**
     * @function  SuperMap.ElasticSearch.prototype.info
     * @description ä»å½åéç¾¤è·ååºæ¬ä¿¡æ¯ã</br>
     * åæ°è®¾ç½®åè {@link https://www.elastic.co/guide/en/elasticsearch/client/javascript-api/current/api-reference.html#api-info}</br>
     * æ´å¤ä¿¡æ¯åè {@link https://www.elastic.co/guide/index.html}</br>
     * @param {Object} params - åæ°ã
     * @param {function} callback - åè°å½æ°ã
     */
    info(params, callback) {
        return this.client.info(params, callback);
    }

    /**
     * @function  SuperMap.ElasticSearch.prototype.mget
     * @description æ ¹æ®ç´¢å¼ï¼ç±»åï¼å¯éï¼åidsæ¥è·åå¤ä¸ªææ¡£ãmgetæéçä¸»ä½å¯ä»¥éç¨ä¸¤ç§å½¢å¼ï¼ææ¡£ä½ç½®æ°ç»æææ¡£IDæ°ç»ã</br>
     * åæ°è®¾ç½®åè {@link https://www.elastic.co/guide/en/elasticsearch/client/javascript-api/current/api-reference.html#api-mget}</br>
     * æ´å¤ä¿¡æ¯åè {@link https://www.elastic.co/guide/en/elasticsearch/reference/current/docs-multi-get.html}</br>
     * @param {Object} params - åæ°ã
     * @param {function} callback - åè°å½æ°ã
     */
    mget(params, callback) {
        return this.client.mget(params, callback);
    }

    /**
     * @function  SuperMap.ElasticSearch.prototype.msearch
     * @description å¨åä¸è¯·æ±ä¸­æ§è¡å¤ä¸ªæç´¢è¯·æ±ã</br>
     * åæ°è®¾ç½®åè {@link https://www.elastic.co/guide/en/elasticsearch/client/javascript-api/current/api-reference.html#api-msearch}</br>
     * æ´å¤ä¿¡æ¯åè {@link https://www.elastic.co/guide/en/elasticsearch/reference/current/search-multi-search.html}</br>
     * @param {Object} params - åæ°ã
     * @param {function} callback - è¯·æ±è¿åçåè°å½æ°ãä¹å¯ä»¥ä½¿ç¨thenè¡¨è¾¾å¼è·åè¿åç»æã
     *     åè°åæ°ï¼error,responseãç»æå­å¨å¨response.responsesä¸­
     */
    msearch(params, callback) {
        let me = this;

        return me.client.msearch(params)
            .then(function (resp) {
                me._update(resp.responses, callback);
                return resp;
            }, function (err) {
                callback(err);
                me.events.triggerEvent('error', {error: err});
                return err;
            });
    }

    /**
     * @function  SuperMap.ElasticSearch.prototype.msearchTemplate
     * @description å¨åä¸è¯·æ±ä¸­æ§è¡å¤ä¸ªæç´¢æ¨¡æ¿è¯·æ±ã</br>
     * åæ°è®¾ç½®åè {@link https://www.elastic.co/guide/en/elasticsearch/client/javascript-api/current/api-reference.html#api-msearchtemplate}</br>
     * æ´å¤ä¿¡æ¯åè {@link https://www.elastic.co/guide/en/elasticsearch/reference/current/search-template.html}</br>
     * @param {Object} params - åæ°ã
     * @param {function} callback - åè°å½æ°ã
     */
    msearchTemplate(params, callback) {
        return this.client.msearchTemplate(params, callback);
    }

    /**
     * @function  SuperMap.ElasticSearch.prototype.mtermvectors
     * @description å¤termvectors APIåè®¸ä¸æ¬¡è·å¾å¤ä¸ªtermvectorsã</br>
     * åæ°è®¾ç½®åè {@link https://www.elastic.co/guide/en/elasticsearch/client/javascript-api/current/api-reference.html#api-mtermvectors}</br>
     * æ´å¤ä¿¡æ¯åè {@link https://www.elastic.co/guide/en/elasticsearch/reference/current/docs-multi-termvectors.html}</br>
     * @param {Object} params - åæ°ã
     * @param {function} callback - åè°å½æ°ã
     */
    mtermvectors(params, callback) {
        return this.client.mtermvectors(params, callback);
    }

    /**
     * @function  SuperMap.ElasticSearch.prototype.ping
     * @description æµè¯è¿æ¥ã</br>
     * åæ°è®¾ç½®åè {@link https://www.elastic.co/guide/en/elasticsearch/client/javascript-api/current/api-reference.html#api-ping}</br>
     * æ´å¤ä¿¡æ¯åè {@link https://www.elastic.co/guide/index.html}</br>
     * @param {Object} params - åæ°ã
     * @param {function} callback - åè°å½æ°ã
     */
    ping(params, callback) {
        return this.client.ping(params, callback);
    }

    /**
     * @function  SuperMap.ElasticSearch.prototype.putScript
     * @description æ·»å èæ¬ã</br>
     * åæ°è®¾ç½®åè {@link https://www.elastic.co/guide/en/elasticsearch/client/javascript-api/current/api-reference.html#api-putscript}</br>
     * æ´å¤ä¿¡æ¯åè {@link https://www.elastic.co/guide/en/elasticsearch/reference/current/modules-scripting.html}</br>
     * @param {Object} params - åæ°ã
     * @param {function} callback - åè°å½æ°ã
     */
    putScript(params, callback) {
        return this.client.putScript(params, callback);
    }

    /**
     * @function  SuperMap.ElasticSearch.prototype.putTemplate
     * @description æ·»å æ¨¡æ¿ã</br>
     * åæ°è®¾ç½®åè {@link https://www.elastic.co/guide/en/elasticsearch/client/javascript-api/current/api-reference.html#api-puttemplate}</br>
     * æ´å¤ä¿¡æ¯åè {@link https://www.elastic.co/guide/en/elasticsearch/reference/current/search-template.html}</br>
     * @param {Object} params - åæ°ã
     * @param {function} callback - åè°å½æ°ã
     */
    putTemplate(params, callback) {
        return this.client.putTemplate(params, callback);
    }

    /**
     * @function  SuperMap.ElasticSearch.prototype.reindex
     * @description éæ°ç´¢å¼ã</br>
     * åæ°è®¾ç½®åè {@link https://www.elastic.co/guide/en/elasticsearch/client/javascript-api/current/api-reference.html#api-reindex}</br>
     * æ´å¤ä¿¡æ¯åè {@link https://www.elastic.co/guide/en/elasticsearch/reference/current/docs-reindex.html}</br>
     * @param {Object} params - åæ°ã
     * @param {function} callback - åè°å½æ°ã
     */
    reindex(params, callback) {
        return this.client.reindex(params, callback);
    }

    /**
     * @function  SuperMap.ElasticSearch.prototype.reindexRessrottle
     * @description éæ°ç´¢å¼ã</br>
     * åæ°è®¾ç½®åè {@link https://www.elastic.co/guide/en/elasticsearch/client/javascript-api/current/api-reference.html#api-reindexrethrottle}</br>
     * æ´å¤ä¿¡æ¯åè {@link https://www.elastic.co/guide/en/elasticsearch/reference/current/docs-reindex.html}</br>
     * @param {Object} params - åæ°ã
     * @param {function} callback - åè°å½æ°ã
     */
    reindexRessrottle(params, callback) {
        return this.client.reindexRessrottle(params, callback);
    }

    /**
     * @function  SuperMap.ElasticSearch.prototype.renderSearchTemplate
     * @description æç´¢æ¨¡æ¿ã</br>
     * åæ°è®¾ç½®åè {@link https://www.elastic.co/guide/en/elasticsearch/client/javascript-api/current/api-reference.html#api-rendersearchtemplate}</br>
     * æ´å¤ä¿¡æ¯åè {@link https://www.elastic.co/guide/en/elasticsearch/reference/current/search-template.html}</br>
     * @param {Object} params - åæ°ã
     * @param {function} callback - åè°å½æ°ã
     */
    renderSearchTemplate(params, callback) {
        return this.client.renderSearchTemplate(params, callback);
    }

    /**
     * @function  SuperMap.ElasticSearch.prototype.scroll
     * @description  å¨search()è°ç¨ä¸­æå®æ»å¨åæ°ä¹åï¼æ»å¨æç´¢è¯·æ±ï¼æ£ç´¢ä¸ä¸ç»ç»æï¼ã</br>
     * åæ°è®¾ç½®åè {@link https://www.elastic.co/guide/en/elasticsearch/client/javascript-api/current/api-reference.html#api-scroll}</br>
     * æ´å¤ä¿¡æ¯åè {@link https://www.elastic.co/guide/en/elasticsearch/reference/current/search-request-scroll.html}</br>
     * @param {Object} params - åæ°ã
     * @param {function} callback - åè°å½æ°ã
     */
    scroll(params, callback) {
        return this.client.scroll(params, callback);
    }

    /**
     * @function  SuperMap.ElasticSearch.prototype.search
     * @description  å¨search()è°ç¨ä¸­æå®æ»å¨åæ°ä¹åï¼æ»å¨æç´¢è¯·æ±ï¼æ£ç´¢ä¸ä¸ç»ç»æï¼ã
     * åæ°è®¾ç½®åè {@link https://www.elastic.co/guide/en/elasticsearch/client/javascript-api/current/api-reference.html#api-search}</br>
     * æ´å¤ä¿¡æ¯åè {@link https://www.elastic.co/guide/en/elasticsearch/reference/current/search-search.html}</br>
     * @param {Object} params - åæ°ã
     * @param {function} callback - è¯·æ±è¿åçåè°å½æ°ãä¹å¯ä»¥ä½¿ç¨thenè¡¨è¾¾å¼è·åè¿åç»æã
     *     åè°åæ°ï¼error,response,ç»æå­å¨å¨response.responsesä¸­
     */
    search(params, callback) {
        let me = this;
        return me.client.search(params)
            .then(function (resp) {
                me._update(resp.responses, callback);
                return resp;
            }, function (err) {
                callback(err);
                me.events.triggerEvent('error', {error: err});
                return err;
            });
    }

    /**
     * @function  SuperMap.ElasticSearch.prototype.searchShards
     * @description  è¿åè¦æ§è¡æç´¢è¯·æ±çç´¢å¼ååçã
     * åæ°è®¾ç½®åè {@link https://www.elastic.co/guide/en/elasticsearch/client/javascript-api/current/api-reference.html#api-searchshards}</br>
     * æ´å¤ä¿¡æ¯åè {@link https://www.elastic.co/guide/en/elasticsearch/reference/current/search-shards.html}</br>
     * @param {Object} params - åæ°ã
     * @param {function} callback - åè°å½æ°ã
     */
    searchShards(params, callback) {
        return this.client.searchShards(params, callback);
    }

    /**
     * @function  SuperMap.ElasticSearch.prototype.searchTemplate
     * @description  æç´¢æ¨¡æ¿ã
     * åæ°è®¾ç½®åè {@link https://www.elastic.co/guide/en/elasticsearch/client/javascript-api/current/api-reference.html#api-searchtemplate}</br>
     * æ´å¤ä¿¡æ¯åè {@link https://www.elastic.co/guide/en/elasticsearch/reference/current/search-suggesters.html}</br>
     * @param {Object} params - åæ°ã
     * @param {function} callback - åè°å½æ°ã
     */
    searchTemplate(params, callback) {
        return this.client.searchTemplate(params, callback);
    }

    /**
     * @function  SuperMap.ElasticSearch.prototype.suggest
     * @description è¯¥å»ºè®®åè½éè¿ä½¿ç¨ç¹å®çå»ºè®®èï¼åºäºææä¾çææ¬æ¥å»ºè®®ç±»ä¼¼çæ¯è¯­ã
     * åæ°è®¾ç½®åè {@link https://www.elastic.co/guide/en/elasticsearch/client/javascript-api/current/api-reference.html#api-suggest}</br>
     * æ´å¤ä¿¡æ¯åè {@link https://www.elastic.co/guide/en/elasticsearch/reference/current/search-suggesters.html}</br>
     * @param {Object} params - åæ°ã
     * @param {function} callback - åè°å½æ°ã
     */
    suggest(params, callback) {
        return this.client.suggest(params, callback);
    }

    /**
     * @function  SuperMap.ElasticSearch.prototype.termvectors
     * @description è¿åæå³ç¹å®ææ¡£å­æ®µä¸­çæ¯è¯­çä¿¡æ¯åç»è®¡ä¿¡æ¯ã
     * åæ°è®¾ç½®åè {@link https://www.elastic.co/guide/en/elasticsearch/client/javascript-api/current/api-reference.html#api-termvectors}</br>
     * æ´å¤ä¿¡æ¯åè {@link https://www.elastic.co/guide/en/elasticsearch/reference/current/docs-termvectors.html}</br>
     * @param {Object} params - åæ°ã
     * @param {function} callback - åè°å½æ°ã
     */
    termvectors(params, callback) {
        return this.client.termvectors(params, callback);
    }

    /**
     * @function  SuperMap.ElasticSearch.prototype.update
     * @description æ´æ°ææ¡£çé¨åã
     * åæ°è®¾ç½®åè {@link https://www.elastic.co/guide/en/elasticsearch/client/javascript-api/current/api-reference.html#api-update}</br>
     * æ´å¤ä¿¡æ¯åè {@link https://www.elastic.co/guide/en/elasticsearch/reference/current/docs-update.html}</br>
     * @param {Object} params - åæ°ã
     * @param {function} callback - åè°å½æ°ã
     */
    update(params, callback) {
        return this.client.update(params, callback);
    }

    /**
     * @function  SuperMap.ElasticSearch.prototype.update
     * @description éè¿æ¥è¯¢APIæ¥æ´æ°ææ¡£ã
     * åæ°è®¾ç½®åè {@link https://www.elastic.co/guide/en/elasticsearch/client/javascript-api/current/api-reference.html#api-updatebyquery}</br>
     * æ´å¤ä¿¡æ¯åè {@link https://www.elastic.co/guide/en/elasticsearch/reference/current/docs-update-by-query.html}</br>
     * @param {Object} params - åæ°ã
     * @param {function} callback - åè°å½æ°ã
     */
    updateByQuery(params, callback) {
        return this.client.updateByQuery(params, callback);
    }

    _update(data, callback) {
        let me = this;
        if (!data) {
            return;
        }
        me.data = data;
        if (me.openGeoFence && me.geoFence) {
            me._validateDatas(data);
        }
        me.events.triggerEvent('change', {data: me.data});
        //changeæ¹æ³å·²åºå¼ï¼ä¸å»ºè®®ä½¿ç¨ãå»ºè®®ä½¿ç¨searchæ¹æ³çç¬¬äºä¸ªåæ°ä¼ å¥è¯·æ±æåçåè°
        if (me.change) {
            me.change && me.change(data);
        } else {
            //å responsesæ¯ä¸ºäºä¿æè·åæ¥esèªèº«çæ°æ®ç»æä¸è´
            callback && callback(undefined, {responses: data});
        }
    }

    _validateDatas(datas) {
        if (!datas) {
            return;
        }
        if (!(datas instanceof Array)) {
            datas = [datas];
        }
        var i, len = datas.length;
        for (i = 0; i < len; i++) {
            this._validateData(datas[i]);
        }
    }

    _validateData(data) {
        let me = this;
        data.hits.hits.map(function (source) {
            let content = source._source;
            let meterUnit = me._getMeterPerMapUnit(me.geoFence.unit);
            let geoFenceCX = me.geoFence.center[0] * meterUnit;
            let geoFenceCY = me.geoFence.center[1] * meterUnit;
            let contentX = content.x * meterUnit;
            let contentY = content.y * meterUnit;
            let distance = me._distance(contentX, contentY, geoFenceCX, geoFenceCY);
            let radius = me.geoFence.radius;
            if (distance > radius) {
                me.outOfGeoFence && me.outOfGeoFence(data);
                me.events.triggerEvent('outOfGeoFence', {data: data});
            }
            return source;
        });
    }

    _distance(x1, y1, x2, y2) {
        return Math.sqrt((x1 - x2) * (x1 - x2) + (y1 - y2) * (y1 - y2));
    }

    _getMeterPerMapUnit(mapUnit) {
        let earchRadiusInMeters = 6378137;
        let meterPerMapUnit;
        if (mapUnit === 'meter') {
            meterPerMapUnit = 1;
        } else if (mapUnit === 'degree') {
            // æ¯åº¦è¡¨ç¤ºå¤å°ç±³ã
            meterPerMapUnit = Math.PI * 2 * earchRadiusInMeters / 360;
        }
        return meterPerMapUnit;
    }

}

SuperMap.ElasticSearch = ElasticSearch_ElasticSearch;

// EXTERNAL MODULE: ./node_modules/promise-polyfill/promise.js
var promise = __webpack_require__(5);
var promise_default = /*#__PURE__*/__webpack_require__.n(promise);

// CONCATENATED MODULE: ./src/common/util/PromisePolyfill.js
/* CopyrightÂ© 2000 - 2019 SuperMap Software Co.Ltd. All rights reserved.
 * This program are made available under the terms of the Apache License, Version 2.0
 * which accompanies this distribution and is available at http://www.apache.org/licenses/LICENSE-2.0.html.*/


window.Promise = promise_default.a;
// EXTERNAL MODULE: ./node_modules/fetch-ie8/fetch.js
var fetch = __webpack_require__(8);

// EXTERNAL MODULE: ./node_modules/fetch-jsonp/build/fetch-jsonp.js
var fetch_jsonp = __webpack_require__(2);
var fetch_jsonp_default = /*#__PURE__*/__webpack_require__.n(fetch_jsonp);

// CONCATENATED MODULE: ./src/common/util/FetchRequest.js
/* CopyrightÂ© 2000 - 2019 SuperMap Software Co.Ltd. All rights reserved.
 * This program are made available under the terms of the Apache License, Version 2.0
 * which accompanies this distribution and is available at http://www.apache.org/licenses/LICENSE-2.0.html.*/






const FetchRequest_fetch = window.fetch;
/**
 * @function SuperMap.setCORS
 * @description è®¾ç½®æ¯å¦æ¯æè·¨åã
 * @param {boolean} cors - æ¯å¦æ¯æè·¨åã
 */
var setCORS = SuperMap.setCORS = function (cors) {
    SuperMap.CORS = cors;
}
/**
 * @function SuperMap.isCORS
 * @description æ¯å¦æ¯æè·¨åã
 * @returns {boolean} æ¯å¦æ¯æè·¨åã
 */
var isCORS = SuperMap.isCORS = function () {
    if (SuperMap.CORS != undefined) {
        return SuperMap.CORS;
    }
    return window.XMLHttpRequest && 'withCredentials' in new window.XMLHttpRequest();
}
/**
 * @function SuperMap.setRequestTimeout
 * @description è®¾ç½®è¯·æ±è¶æ¶æ¶é´ã
 * @param {number} [timeout=45] - è¯·æ±è¶æ¶æ¶é´ï¼åä½ç§ã
 */
var setRequestTimeout = SuperMap.setRequestTimeout = function (timeout) {
    return SuperMap.RequestTimeout = timeout;
}
/**
 * @function SuperMap.getRequestTimeout
 * @description è·åè¯·æ±è¶æ¶æ¶é´ã
 * @returns {number} è¯·æ±è¶æ¶æ¶é´ã
 */
var getRequestTimeout = SuperMap.getRequestTimeout = function () {
    return SuperMap.RequestTimeout || 45000;
}
var FetchRequest = SuperMap.FetchRequest = {
    commit: function (method, url, params, options) {
        method = method ? method.toUpperCase() : method;
        switch (method) {
            case 'GET':
                return this.get(url, params, options);
            case 'POST':
                return this.post(url, params, options);
            case 'PUT':
                return this.put(url, params, options);
            case 'DELETE':
                return this.delete(url, params, options);
            default:
                return this.get(url, params, options);
        }
    },
    supportDirectRequest: function (url, options) {
        return Util.isInTheSameDomain(url) || isCORS() || options.proxy
    },
    get: function (url, params, options) {
        options = options || {};
        var type = 'GET';
        url = this._processUrl(url, options);
        url = Util.urlAppend(url, this._getParameterString(params || {}));
        if (!this.supportDirectRequest(url, options)) {
            url = url.replace('.json', '.jsonp');
            var config = {
                url: url,
                data: params
            };
            return SuperMap.Util.RequestJSONPPromise.GET(config);
        }
        if (!this.urlIsLong(url)) {
            return this._fetch(url, params, options, type);
        } else {
            return this._postSimulatie(type, url.substring(0, url.indexOf('?') - 1), params, options);
        }

    },

    delete: function (url, params, options) {
        options = options || {};
        var type = 'DELETE';
        url = this._processUrl(url, options);
        url = Util.urlAppend(url, this._getParameterString(params || {}));
        if (!this.supportDirectRequest(url, options)) {
            url = url.replace('.json', '.jsonp');
            var config = {
                url: url += "&_method=DELETE",
                data: params
            };
            return SuperMap.Util.RequestJSONPPromise.DELETE(config);
        }
        if (this.urlIsLong(url)) {
            return this._postSimulatie(type, url.substring(0, url.indexOf('?') - 1), params, options);
        }
        return this._fetch(url, params, options, type);

    },
    post: function (url, params, options) {
        options = options || {};
        if (!this.supportDirectRequest(url, options)) {
            url = url.replace('.json', '.jsonp');
            var config = {
                url: url += "&_method=POST",
                data: params
            };
            return SuperMap.Util.RequestJSONPPromise.POST(config);
        }
        return this._fetch(this._processUrl(url, options), params, options, 'POST');

    },

    put: function (url, params, options) {
        options = options || {};
        url = this._processUrl(url, options);
        if (!this.supportDirectRequest(url, options)) {
            url = url.replace('.json', '.jsonp');
            var config = {
                url: url += "&_method=PUT",
                data: params
            };
            return SuperMap.Util.RequestJSONPPromise.PUT(config);

        }
        return this._fetch(url, params, options, 'PUT');

    },
    urlIsLong: function (url) {
        //å½åurlçå­èé¿åº¦ã
        var totalLength = 0,
            charCode = null;
        for (var i = 0, len = url.length; i < len; i++) {
            //è½¬åä¸ºUnicodeç¼ç 
            charCode = url.charCodeAt(i);
            if (charCode < 0x007f) {
                totalLength++;
            } else if ((0x0080 <= charCode) && (charCode <= 0x07ff)) {
                totalLength += 2;
            } else if ((0x0800 <= charCode) && (charCode <= 0xffff)) {
                totalLength += 3;
            }
        }
        return (totalLength < 2000) ? false : true;
    },
    _postSimulatie: function (type, url, params, options) {
        var separator = url.indexOf("?") > -1 ? "&" : "?";
        url += separator + '_method=' + type;
        if (typeof params !== 'string') {
            params = JSON.stringify(params);
        }
        return this.post(url, params, options);
    },

    _processUrl: function (url, options) {
        if (this._isMVTRequest(url)) {
            return url;
        }

        if (url.indexOf('.json') === -1 && !options.withoutFormatSuffix) {
            if (url.indexOf("?") < 0) {
                url += '.json'
            } else {
                var urlArrays = url.split("?");
                if (urlArrays.length === 2) {
                    url = urlArrays[0] + ".json?" + urlArrays[1]
                }
            }
        }
        if (options && options.proxy) {
            if (typeof options.proxy === "function") {
                url = options.proxy(url);
            } else {
                url = decodeURIComponent(url);
                url = options.proxy + encodeURIComponent(url);
            }
        }
        return url;
    },

    _fetch: function (url, params, options, type) {
        options = options || {};
        options.headers = options.headers || {};
        if (!options.headers['Content-Type']) {
            options.headers['Content-Type'] = 'application/x-www-form-urlencoded;charset=UTF-8';
        }
        if (options.timeout) {
            return this._timeout(options.timeout, FetchRequest_fetch(url, {
                method: type,
                headers: options.headers,
                body: type === 'PUT' || type === 'POST' ? params : undefined,
                credentials: options.withCredentials ? 'include' : 'omit',
                mode: 'cors',
                timeout: getRequestTimeout()
            }).then(function (response) {
                return response;
            }));
        }
        return FetchRequest_fetch(url, {
            method: type,
            body: type === 'PUT' || type === 'POST' ? params : undefined,
            headers: options.headers,
            credentials: options.withCredentials ? 'include' : 'omit',
            mode: 'cors',
            timeout: getRequestTimeout()
        }).then(function (response) {
            return response;
        });
    },

    _fetchJsonp: function (url, options) {
        options = options || {};
        return fetch_jsonp_default()(url, {
                method: 'GET',
                timeout: options.timeout
            })
            .then(function (response) {
                return response;
            });
    },

    _timeout: function (seconds, promise) {
        return new Promise(function (resolve, reject) {
            setTimeout(function () {
                reject(new Error("timeout"))
            }, seconds)
            promise.then(resolve, reject)
        })
    },

    _getParameterString: function (params) {
        var paramsArray = [];
        for (var key in params) {
            var value = params[key];
            if ((value != null) && (typeof value !== 'function')) {
                var encodedValue;
                if (typeof value === 'object' && value.constructor === Array) {
                    var encodedItemArray = [];
                    var item;
                    for (var itemIndex = 0, len = value.length; itemIndex < len; itemIndex++) {
                        item = value[itemIndex];
                        encodedItemArray.push(encodeURIComponent(
                            (item === null || item === undefined) ? "" : item));
                    }
                    encodedValue = '[' + encodedItemArray.join(",") + ']';
                } else {
                    encodedValue = encodeURIComponent(value);
                }
                paramsArray.push(encodeURIComponent(key) + "=" + encodedValue);
            }
        }
        return paramsArray.join("&");
    },

    _isMVTRequest: function (url) {
        return (url.indexOf('.mvt') > -1 || url.indexOf('.pbf') > -1);
    }
};
SuperMap.Util.RequestJSONPPromise = {
    limitLength: 1500,
    queryKeys: [],
    queryValues: [],
    supermap_callbacks: {},
    addQueryStrings: function (values) {
        var me = this;
        for (var key in values) {
            me.queryKeys.push(key);
            if (typeof values[key] !== "string") {
                values[key] = SuperMap.Util.toJSON(values[key]);
            }
            var tempValue = encodeURIComponent(values[key]);
            me.queryValues.push(tempValue);
        }
    },
    issue: function (config) {
        var me = this,
            uid = me.getUid(),
            url = config.url,
            splitQuestUrl = [];
        var p = new Promise(function (resolve) {
            me.supermap_callbacks[uid] = function (response) {
                delete me.supermap_callbacks[uid];
                resolve(response);
            };
        });

        // me.addQueryStrings({
        //     callback: "SuperMap.Util.RequestJSONPPromise.supermap_callbacks[" + uid + "]"
        // });
        var sectionURL = url,
            keysCount = 0; //æ­¤æ¬¡sectionURLä¸­æå¤å°ä¸ªkey
        var length = me.queryKeys ? me.queryKeys.length : 0;
        for (var i = 0; i < length; i++) {
            if (sectionURL.length + me.queryKeys[i].length + 2 >= me.limitLength) { //+2 for ("&"or"?")and"="
                if (keysCount == 0) {
                    return false;
                }
                splitQuestUrl.push(sectionURL);
                sectionURL = url;
                keysCount = 0;
                i--;
            } else {
                if (sectionURL.length + me.queryKeys[i].length + 2 + me.queryValues[i].length > me.limitLength) {
                    var leftValue = me.queryValues[i];
                    while (leftValue.length > 0) {
                        var leftLength = me.limitLength - sectionURL.length - me.queryKeys[i].length - 2; //+2 for ("&"or"?")and"="
                        if (sectionURL.indexOf("?") > -1) {
                            sectionURL += "&";
                        } else {
                            sectionURL += "?";
                        }
                        var tempLeftValue = leftValue.substring(0, leftLength);
                        //é¿å æªæ­sectionURLæ¶ï¼å°ç±»ä¼¼äº%22è¿æ ·çç¬¦å·æªæä¸¤åï¼ä»èå¯¼è´æå¡ç«¯ç»è£sectionURLæ¶åçéè¯¯
                        if (tempLeftValue.substring(leftLength - 1, leftLength) === "%") {
                            leftLength -= 1;
                            tempLeftValue = leftValue.substring(0, leftLength);
                        } else if (tempLeftValue.substring(leftLength - 2, leftLength - 1) === "%") {
                            leftLength -= 2;
                            tempLeftValue = leftValue.substring(0, leftLength);
                        }

                        sectionURL += me.queryKeys[i] + "=" + tempLeftValue;
                        leftValue = leftValue.substring(leftLength);
                        if (tempLeftValue.length > 0) {
                            splitQuestUrl.push(sectionURL);
                            sectionURL = url;
                            keysCount = 0;
                        }
                    }
                } else {
                    keysCount++;
                    if (sectionURL.indexOf("?") > -1) {
                        sectionURL += "&";
                    } else {
                        sectionURL += "?";
                    }
                    sectionURL += me.queryKeys[i] + "=" + me.queryValues[i];
                }
            }
        }
        splitQuestUrl.push(sectionURL);
        me.send(splitQuestUrl, "SuperMap.Util.RequestJSONPPromise.supermap_callbacks[" + uid + "]", config && config.proxy);
        return p;
    },


    getUid: function () {
        var uid = new Date().getTime(),
            random = Math.floor(Math.random() * 1e17);
        return uid * 1000 + random;
    },

    send: function (splitQuestUrl, callback, proxy) {
        var len = splitQuestUrl.length;
        if (len > 0) {
            var jsonpUserID = new Date().getTime();
            for (var i = 0; i < len; i++) {
                var url = splitQuestUrl[i];
                if (url.indexOf("?") > -1) {
                    url += "&";
                } else {
                    url += "?";
                }
                url += "sectionCount=" + len;
                url += "&sectionIndex=" + i;
                url += "&jsonpUserID=" + jsonpUserID;
                if (proxy) {
                    url = decodeURIComponent(url);
                    url = proxy + encodeURIComponent(url);
                }
                fetch_jsonp_default()(url, {
                    jsonpCallbackFunction: callback,
                    timeout: 30000
                })
            }
        }
    },

    GET: function (config) {
        var me = this;
        me.queryKeys.length = 0;
        me.queryValues.length = 0;
        me.addQueryStrings(config.params);
        return me.issue(config);
    },

    POST: function (config) {
        var me = this;
        me.queryKeys.length = 0;
        me.queryValues.length = 0;
        me.addQueryStrings({
            requestEntity: config.data
        });
        return me.issue(config);
    },

    PUT: function (config) {
        var me = this;
        me.queryKeys.length = 0;
        me.queryValues.length = 0;
        me.addQueryStrings({
            requestEntity: config.data
        });
        return me.issue(config);
    },
    DELETE: function (config) {
        var me = this;
        me.queryKeys.length = 0;
        me.queryValues.length = 0;
        me.addQueryStrings({
            requestEntity: config.data
        });
        return me.issue(config);
    }
};
// CONCATENATED MODULE: ./src/common/security/SecurityManager.js
/* CopyrightÂ© 2000 - 2019 SuperMap Software Co.Ltd. All rights reserved.
 * This program are made available under the terms of the Apache License, Version 2.0
 * which accompanies this distribution and is available at http://www.apache.org/licenses/LICENSE-2.0.html.*/




/**
 * @name SecurityManager
 * @memberOf SuperMap
 * @namespace
 * @category Security
 * @description å®å¨ç®¡çä¸­å¿ï¼æä¾ iServer,iPortal,Online ç»ä¸æéè®¤è¯ç®¡çã
 *  > ä½¿ç¨è¯´æï¼
 *  > åå»ºä»»ä½ä¸ä¸ªæå¡ä¹åè°ç¨ {@link SuperMap.SecurityManager.registerToken}æ
 *  > {@link SuperMap.SecurityManager.registerKey}æ³¨åå­æ®ã
 *  > åéè¯·æ±æ¶æ ¹æ® url æèæå¡ id è·åç¸åºç key æè token å¹¶èªå¨æ·»å å°æå¡å°åä¸­ã
 */
class SecurityManager_SecurityManager {

    /**
     * @description ä»æå¡å¨è·åä¸ä¸ªtoken,å¨æ­¤ä¹åè¦æ³¨åæå¡å¨ä¿¡æ¯ã
     * @function SuperMap.SecurityManager.generateToken
     * @param {string} url - æå¡å¨åå+ç«¯å£ï¼å¦ï¼http://localhost:8092ã
     * @param {SuperMap.TokenServiceParameter} tokenParam - token ç³è¯·åæ°ã
     * @returns {Promise} è¿ååå« token ä¿¡æ¯ç Promise å¯¹è±¡ã
     */

    static generateToken(url, tokenParam) {
        var serverInfo = this.servers[url];
        if (!serverInfo) {
            return;
        }
        return FetchRequest.post(serverInfo.tokenServiceUrl, JSON.stringify(tokenParam.toJSON())).then(function (response) {
            return response.text();
        });
    }

    /**
     * @description æ³¨åå®å¨æå¡å¨ç¸å³ä¿¡æ¯ã
     * @function SuperMap.SecurityManager.registerServers
     * @param {SuperMap.ServerInfo} serverInfos - æå¡å¨ä¿¡æ¯ã
     */
    static registerServers(serverInfos) {
        this.servers = this.servers || {};
        if (!Util.isArray(serverInfos)) {
            serverInfos = [serverInfos];
        }
        for (var i = 0; i < serverInfos.length; i++) {
            var serverInfo = serverInfos[i];
            this.servers[serverInfo.server] = serverInfo;
        }
    }

    /**
     * @description æå¡è¯·æ±é½ä¼èªå¨å¸¦ä¸è¿ä¸ª tokenã
     * @function SuperMap.SecurityManager.registerToken
     * @param {string} url -æå¡å¨åå+ç«¯å£ï¼å¦http://localhost:8090ã
     * @param {string} token - token
     */
    static registerToken(url, token) {
        this.tokens = this.tokens || {};
        if (!url || !token) {
            return;
        }
        var domain = this._getTokenStorageKey(url);
        this.tokens[domain] = token;
    }

    /**
     * @description æ³¨å key,ids ä¸ºæ°ç»(å­å¨ä¸ä¸ª key å¯¹åºå¤ä¸ªæå¡)ã
     * @function SuperMap.SecurityManager.registerKey
     * @param {Array} ids - å¯ä»¥æ¯æå¡ id æ°ç»æè url å°åæ°ç»æè webAPI ç±»åæ°ç»ã
     * @param {string} key - key
     */
    static registerKey(ids, key) {
        this.keys = this.keys || {};
        if (!ids || ids.length < 1 || !key) {
            return;
        }

        ids = (Util.isArray(ids)) ? ids : [ids];
        for (var i = 0; i < ids.length; i++) {
            var id = this._getUrlRestString(ids[0]) || ids[0];
            this.keys[id] = key;
        }
    }

    /**
     * @description è·åæå¡å¨ä¿¡æ¯ã
     * @function SuperMap.SecurityManager.getServerInfo
     * @param {string} url - æå¡å¨åå+ç«¯å£ï¼å¦ï¼http://localhost:8092ã
     * @returns {SuperMap.ServerInfo} æå¡å¨ä¿¡æ¯ã
     */
    static getServerInfo(url) {
        this.servers = this.servers || {};
        return this.servers[url];
    }

    /**
     * @description æ ¹æ® Url è·åtokenã
     * @function SuperMap.SecurityManager.getToken
     * @param {string} url - æå¡å¨åå+ç«¯å£ï¼å¦ï¼http://localhost:8092ã
     * @returns {string} token
     */
    static getToken(url) {
        if (!url) {
            return;
        }
        this.tokens = this.tokens || {};
        var domain = this._getTokenStorageKey(url);
        return this.tokens[domain];
    }

    /**
     * @description æ ¹æ® Url è·å keyã
     * @function SuperMap.SecurityManager.getKey
     * @param {string} id - id
     * @returns {string} key
     */
    static getKey(id) {
        this.keys = this.keys || {};
        var key = this._getUrlRestString(id) || id;
        return this.keys[key];
    }

    /**
     * @description iServer ç»å½éªè¯ã
     * @function SuperMap.SecurityManager.loginiServer
     * @param {string} url - iServer é¦é¡µå°åï¼å¦ï¼http://localhost:8090/iserverã
     * @param {string} username - ç¨æ·åã
     * @param {string} password - å¯ç ã
     * @param {boolean} [rememberme=false] - æ¯å¦è®°ä½ã
     * @returns {Promise} è¿ååå« iServer ç»å½è¯·æ±ç»æç Promise å¯¹è±¡ã
     */
    static loginiServer(url, username, password, rememberme) {
        var end = url.substr(url.length - 1, 1);
        url += end === "/" ? "services/security/login.json" : "/services/security/login.json";
        var loginInfo = {
            username: username && username.toString(),
            password: password && password.toString(),
            rememberme: rememberme
        };
        loginInfo = JSON.stringify(loginInfo);
        var requestOptions = {
            headers: {
                'Content-Type': 'application/x-www-form-urlencoded; charset=UTF-8'
            }
        };
        return FetchRequest.post(url, loginInfo, requestOptions).then(function (response) {
            return response.json();
        });

    }

    /**
     * @description iServerç»åºã
     * @function SuperMap.SecurityManager.logoutiServer
     * @param {string} url - iServer é¦é¡µå°å,å¦ï¼http://localhost:8090/iserverã
     * @returns {Promise} æ¯å¦ç»åºæåã
     */
    static logoutiServer(url) {
        var end = url.substr(url.length - 1, 1);
        url += end === "/" ? "services/security/logout" : "/services/security/logout";

        var requestOptions = {
            headers: {
                'Content-Type': 'application/x-www-form-urlencoded; charset=UTF-8'
            },
            withoutFormatSuffix: true
        };
        return FetchRequest.get(url, "", requestOptions).then(function () {
            return true;
        }).catch(function () {
            return false;
        });

    }

    /**
     * @description Online ç»å½éªè¯ã
     * @function SuperMap.SecurityManager.loginOnline
     * @param {string} callbackLocation - è·³è½¬ä½ç½®ã
     * @param {boolean} [newTab=true] - æ¯å¦æ°çªå£æå¼ã
     */
    static loginOnline(callbackLocation, newTab) {
        var loginUrl = SecurityManager_SecurityManager.SSO + "/login?service=" + callbackLocation;
        this._open(loginUrl, newTab);
    }

    /**
     * @description iPortalç»å½éªè¯ã
     * @function SuperMap.SecurityManager.loginiPortal
     * @param {string} url - iportal é¦é¡µå°å,å¦ï¼http://localhost:8092/iportal.
     * @param {string} username - ç¨æ·åã
     * @param {string} password - å¯ç ã
     * @returns {Promise} è¿ååå« iPortal ç»å½è¯·æ±ç»æç Promise å¯¹è±¡ã
     */
    static loginiPortal(url, username, password) {
        var end = url.substr(url.length - 1, 1);
        url += end === "/" ? "web/login.json" : "/web/login.json";
        var loginInfo = {
            username: username && username.toString(),
            password: password && password.toString()
        };
        loginInfo = JSON.stringify(loginInfo);
        var requestOptions = {
            headers: {
                'Content-Type': 'application/x-www-form-urlencoded; charset=UTF-8'
            },
            withCredentials: true
        };
        return FetchRequest.post(url, loginInfo, requestOptions).then(function (response) {
            return response.json();
        });

    }

    /**
     * @description iPortal ç»åºã
     * @function SuperMap.SecurityManager.logoutiPortal
     * @param {string} url - iportal é¦é¡µå°å,å¦ï¼http://localhost:8092/iportal.
     * @returns {Promise} å¦æç»åºæåï¼è¿å true;å¦åè¿å falseã
     */
    static logoutiPortal(url) {
        var end = url.substr(url.length - 1, 1);
        url += end === "/" ? "services/security/logout" : "/services/security/logout";

        var requestOptions = {
            headers: {
                'Content-Type': 'application/x-www-form-urlencoded; charset=UTF-8'
            },
            withCredentials: true,
            withoutFormatSuffix: true
        };
        return FetchRequest.get(url, "", requestOptions).then(function () {
            return true;
        }).catch(function () {
            return false;
        });

    }

    /**
     * @description iManager ç»å½éªè¯ã
     * @function SuperMap.SecurityManager.loginManager
     * @param {string} url - iManager å°åãå°ååæ°ä¸º iManager é¦é¡µå°åï¼å¦ï¼ http://localhost:8390/imanagerã
     * @param {Object} [loginInfoParams] - iManager ç»å½åæ°ã
     * @param {string} loginInfoParams.userName - ç¨æ·åã
     * @param {string} loginInfoParams.password - å¯ç ã
     * @param {Object} options
     * @param {boolean} [options.isNewTab=true] - ä¸ååæ¶æ¯å¦å¨æ°çªå£æå¼ç»å½é¡µé¢ã
     * @returns {Promise} è¿ååå« iManager ç»å½è¯·æ±ç»æç Promise å¯¹è±¡ã
     */
    static loginManager(url, loginInfoParams, options) {
        if (!Util.isInTheSameDomain(url)) {
            var isNewTab = options ? options.isNewTab : true;
            this._open(url, isNewTab);
            return;
        }
        var end = url.substr(url.length - 1, 1);
        var requestUrl = end === "/" ? url + "icloud/security/tokens.json" : url + "/icloud/security/tokens.json";
        var params = loginInfoParams || {};
        var loginInfo = {
            username: params.userName && params.userName.toString(),
            password: params.password && params.password.toString()
        };
        loginInfo = JSON.stringify(loginInfo);
        var requestOptions = {
            headers: {
                'Accept': '*/*',
                'Content-Type': 'application/json'
            }
        };
        var me = this;
        return FetchRequest.post(requestUrl, loginInfo, requestOptions).then(function (response) {
            response.text().then(function (result) {
                me.imanagerToken = result;
                return result;
            });
        });
    }

    /**
     * @description æ¸ç©ºå¨é¨éªè¯ä¿¡æ¯ã
     * @function SuperMap.SecurityManager.destroyAllCredentials
     */
    static destroyAllCredentials() {
        this.keys = null;
        this.tokens = null;
        this.servers = null;
    }

    /**
     * @description æ¸ç©ºä»¤çä¿¡æ¯ã
     * @function SuperMap.SecurityManager.destroyToken
     * @param {string} url - iportal é¦é¡µå°å,å¦ï¼http://localhost:8092/iportal.
     */
    static destroyToken(url) {
        if (!url) {
            return;
        }
        var domain = this._getTokenStorageKey(url);
        this.tokens = this.tokens || {};
        if (this.tokens[domain]) {
            delete this.tokens[domain];
        }
    }

    /**
     * @description æ¸ç©ºæå¡ææç ã
     * @function SuperMap.SecurityManager.destroyKey
     * @param {string} url - iServer é¦é¡µå°å,å¦ï¼http://localhost:8090/iserverã
     */
    static destroyKey(url) {
        if (!url) {
            return;
        }
        this.keys = this.keys || {};
        var key = this._getUrlRestString(url) || url;
        if (this.keys[key]) {
            delete this.keys[key];
        }
    }

    static _open(url, newTab) {
        newTab = (newTab != null) ? newTab : true;
        var offsetX = window.screen.availWidth / 2 - this.INNER_WINDOW_WIDTH / 2;
        var offsetY = window.screen.availHeight / 2 - this.INNER_WINDOW_HEIGHT / 2;
        var options =
            "height=" + this.INNER_WINDOW_HEIGHT + ", width=" + this.INNER_WINDOW_WIDTH +
            ",top=" + offsetY + ", left=" + offsetX +
            ",toolbar=no, menubar=no, scrollbars=no, resizable=no, location=no, status=no";
        if (newTab) {
            window.open(url, 'login');
        } else {
            window.open(url, 'login', options);
        }
    }

    static _getTokenStorageKey(url) {
        var patten = /(.*?):\/\/([^\/]+)/i;
        var result = url.match(patten);
        if (!result) {
            return url;
        }
        return result[0];
    }

    static _getUrlRestString(url) {
        if (!url) {
            return url;
        }
        var patten = /http:\/\/(.*\/rest)/i;
        var result = url.match(patten);
        if (!result) {
            return url;
        }
        return result[0];
    }
}
SecurityManager_SecurityManager.INNER_WINDOW_WIDTH = 600;
SecurityManager_SecurityManager.INNER_WINDOW_HEIGHT = 600;
SecurityManager_SecurityManager.SSO = "https://sso.supermap.com";
SecurityManager_SecurityManager.ONLINE = "http://www.supermapol.com";
SuperMap.SecurityManager = SecurityManager_SecurityManager;


// CONCATENATED MODULE: ./src/common/REST.js
/* CopyrightÂ© 2000 - 2019 SuperMap Software Co.Ltd. All rights reserved.
 * This program are made available under the terms of the Apache License, Version 2.0
 * which accompanies this distribution and is available at http://www.apache.org/licenses/LICENSE-2.0.html.*/


/**
 * @enum DataFormat
 * @memberOf SuperMap
 * @description æå¡è¯·æ±è¿åç»ææ°æ®ç±»å
 * @type {string}
 */
var DataFormat = SuperMap.DataFormat = {
    /** GEOJSON */
    GEOJSON: "GEOJSON",
    /** ISERVER */
    ISERVER: "ISERVER"
};


/**
 * @enum ServerType
 * @memberOf SuperMap
 * @description æå¡å¨ç±»å
 * @type {string}
 */
var ServerType = SuperMap.ServerType = {
    /** ISERVER */
    ISERVER: "ISERVER",
    /** IPORTAL */
    IPORTAL: "IPORTAL",
    /** ONLINE */
    ONLINE: "ONLINE"
};


/**
 * @enum GeometryType
 * @memberOf SuperMap
 * @description å ä½å¯¹è±¡æä¸¾,å®ä¹äºä¸ç³»åå ä½å¯¹è±¡ç±»åã
 * @type {string}
 */
var GeometryType = SuperMap.GeometryType = {
    /** LINE */
    LINE: "LINE",
    /** LINEM */
    LINEM: "LINEM",
    /** POINT */
    POINT: "POINT",
    /** REGION */
    REGION: "REGION",
    /** POINTEPS */
    POINTEPS: "POINTEPS",
    /** LINEEPS */
    LINEEPS: "LINEEPS",
    /** REGIONEPS */
    REGIONEPS: "REGIONEPS",
    /** ELLIPSE */
    ELLIPSE: "ELLIPSE",
    /** CIRCLE */
    CIRCLE: "CIRCLE",
    /** TEXT */
    TEXT: "TEXT",
    /** RECTANGLE */
    RECTANGLE: "RECTANGLE",
    /** UNKNOWN */
    UNKNOWN: "UNKNOWN"
};


/**
 * @enum QueryOption
 * @memberOf SuperMap
 * @description æ¥è¯¢ç»æç±»åæä¸¾,æè¿°æ¥è¯¢ç»æè¿åç±»åï¼åæ¬åªè¿åå±æ§ãåªè¿åå ä½å®ä½ä»¥åè¿åå±æ§åå ä½å®ä½ã
 * @type {string}
 */
var QueryOption = SuperMap.QueryOption = {
    /** å±æ§ */
    ATTRIBUTE: "ATTRIBUTE",
    /** å±æ§åå ä½å¯¹è±¡ */
    ATTRIBUTEANDGEOMETRY: "ATTRIBUTEANDGEOMETRY",
    /** å ä½å¯¹è±¡ */
    GEOMETRY: "GEOMETRY"
};


/**
 * @enum JoinType
 * @memberOf SuperMap
 * @description å³èæ¥è¯¢æ¶çå³èç±»åå¸¸éã
 * è¯¥ç±»å®ä¹äºä¸¤ä¸ªè¡¨ä¹é´çè¿æ¥ç±»åå¸¸éï¼å³å®äºå¯¹ä¸¤ä¸ªè¡¨ä¹é´è¿è¡è¿æ¥æ¥è¯¢æ¶ï¼æ¥è¯¢ç»æä¸­å¾å°çè®°å½çæåµã
 * @type {string}
 */
var JoinType = SuperMap.JoinType = {
    /** INNERJOIN */
    INNERJOIN: "INNERJOIN",
    /** LEFTJOIN */
    LEFTJOIN: "LEFTJOIN"
};



/**
 * @enum SpatialQueryMode
 * @memberOf SuperMap
 * @description  ç©ºé´æ¥è¯¢æ¨¡å¼æä¸¾ãè¯¥ç±»å®ä¹äºç©ºé´æ¥è¯¢æä½æ¨¡å¼å¸¸éã
 * @type {string}
 */
var SpatialQueryMode = SuperMap.SpatialQueryMode = {
    /** åå«ç©ºé´æ¥è¯¢æ¨¡å¼ */
    CONTAIN: "CONTAIN",
    /** äº¤åç©ºé´æ¥è¯¢æ¨¡å¼ */
    CROSS: "CROSS",
    /** åç¦»ç©ºé´æ¥è¯¢æ¨¡å¼ */
    DISJOINT: "DISJOINT",
    /** éåç©ºé´æ¥è¯¢æ¨¡å¼ */
    IDENTITY: "IDENTITY",
    /** ç¸äº¤ç©ºé´æ¥è¯¢æ¨¡å¼ */
    INTERSECT: "INTERSECT",
    /** æ ç©ºé´æ¥è¯¢ */
    NONE: "NONE",
    /** å å ç©ºé´æ¥è¯¢æ¨¡å¼ */
    OVERLAP: "OVERLAP",
    /** é»æ¥ç©ºé´æ¥è¯¢æ¨¡å¼ */
    TOUCH: "TOUCH",
    /** è¢«åå«ç©ºé´æ¥è¯¢æ¨¡å¼ */
    WITHIN: "WITHIN"
};

/**
 * @enum SpatialRelationType
 * @memberOf SuperMap
 * @description  æ°æ®éå¯¹è±¡é´çç©ºé´å³ç³»æä¸¾ã
 * è¯¥ç±»å®ä¹äºæ°æ®éå¯¹è±¡é´çç©ºé´å³ç³»ç±»åå¸¸éã
 * @type {string}
 */
var SpatialRelationType = SuperMap.SpatialRelationType = {
    /** åå«å³ç³» */
    CONTAIN: "CONTAIN",
    /** ç¸äº¤å³ç³» */
    INTERSECT: "INTERSECT",
    /** è¢«åå«å³ç³» */
    WITHIN: "WITHIN"
};


/**
 * @enum MeasureMode
 * @memberOf SuperMap
 * @type {string}
 * @description  éç®æ¨¡å¼æä¸¾ã
 * è¯¥ç±»å®ä¹äºä¸¤ç§æµéæ¨¡å¼ï¼è·ç¦»æµéåé¢ç§¯æµéã
 */
var MeasureMode = SuperMap.MeasureMode = {
    /** è·ç¦»æµé */
    DISTANCE: "DISTANCE",
    /** é¢ç§¯æµé */
    AREA: "AREA"
};


/**
 * @enum Unit
 * @memberOf SuperMap
 * @description  è·ç¦»åä½æä¸¾ã
 * è¯¥ç±»å®ä¹äºä¸ç³»åè·ç¦»åä½ç±»åã
 * @type {string}
 */
var Unit = SuperMap.Unit = {
    /**  ç±³ */
    METER: "METER",
    /**  åç±³ */
    KILOMETER: "KILOMETER",
    /**  è±é */
    MILE: "MILE",
    /**  ç  */
    YARD: "YARD",
    /**  åº¦ */
    DEGREE: "DEGREE",
    /**  æ¯«ç±³ */
    MILLIMETER: "MILLIMETER",
    /**  åç±³ */
    CENTIMETER: "CENTIMETER",
    /**  è±å¯¸ */
    INCH: "INCH",
    /**  åç±³ */
    DECIMETER: "DECIMETER",
    /**  è±å°º */
    FOOT: "FOOT",
    /**  ç§ */
    SECOND: "SECOND",
    /**  å */
    MINUTE: "MINUTE",
    /**  å¼§åº¦ */
    RADIAN: "RADIAN"
};


/**
 * @enum BufferRadiusUnit
 * @memberOf SuperMap
 * @description  ç¼å²åºè·ç¦»åä½æä¸¾ã
 * è¯¥ç±»å®ä¹äºä¸ç³»åç¼å²è·ç¦»åä½ç±»åã
 * @type {string}
 */
var BufferRadiusUnit = SuperMap.BufferRadiusUnit = {
    /**  åç±³ */
    CENTIMETER: "CENTIMETER",
    /**  åç±³ */
    DECIMETER: "DECIMETER",
    /**  è±å°º */
    FOOT: "FOOT",
    /**  è±å¯¸ */
    INCH: "INCH",
    /**  åç±³ */
    KILOMETER: "KILOMETER",
    /**  ç±³ */
    METER: "METER",
    /**  è±é */
    MILE: "MILE",
    /**  æ¯«ç±³ */
    MILLIMETER: "MILLIMETER",
    /**  ç  */
    YARD: "YARD"
}


/**
 * @enum EngineType
 * @memberOf SuperMap
 * @description  æ°æ®æºå¼æç±»åæä¸¾ã
 * @type {string}
 */
var EngineType = SuperMap.EngineType = {
    /** å½±ååªè¯»å¼æç±»åï¼æä»¶å¼æï¼éå¯¹éç¨å½±åæ ¼å¼å¦ BMPï¼JPGï¼TIFF ä»¥åè¶å¾èªå®ä¹å½±åæ ¼å¼ SIT ç­ã */
    IMAGEPLUGINS: "IMAGEPLUGINS",
    /**  OGC å¼æç±»åï¼éå¯¹äº Web æ°æ®æºï¼Web å¼æï¼ç®åæ¯æçç±»åæ WMSï¼WFSï¼WCSã */
    OGC: "OGC",
    /**  Oracle å¼æç±»åï¼éå¯¹ Oracle æ°æ®æºï¼æ°æ®åºå¼æã */
    ORACLEPLUS: "ORACLEPLUS",
    /**  SDB å¼æç±»åï¼æä»¶å¼æï¼å³ SDB æ°æ®æºã */
    SDBPLUS: "SDBPLUS",
    /**  SQL Server å¼æç±»åï¼éå¯¹ SQL Server æ°æ®æºï¼æ°æ®åºå¼æ */
    SQLPLUS: "SQLPLUS",
    /**  UDB å¼æç±»åï¼æä»¶å¼æã */
    UDB: "UDB"
};


/**
 * @enum ThemeGraphTextFormat
 * @memberOf SuperMap
 * @description  ç»è®¡ä¸é¢å¾ææ¬æ¾ç¤ºæ ¼å¼æä¸¾ã
 * @type {string}
 */
var ThemeGraphTextFormat = SuperMap.ThemeGraphTextFormat = {
    /**  æ é¢ãä»¥åå­é¡¹çæ é¢æ¥è¿è¡æ æ³¨ã */
    CAPTION: "CAPTION",
    /**  æ é¢ + ç¾åæ°ãä»¥åå­é¡¹çæ é¢åæå çç¾åæ¯æ¥è¿è¡æ æ³¨ã */
    CAPTION_PERCENT: "CAPTION_PERCENT",
    /**  æ é¢ + å®éæ°å¼ãä»¥åå­é¡¹çæ é¢åçå®æ°å¼æ¥è¿è¡æ æ³¨ã */
    CAPTION_VALUE: "CAPTION_VALUE",
    /**  ç¾åæ°ãä»¥åå­é¡¹æå çç¾åæ¯æ¥è¿è¡æ æ³¨ã */
    PERCENT: "PERCENT",
    /**  å®éæ°å¼ãä»¥åå­é¡¹ççå®æ°å¼æ¥è¿è¡æ æ³¨ã */
    VALUE: "VALUE"

};


/**
 * @enum ThemeGraphType
 * @memberOf SuperMap
 * @description  ç»è®¡ä¸é¢å¾ç±»åæä¸¾ã
 * @type {string}
 */
var ThemeGraphType = SuperMap.ThemeGraphType = {
    /**  é¢ç§¯å¾ã */
    AREA: "AREA",
    /**  æ±ç¶å¾ã */
    BAR: "BAR",
    /**  ä¸ç»´æ±ç¶å¾ã */
    BAR3D: "BAR3D",
    /**  æçº¿å¾ã */
    LINE: "LINE",
    /**  é¥¼å¾ã */
    PIE: "PIE",
    /**  ä¸ç»´é¥¼å¾ã */
    PIE3D: "PIE3D",
    /**  ç¹ç¶å¾ã */
    POINT: "POINT",
    /**  ç¯ç¶å¾ã */
    RING: "RING",
    /**  ç«ç°å¾ã */
    ROSE: "ROSE",
    /**  ä¸ç»´ç«ç°å¾ã */
    ROSE3D: "ROSE3D",
    /**  å å æ±ç¶å¾ã */
    STACK_BAR: "STACK_BAR",
    /**  ä¸ç»´å å æ±ç¶å¾ã */
    STACK_BAR3D: "STACK_BAR3D",
    /**  é¶æ¢¯å¾ã */
    STEP: "STEP"
};


/**
 * @enum GraphAxesTextDisplayMode
 * @memberOf SuperMap
 * @description  ç»è®¡ä¸é¢å¾åæ è½´ææ¬æ¾ç¤ºæ¨¡å¼ã
 * @type {string}
 */
var GraphAxesTextDisplayMode = SuperMap.GraphAxesTextDisplayMode = {
    /**  æ¾ç¤ºå¨é¨ææ¬ã */
    ALL: "ALL",
    /**  ä¸æ¾ç¤ºã */
    NONE: "NONE",
    /**  æ¾ç¤ºYè½´çææ¬ã */
    YAXES: "YAXES"
};


/**
 * @enum GraduatedMode
 * @memberOf SuperMap
 * @description  ä¸é¢å¾åçº§æ¨¡å¼æä¸¾ã
 *
 * @type {string}
 */
var GraduatedMode = SuperMap.GraduatedMode = {
    /**  å¸¸éåçº§æ¨¡å¼ã */
    CONSTANT: "CONSTANT",
    /** å¯¹æ°åçº§æ¨¡å¼ã */
    LOGARITHM: "LOGARITHM",
    /**  å¹³æ¹æ ¹åçº§æ¨¡å¼ã */
    SQUAREROOT: "SQUAREROOT"
};


/**
 * @enum RangeMode
 * @memberOf SuperMap
 * @description  èå´åæ®µä¸é¢å¾åæ®µæ¹å¼æä¸¾ã
 * @type {string}
 */
var RangeMode = SuperMap.RangeMode = {
    /**  èªå®ä¹åæ®µæ³ã */
    CUSTOMINTERVAL: "CUSTOMINTERVAL",
    /**  ç­è·ç¦»åæ®µæ³ã */
    EQUALINTERVAL: "EQUALINTERVAL",
    /**  å¯¹æ°åæ®µæ³ã */
    LOGARITHM: "LOGARITHM",
    /**  ç­è®¡æ°åæ®µæ³ã */
    QUANTILE: "QUANTILE",
    /**  å¹³æ¹æ ¹åæ®µæ³ã */
    SQUAREROOT: "SQUAREROOT",
    /**  æ åå·®åæ®µæ³ã */
    STDDEVIATION: "STDDEVIATION"
};


/**
 * @enum ThemeType
 * @memberOf SuperMap
 * @description  ä¸é¢å¾ç±»åæä¸¾ã
 * @type {string}
 */
var ThemeType = SuperMap.ThemeType = {
    /** ç¹å¯åº¦ä¸é¢å¾ã */
    DOTDENSITY: "DOTDENSITY",
    /** ç­çº§ç¬¦å·ä¸é¢å¾ã */
    GRADUATEDSYMBOL: "GRADUATEDSYMBOL",
    /** ç»è®¡ä¸é¢å¾ã */
    GRAPH: "GRAPH",
    /** æ ç­¾ä¸é¢å¾ã */
    LABEL: "LABEL",
    /** åæ®µä¸é¢å¾ã */
    RANGE: "RANGE",
    /** åå¼ä¸é¢å¾ã */
    UNIQUE: "UNIQUE"
};


/**
 * @enum ColorGradientType
 * @memberOf SuperMap
 * @description  æ¸åé¢è²æä¸¾ã
 * @type {string}
 */
var ColorGradientType = SuperMap.ColorGradientType = {
    /** é»ç½æ¸åè²ã */
    BLACK_WHITE: "BLACKWHITE",
    /** èé»æ¸åè²ã */
    BLUE_BLACK: "BLUEBLACK",
    /** èçº¢æ¸åè²ã */
    BLUE_RED: "BLUERED",
    /** èç½æ¸åè²ã */
    BLUE_WHITE: "BLUEWHITE",
    /** éé»æ¸åè²ã */
    CYAN_BLACK: "CYANBLACK",
    /** éèæ¸åè²ã */
    CYAN_BLUE: "CYANBLUE",
    /** éç»¿æ¸åè²ã */
    CYAN_GREEN: "CYANGREEN",
    /** éç½æ¸åè²ã */
    CYAN_WHITE: "CYANWHITE",
    /** ç»¿é»æ¸åè²ã */
    GREEN_BLACK: "GREENBLACK",
    /** ç»¿èæ¸åè²ã */
    GREEN_BLUE: "GREENBLUE",
    /** ç»¿æ©ç´«æ¸åè²ã */
    GREEN_ORANGE_VIOLET: "GREENORANGEVIOLET",
    /** ç»¿çº¢æ¸åè²ã */
    GREEN_RED: "GREENRED",
    /** èçº¢æ¸åè²ã */
    GREEN_WHITE: "GREENWHITE",
    /** ç²é»æ¸åè²ã */
    PINK_BLACK: "PINKBLACK",
    /** ç²èæ¸åè²ã */
    PINK_BLUE: "PINKBLUE",
    /** ç²çº¢æ¸åè²ã */
    PINK_RED: "PINKRED",
    /** ç²ç½æ¸åè²ã */
    PINK_WHITE: "PINKWHITE",
    /** å½©è¹è²ã */
    RAIN_BOW: "RAINBOW",
    /** çº¢é»æ¸åè²ã */
    RED_BLACK: "REDBLACK",
    /** çº¢ç½æ¸åè²ã */
    RED_WHITE: "REDWHITE",
    /** åè°±æ¸åã */
    SPECTRUM: "SPECTRUM",
    /** å°å½¢æ¸å,ç¨äºä¸ç»´æ¾ç¤ºææè¾å¥½ã */
    TERRAIN: "TERRAIN",
    /** é»é»æ¸åè²ã */
    YELLOW_BLACK: "YELLOWBLACK",
    /** é»èæ¸åè²ã */
    YELLOW_BLUE: "YELLOWBLUE",
    /** é»ç»¿æ¸åè²ã */
    YELLOW_GREEN: "YELLOWGREEN",
    /** é»çº¢æ¸åè²ã */
    YELLOW_RED: "YELLOWRED",
    /** é»ç½æ¸åè²ã */
    YELLOW_WHITE: "YELLOWWHITE"
};


/**
 * @enum TextAlignment
 * @memberOf SuperMap
 * @description  ææ¬å¯¹é½æä¸¾ã
 * @type {string}
 */
var TextAlignment = SuperMap.TextAlignment = {
    /** å·¦ä¸è§å¯¹é½ã */
    TOPLEFT: "TOPLEFT",
    /** é¡¶é¨å±ä¸­å¯¹é½ã */
    TOPCENTER: "TOPCENTER",
    /** å³ä¸è§å¯¹é½ã */
    TOPRIGHT: "TOPRIGHT",
    /** åºåçº¿å·¦å¯¹é½ã */
    BASELINELEFT: "BASELINELEFT",
    /** åºåçº¿å±ä¸­å¯¹é½ã */
    BASELINECENTER: "BASELINECENTER",
    /** åºåçº¿å³å¯¹é½ã */
    BASELINERIGHT: "BASELINERIGHT",
    /** å·¦ä¸è§å¯¹é½ã */
    BOTTOMLEFT: "BOTTOMLEFT",
    /** åºé¨å±ä¸­å¯¹é½ã */
    BOTTOMCENTER: "BOTTOMCENTER",
    /** å³ä¸è§å¯¹é½ã */
    BOTTOMRIGHT: "BOTTOMRIGHT",
    /** å·¦ä¸­å¯¹é½ã */
    MIDDLELEFT: "MIDDLELEFT",
    /** ä¸­å¿å¯¹é½ã */
    MIDDLECENTER: "MIDDLECENTER",
    /** å³ä¸­å¯¹é½ã */
    MIDDLERIGHT: "MIDDLERIGHT"
};

/**
 * @enum FillGradientMode
 * @memberOf SuperMap
 * @description  æ¸åå¡«åé£æ ¼çæ¸åç±»åæä¸¾ã
 * @type {string}
 */
var FillGradientMode = SuperMap.FillGradientMode = {
    /** æ æ¸åã */
    NONE: "NONE",
    /** çº¿æ§æ¸åå¡«åã */
    LINEAR: "LINEAR",
    /** è¾å°æ¸åå¡«åã */
    RADIAL: "RADIAL",
    /** åé¥æ¸åå¡«åã */
    CONICAL: "CONICAL",
    /** åè§æ¸åå¡«åã */
    SQUARE: "SQUARE"
};


/**
 * @enum AlongLineDirection
 * @memberOf SuperMap
 * @description  æ ç­¾æ²¿çº¿æ æ³¨æ¹åæä¸¾ã
 * @type {string}
 */
var AlongLineDirection = SuperMap.AlongLineDirection = {
    /** æ²¿çº¿çæ³çº¿æ¹åæ¾ç½®æ ç­¾ã */
    NORMAL: "ALONG_LINE_NORMAL",
    /** ä»ä¸å°ä¸ï¼ä»å·¦å°å³æ¾ç½®ã */
    LB_TO_RT: "LEFT_BOTTOM_TO_RIGHT_TOP",
    /** ä»ä¸å°ä¸ï¼ä»å·¦å°å³æ¾ç½®ã */
    LT_TO_RB: "LEFT_TOP_TO_RIGHT_BOTTOM",
    /** ä»ä¸å°ä¸ï¼ä»å³å°å·¦æ¾ç½®ã */
    RB_TO_LT: "RIGHT_BOTTOM_TO_LEFT_TOP",
    /** ä»ä¸å°ä¸ï¼ä»å³å°å·¦æ¾ç½®ã */
    RT_TO_LB: "RIGHT_TOP_TO_LEFT_BOTTOM"
};


/**
 * @enum LabelBackShape
 * @memberOf SuperMap
 * @description  æ ç­¾ä¸é¢å¾ä¸­æ ç­¾èæ¯çå½¢ç¶æä¸¾ã
 * @type {string}
 */
var LabelBackShape = SuperMap.LabelBackShape = {
    /** è±å½¢èæ¯ï¼å³æ ç­¾èæ¯çå½¢ç¶ä¸ºè±å½¢ã */
    DIAMOND: "DIAMOND",
    /** æ¤­åå½¢èæ¯ï¼å³æ ç­¾èæ¯çè¡ç¶ä¸ºæ¤­åå½¢ã */
    ELLIPSE: "ELLIPSE",
    /** ç¬¦å·èæ¯ï¼å³æ ç­¾èæ¯çå½¢ç¶ä¸ºè®¾å®çç¬¦å·ã */
    MARKER: "MARKER",
    /** ç©ºèæ¯ï¼å³ä¸ä½¿ç¨ä»»ä½å½¢ç¶ä½ä¸ºæ ç­¾çèæ¯ã */
    NONE: "NONE",
    /** ç©å½¢èæ¯ï¼å³æ ç­¾èæ¯çå½¢ç¶ä¸ºç©å½¢ã */
    RECT: "RECT",
    /** åè§ç©å½¢èæ¯ï¼å³æ ç­¾èæ¯çå½¢ç¶ä¸ºåè§ç©å½¢ã */
    ROUNDRECT: "ROUNDRECT",
    /** ä¸è§å½¢èæ¯ï¼å³æ ç­¾èæ¯çå½¢ç¶ä¸ºä¸è§å½¢ã */
    TRIANGLE: "TRIANGLE"
};


/**
 * @enum LabelOverLengthMode
 * @memberOf SuperMap
 * @description  æ ç­¾ä¸é¢å¾ä¸­è¶é¿æ ç­¾çå¤çæ¨¡å¼æä¸¾ã
 * @type {string}
 */
var LabelOverLengthMode = SuperMap.LabelOverLengthMode = {
    /** æ¢è¡æ¾ç¤ºã */
    NEWLINE: "NEWLINE",
    /** å¯¹è¶é¿æ ç­¾ä¸è¿è¡å¤çã */
    NONE: "NONE",
    /** çç¥è¶åºé¨åã */
    OMIT: "OMIT"
};


/**
 * @enum DirectionType
 * @memberOf SuperMap
 * @description  ç½ç»åæä¸­æ¹åæä¸¾ã
 * å¨è¡é©¶å¼å¯¼å­é¡¹ä¸­ä½¿ç¨ã
 * @type {string}
 */
var DirectionType = SuperMap.DirectionType = {
    /** ä¸ã */
    EAST: "EAST",
    /** æ æ¹åã */
    NONE: "NONE",
    /** åã */
    NORTH: "NORTH",
    /** åã */
    SOURTH: "SOURTH",
    /** è¥¿ã */
    WEST: "WEST"
};



/**
 * @enum SideType
 * @memberOf SuperMap
 * @description  è¡é©¶ä½ç½®æä¸¾ã
 * è¡¨ç¤ºå¨è¡é©¶å¨è·¯çå·¦è¾¹ãå³è¾¹æèè·¯ä¸çæä¸¾,è¯¥ç±»ç¨å¨è¡é©¶å¯¼å¼å­é¡¹ç±»ä¸­ã
 * @type {string}
 */
var SideType = SuperMap.SideType = {
    /** è·¯çå·¦ä¾§ã */
    LEFT: "LEFT",
    /** å¨è·¯ä¸ï¼å³è·¯çä¸­é´ï¼ã */
    MIDDLE: "MIDDLE",
    /** æ æå¼ã */
    NONE: "NONE",
    /** è·¯çå³ä¾§ã */
    RIGHT: "RIGHT"
};


/**
 * @enum SupplyCenterType
 * @memberOf SuperMap
 * @description  èµæºä¾ç»ä¸­å¿ç±»åæä¸¾ã
 * è¯¥æä¸¾å®ä¹äºç½ç»åæä¸­èµæºä¸­å¿ç¹çç±»åï¼ä¸»è¦ç¨äºèµæºåéåéåååºã
 * èµæºä¾ç»ä¸­å¿ç¹çç±»ååæ¬éä¸­å¿ï¼åºå®ä¸­å¿åå¯éä¸­å¿ãåºå®ä¸­å¿ç¨äºèµæºåéåæï¼ åºå®ä¸­å¿åå¯éä¸­å¿ç¨äºéååæï¼éä¸­å¿å¨ä¸¤ç§ç½ç»åææ¶é½ä¸äºèèã
 * @type {string}
 */
var SupplyCenterType = SuperMap.SupplyCenterType = {
    /** åºå®ä¸­å¿ç¹ã */
    FIXEDCENTER: "FIXEDCENTER",
    /** éä¸­å¿ç¹ã */
    NULL: "NULL",
    /** å¯éä¸­å¿ç¹ã */
    OPTIONALCENTER: "OPTIONALCENTER"
};


/**
 * @enum TurnType
 * @memberOf SuperMap
 * @description  è½¬å¼¯æ¹åæä¸¾ã
 * ç¨å¨è¡é©¶å¼å¯¼å­é¡¹ç±»ä¸­ï¼è¡¨ç¤ºè½¬å¼¯çæ¹åã
 * @type {string}
 */
var TurnType = SuperMap.TurnType = {
    /** ååç´è¡ã */
    AHEAD: "AHEAD",
    /** æå¤´ã */
    BACK: "BACK",
    /** ç»ç¹ï¼ä¸æå¼¯ã */
    END: "END",
    /** å·¦è½¬å¼¯ã */
    LEFT: "LEFT",
    /** æ æå¼ã */
    NONE: "NONE",
    /** å³è½¬å¼¯ã */
    RIGHT: "RIGHT"
};


/**
 * @enum BufferEndType
 * @memberOf SuperMap
 * @description  ç¼å²åºåæBufferEndç±»åã
 * @type {string}
 */
var BufferEndType = SuperMap.BufferEndType = {
    /** FLAT */
    FLAT: "FLAT",
    /** ROUND */
    ROUND: "ROUND"
};

/**
 * @enum OverlayOperationType
 * @memberOf SuperMap
 * @description  å å åæç±»åæä¸¾ã
 * @type {string}
 */
var OverlayOperationType = SuperMap.OverlayOperationType = {
    /** æä½æ°æ®éï¼å ä½å¯¹è±¡ï¼è£åªè¢«æä½æ°æ®éï¼å ä½å¯¹è±¡ï¼ã */
    CLIP: "CLIP",
    /** å¨è¢«æä½æ°æ®éï¼å ä½å¯¹è±¡ï¼ä¸æ¦é¤æä¸æä½æ°æ®éï¼å ä½å¯¹è±¡ï¼ç¸éåçé¨åãã */
    ERASE: "ERASE",
    /**å¯¹è¢«æä½æ°æ®éï¼å ä½å¯¹è±¡ï¼è¿è¡åä¸æä½ï¼å³æä½æ§è¡åï¼è¢«æä½æ°æ®éï¼å ä½å¯¹è±¡ï¼åå«æ¥èªæä½æ°æ®éï¼å ä½å¯¹è±¡ï¼çå ä½å½¢ç¶ã */
    IDENTITY: "IDENTITY",
    /** å¯¹ä¸¤ä¸ªæ°æ®éï¼å ä½å¯¹è±¡ï¼æ±äº¤ï¼è¿åä¸¤ä¸ªæ°æ®éï¼å ä½å¯¹è±¡ï¼çäº¤éã */
    INTERSECT: "INTERSECT",
    /** å¯¹ä¸¤ä¸ªé¢æ°æ®éï¼å ä½å¯¹è±¡ï¼è¿è¡åå¹¶æä½ãã */
    UNION: "UNION",
    /** å¯¹ä¸¤ä¸ªé¢æ°æ®éï¼å ä½å¯¹è±¡ï¼è¿è¡æ´æ°æä½ã */
    UPDATE: "UPDATE",
    /** å¯¹ä¸¤ä¸ªé¢æ°æ®éï¼å ä½å¯¹è±¡ï¼è¿è¡å¯¹ç§°å·®æä½ã */
    XOR: "XOR"
};


/**
 * @enum OutputType
 * @memberOf SuperMap
 * @description  åå¸å¼åæè¾åºç±»åæä¸¾ã
 * @type {string}
 */
var OutputType = SuperMap.OutputType = {
    /** INDEXEDHDFS */
    INDEXEDHDFS: "INDEXEDHDFS",
    /** UDB */
    UDB: "UDB",
    /** MONGODB */
    MONGODB: "MONGODB",
    /** PG */
    PG: "PG"
};


/**
 * @enum SmoothMethod
 * @memberOf SuperMap
 * @description  åæ»æ¹æ³æä¸¾ã
 * ç¨äºä»Grid æDEMæ°æ®çæç­å¼çº¿æç­å¼é¢æ¶å¯¹ç­å¼çº¿æèç­å¼é¢çè¾¹ççº¿è¿è¡å¹³æ»å¤ççæ¹æ³ã
 * @type {string}
 */
var SmoothMethod = SuperMap.SmoothMethod = {
    /** B æ ·æ¡æ³ã */
    BSPLINE: "BSPLINE",
    /** ç£¨è§æ³ã */
    POLISH: "POLISH"
};

/**
 * @enum SurfaceAnalystMethod
 * @memberOf SuperMap
 * @description  è¡¨é¢åææ¹æ³æä¸¾ã
 * éè¿å¯¹æ°æ®è¿è¡è¡¨é¢åæï¼è½å¤ææåå§æ°æ®æåå«çä¿¡æ¯ï¼ä½¿æäºç»èææ¾åï¼æäºåæã
 * @type {string}
 */
var SurfaceAnalystMethod = SuperMap.SurfaceAnalystMethod = {
    /** ç­å¼çº¿æåã */
    ISOLINE: "ISOLINE",
    /** ç­å¼é¢æåã */
    ISOREGION: "ISOREGION"
};

/**
 * @enum DataReturnMode
 * @memberOf SuperMap
 * @description  æ°æ®è¿åæ¨¡å¼æä¸¾ã
 * è¯¥æä¸¾ç¨äºæå®ç©ºé´åæè¿åç»ææ¨¡å¼,åå«è¿åæ°æ®éæ è¯åè®°å½éãåªè¿åæ°æ®éæ è¯(æ°æ®éåç§°@æ°æ®æºåç§°)ååªè¿åè®°å½éä¸ç§æ¨¡å¼ã
 * @type {string}
 */
var DataReturnMode = SuperMap.DataReturnMode = {
    /** è¿åç»ææ°æ®éæ è¯(æ°æ®éåç§°@æ°æ®æºåç§°)åè®°å½éï¼RecordSetï¼ã */
    DATASET_AND_RECORDSET: "DATASET_AND_RECORDSET",
    /** åªè¿åæ°æ®éæ è¯ï¼æ°æ®éåç§°@æ°æ®æºåç§°ï¼ã */
    DATASET_ONLY: "DATASET_ONLY",
    /** åªè¿åè®°å½éï¼RecordSetï¼ã */
    RECORDSET_ONLY: "RECORDSET_ONLY"
};

/**
 * @enum EditType
 * @memberOf SuperMap
 * @description  è¦ç´ éæ´æ°æ¨¡å¼æä¸¾ã
 * è¯¥æä¸¾ç¨äºæå®æ°æ®æå¡ä¸­è¦ç´ éæ´æ°æ¨¡å¼,åå«æ·»å è¦ç´ éãæ´æ°è¦ç´ éåå é¤è¦ç´ éã
 * @type {string}
 */
var EditType = SuperMap.EditType = {
    /** å¢å æä½ã */
    ADD: "add",
    /** ä¿®æ¹æä½ã */
    UPDATE: "update",
    /** å é¤æä½ã */
    DELETE: "delete"
};


/**
 * @enum TransferTactic
 * @memberOf SuperMap
 * @description  å¬äº¤æ¢ä¹ç­ç¥æä¸¾ã
 * è¯¥æä¸¾ç¨äºæå®å¬äº¤æå¡ä¸­è¦ç´ éæ´æ°æ¨¡å¼,åå«æ·»å è¦ç´ éãæ´æ°è¦ç´ éåå é¤è¦ç´ éã
 * @type {string}
 */
var TransferTactic = SuperMap.TransferTactic = {
    /** æ¶é´ç­ã */
    LESS_TIME: "LESS_TIME",
    /** å°æ¢ä¹ã */
    LESS_TRANSFER: "LESS_TRANSFER",
    /** å°æ­¥è¡ã */
    LESS_WALK: "LESS_WALK",
    /** è·ç¦»æç­ã */
    MIN_DISTANCE: "MIN_DISTANCE"
};


/**
 * @enum TransferPreference
 * @memberOf SuperMap
 * @description  å¬äº¤æ¢ä¹ç­ç¥æä¸¾ã
 * è¯¥æä¸¾ç¨äºæå®äº¤éæ¢ä¹æå¡ä¸­è®¾ç½®å°éä¼åãå¬äº¤ä¼åãä¸ä¹å°éãæ åå¥½ç­åå¥½è®¾ç½®ã
 * @type {string}
 */
var TransferPreference = SuperMap.TransferPreference = {
    /** å¬äº¤æ±½è½¦ä¼åã */
    BUS: "BUS",
    /** å°éä¼åã */
    SUBWAY: "SUBWAY",
    /** ä¸ä¹åå°éã */
    NO_SUBWAY: "NO_SUBWAY",
    /** æ ä¹è½¦åå¥½ã */
    NONE: "NONE"
};


/**
 * @enum GridType
 * @memberOf SuperMap
 * @description  å°å¾èæ¯æ ¼ç½ç±»åæä¸¾ã
 * @type {string}
 */
var GridType = SuperMap.GridType = {
    /** åå­åä¸ã */
    CROSS: "CROSS",
    /** ç½æ ¼çº¿ã */
    GRID: "GRID",
    /** ç¹ã */
    POINT: "POINT"
};


/**
 * @enum ColorSpaceType
 * @memberOf SuperMap
 * @description  è²å½©ç©ºé´æä¸¾ã
 * ç±äºæè²åççä¸åï¼å³å®äºæ¾ç¤ºå¨ãæå½±ä»ªè¿ç±»é è²åç´æ¥åæé¢è²çé¢è²è®¾å¤åæå°æºã
 * å°å·æºè¿ç±»é ä½¿ç¨é¢æçå°å·è®¾å¤å¨çæé¢è²æ¹å¼ä¸çåºå«ã
 * éå¯¹ä¸è¿°ä¸åæè²æ¹å¼ï¼SuperMap æä¾ä¸¤ç§è²å½©ç©ºé´ï¼
 * åå«ä¸º RGB å CMYKãRGB ä¸»è¦ç¨äºæ¾ç¤ºç³»ç»ä¸­ï¼CMYK ä¸»è¦ç¨äºå°å·ç³»ç»ä¸­ã
 * @type {string}
 */
var ColorSpaceType = SuperMap.ColorSpaceType = {
    /** è¯¥ç±»åä¸»è¦å¨å°å·ç³»ç»ä½¿ç¨ã */
    CMYK: "CMYK",
    /** è¯¥ç±»åä¸»è¦å¨æ¾ç¤ºç³»ç»ä¸­ä½¿ç¨ã */
    RGB: "RGB"
};

/**
 * @enum LayerType
 * @memberOf SuperMap
 * @description  å¾å±ç±»åã
 * @type {string}
 */
var LayerType = SuperMap.LayerType = {
    /** SuperMap UGC ç±»åå¾å±ãå¦ç¢éå¾å±ãæ æ ¼(Grid)å¾å±ãå½±åå¾å±ãã */
    UGC: "UGC",
    /** WMS å¾å±ã */
    WMS: "WMS",
    /** WFS å¾å±ã */
    WFS: "WFS",
    /** èªå®ä¹å¾å±ã */
    CUSTOM: "CUSTOM"
};


/**
 * @enum UGCLayerType
 * @memberOf SuperMap
 * @description  UGCå¾å±ç±»åã
 * @type {string}
 */
var UGCLayerType = SuperMap.UGCLayerType = {
    /** ä¸é¢å¾å±ã */
    THEME: "THEME",
    /** ç¢éå¾å±ã */
    VECTOR: "VECTOR",
    /** æ æ ¼å¾å±ãã */
    GRID: "GRID",
    /** å½±åå¾å±ã */
    IMAGE: "IMAGE"
};


/**
 * @enum StatisticMode
 * @memberOf SuperMap
 * @description  å­æ®µç»è®¡æ¹æ³ç±»åã
 * @type {string}
 */
var StatisticMode = SuperMap.StatisticMode = {
    /** ç»è®¡æéå­æ®µçå¹³åå¼ã */
    AVERAGE: "AVERAGE",
    /** ç»è®¡æéå­æ®µçæå¤§å¼ã */
    MAX: "MAX",
    /** ç»è®¡æéå­æ®µçæå°å¼ã */
    MIN: "MIN",
    /** ç»è®¡æéå­æ®µçæ åå·® */
    STDDEVIATION: "STDDEVIATION",
    /** ç»è®¡æéå­æ®µçæ»åã */
    SUM: "SUM",
    /** ç»è®¡æéå­æ®µçæ¹å·®ã */
    VARIANCE: "VARIANCE"
};


/**
 * @enum PixelFormat
 * @memberOf SuperMap
 * @description  æ æ ¼ä¸å½±åæ°æ®å­å¨çåç´ æ ¼å¼æä¸¾ã
 * @type {string}
 */
var PixelFormat = SuperMap.PixelFormat = {
    /** æ¯ä¸ªååç¨16ä¸ªæ¯ç¹(å³2ä¸ªå­è)è¡¨ç¤ºã */
    BIT16: "BIT16",
    /** æ¯ä¸ªååç¨32ä¸ªæ¯ç¹(å³4ä¸ªå­è)è¡¨ç¤ºã */
    BIT32: "BIT32",
    /** æ¯ä¸ªååç¨64ä¸ªæ¯ç¹(å³8ä¸ªå­è)è¡¨ç¤ºï¼åªæä¾ç»æ æ ¼æ°æ®éä½¿ç¨ã */
    BIT64: "BIT64",
    /** æ¯ä¸ªååç¨4ä¸ªå­èæ¥è¡¨ç¤ºï¼åªæä¾ç»æ æ ¼æ°æ®éä½¿ç¨ã */
    SINGLE: "SINGLE",
    /** æ¯ä¸ªååç¨8ä¸ªå­èæ¥è¡¨ç¤ºï¼åªæä¾ç»æ æ ¼æ°æ®éä½¿ç¨ã */
    DOUBLE: "DOUBLE",
    /** æ¯ä¸ªååç¨1ä¸ªæ¯ç¹è¡¨ç¤ºã */
    UBIT1: "UBIT1",
    /** æ¯ä¸ªååç¨4ä¸ªæ¯ç¹æ¥è¡¨ç¤ºã */
    UBIT4: "UBIT4",
    /** æ¯ä¸ªååç¨8ä¸ªæ¯ç¹(å³1ä¸ªå­è)æ¥è¡¨ç¤ºã */
    UBIT8: "UBIT8",
    /** æ¯ä¸ªååç¨24ä¸ªæ¯ç¹(å³3ä¸ªå­è)æ¥è¡¨ç¤ºã */
    UBIT24: "UBIT24",
    /** æ¯ä¸ªååç¨32ä¸ªæ¯ç¹(å³4ä¸ªå­è)æ¥è¡¨ç¤ºã */
    UBIT32: "UBIT32"
};


/**
 * @enum SearchMode
 * @memberOf SuperMap
 * @description  åææ¶ä½¿ç¨çæ ·æ¬ç¹çæ¥æ¾æ¹å¼æä¸¾
 * @type {string}
 */
var SearchMode = SuperMap.SearchMode = {
    /** ä½¿ç¨ KDTREE çåºå®ç¹æ°æ¹å¼æ¥æ¾åä¸åæåæçç¹ã */
    KDTREE_FIXED_COUNT: "KDTREE_FIXED_COUNT",
    /** ä½¿ç¨ KDTREE çå®é¿æ¹å¼æ¥æ¾åä¸åæåæçç¹ã */
    KDTREE_FIXED_RADIUS: "KDTREE_FIXED_RADIUS",
    /** ä¸è¿è¡æ¥æ¾ï¼ä½¿ç¨ææçè¾å¥ç¹è¿è¡åæåæã */
    NONE: "NONE",
    /** ä½¿ç¨ QUADTREE æ¹å¼æ¥æ¾åä¸åæåæçç¹ï¼ä»å¯¹æ ·æ¡ï¼RBFï¼æå¼åæ®éååéï¼Krigingï¼æç¨ã */
    QUADTREE: "QUADTREE"
};


/**
 * @enum InterpolationAlgorithmType
 * @memberOf SuperMap
 * @description  æå¼åæçç®æ³çç±»å
 * @type {string}
 */
var InterpolationAlgorithmType = SuperMap.InterpolationAlgorithmType = {
    /** æ®éååéæå¼æ³ã */
    KRIGING: "KRIGING",
    /** ç®åååéæå¼æ³ã */
    SimpleKriging: "SimpleKriging",
    /** æ³ååéæå¼æ³ã */
    UniversalKriging: "UniversalKriging"
};


/**
 * @enum VariogramMode
 * @memberOf SuperMap
 * @description  ååéï¼Krigingï¼æå¼æ¶çååå½æ°ç±»åæä¸¾
 * @type {string}
 */
var VariogramMode = SuperMap.VariogramMode = {
    /** ææ°å½æ°ã */
    EXPONENTIAL: "EXPONENTIAL",
    /** é«æ¯å½æ°ã */
    GAUSSIAN: "GAUSSIAN",
    /** çåå½æ°ã */
    SPHERICAL: "SPHERICAL"
};


/**
 * @enum Exponent
 * @memberOf SuperMap
 * @description  å®ä¹äºæ³ååéï¼UniversalKrigingï¼æå¼æ¶æ ·ç¹æ°æ®ä¸­è¶å¿é¢æ¹ç¨çé¶æ°
 * @type {string}
 */
var Exponent = SuperMap.Exponent = {
    /** é¶æ°ä¸º1ã */
    EXP1: "EXP1",
    /** é¶æ°ä¸º2ã */
    EXP2: "EXP2"
};


/**
 * @enum ClientType
 * @memberOf SuperMap
 * @description tokenç³è¯·çå®¢æ·ç«¯æ è¯ç±»å
 * @type {string}
 */
var ClientType = SuperMap.ClientType = {
    /** æå®ç IP å°åã */
    IP: "IP",
    /** æå®ç URLã */
    REFERER: "Referer",
    /** åéç³è¯·ä»¤çè¯·æ±çå®¢æ·ç«¯ IPã */
    REQUESTIP: "RequestIP",
    /** ä¸åä»»ä½éªè¯ã */
    NONE: "NONE",
    /** SERVERã */
    SERVER: "SERVER",
    /** WEBã */
    WEB: "WEB"
};


/**
 * @enum ChartType
 * @memberOf SuperMap
 * @description å®¢æ·ç«¯ä¸é¢å¾å¾è¡¨ç±»å
 * @type {string}
 */
var ChartType = SuperMap.ChartType = {
    /** æ±ç¶å¾ã */
    BAR: "Bar",
    /** ä¸ç»´æ±ç¶å¾ã */
    BAR3D: "Bar3D",
    /** åå½¢å¾ã */
    CIRCLE: "Circle",
    /** é¥¼å¾ã */
    PIE: "Pie",
    /** æ£ç¹å¾ã */
    POINT: "Point",
    /** æçº¿å¾ã */
    LINE: "Line",
    /** ç¯ç¶å¾ã */
    RING: "Ring"
};


/**
 * @enum ClipAnalystMode
 * @memberOf SuperMap
 * @description  è£åªåææ¨¡å¼
 * @type {string}
 */
var ClipAnalystMode = SuperMap.ClipAnalystMode = {
    /** CLIPã */
    CLIP: "clip",
    /** INTERSECTã */
    INTERSECT: "intersect"
};

/**
 * @enum AnalystAreaUnit
 * @memberOf SuperMap
 * @description åå¸å¼åæé¢ç§¯åä½
 * @type {string}
 */
var AnalystAreaUnit = SuperMap.AnalystAreaUnit = {
    /** å¹³æ¹ç±³ã */
    "SQUAREMETER": "SquareMeter",
    /** å¹³æ¹åç±³ã */
    "SQUAREKILOMETER": "SquareKiloMeter",
    /** å¬é¡·ã */
    "HECTARE": "Hectare",
    /** å¬äº©ã */
    "ARE": "Are",
    /** è±äº©ã */
    "ACRE": "Acre",
    /** å¹³æ¹è±å°ºã */
    "SQUAREFOOT": "SquareFoot",
    /** å¹³æ¹ç ã */
    "SQUAREYARD": "SquareYard",
    /** å¹³æ¹è±éã */
    "SQUAREMILE": "SquareMile"
};

/**
 * @enum AnalystSizeUnit
 * @memberOf SuperMap
 * @description åå¸å¼åæåä½
 * @type {string}
 */
var AnalystSizeUnit = SuperMap.AnalystSizeUnit = {
    /** ç±³ã */
    "METER": "Meter",
    /** åç±³ã */
    "KILOMETER": "Kilometer",
    /** ç ã */
    "YARD": "Yard",
    /** è±å°ºã */
    "FOOT": "Foot",
    /** è±éã */
    "MILE": "Mile"
};


/**
 * @enum StatisticAnalystMode
 * @memberOf SuperMap
 * @description åå¸å¼åæç»è®¡æ¨¡å¼
 * @type {string}
 */
var StatisticAnalystMode = SuperMap.StatisticAnalystMode = {
    /** ç»è®¡æéå­æ®µçæå¤§å¼ã */
    "MAX": "max",
    /** ç»è®¡æéå­æ®µçæå°å¼ã */
    "MIN": "min",
    /** ç»è®¡æéå­æ®µçå¹³åå¼ã */
    "AVERAGE": "average",
    /** ç»è®¡æéå­æ®µçæ»åã */
    "SUM": "sum",
    /** ç»è®¡æéå­æ®µçæ¹å·®ã */
    "VARIANCE": "variance",
    /** ç»è®¡æéå­æ®µçæ åå·® */
    "STDDEVIATION": "stdDeviation"
};

/**
 * @enum SummaryType
 * @memberOf SuperMap
 * @description åå¸å¼åæèåç±»å
 * @type {string}
 */
var SummaryType = SuperMap.SummaryType = {
    /** æ ¼ç½èåã */
    "SUMMARYMESH": "SUMMARYMESH",
    /** å¤è¾¹å½¢èåã */
    "SUMMARYREGION": "SUMMARYREGION"
};

/**
 * @enum TopologyValidatorRule
 * @memberOf SuperMap
 * @description  æææ£æ¥æ¨¡å¼æä¸¾ãè¯¥ç±»å®ä¹äºæææ£æ¥æä½æ¨¡å¼å¸¸éã
 * @type {string}
 */
var TopologyValidatorRule = SuperMap.TopologyValidatorRule = {
    /** é¢åæ éå ï¼ç¨äºå¯¹é¢æ°æ®è¿è¡æææ£æ¥ã */
    REGIONNOOVERLAP: "REGIONNOOVERLAP",
    /** é¢ä¸é¢æ éå ï¼ç¨äºå¯¹é¢æ°æ®è¿è¡æææ£æ¥ã */
    REGIONNOOVERLAPWITH: "REGIONNOOVERLAPWITH",
    /** é¢è¢«é¢åå«ï¼ç¨äºå¯¹é¢æ°æ®è¿è¡æææ£æ¥ã */
    REGIONCONTAINEDBYREGION: "REGIONCONTAINEDBYREGION",
    /** é¢è¢«é¢è¦çï¼ç¨äºå¯¹é¢æ°æ®è¿è¡æææ£æ¥ã */
    REGIONCOVEREDBYREGION: "REGIONCOVEREDBYREGION",
    /** çº¿ä¸çº¿æ éå ï¼ç¨äºå¯¹çº¿æ°æ®è¿è¡æææ£æ¥ã */
    LINENOOVERLAP: "LINENOOVERLAP",
    /** çº¿åæ éå ï¼ç¨äºå¯¹çº¿æ°æ®è¿è¡æææ£æ¥ã */
    LINENOOVERLAPWITH: "LINENOOVERLAPWITH",
    /** ç¹ä¸ç¸åï¼ç¨äºå¯¹ç¹æ°æ®è¿è¡æææ£æ¥ã */
    POINTNOIDENTICAL: "POINTNOIDENTICAL"
};


/**
 * @enum AggregationType
 * @memberOf SuperMap
 * @description  èåæ¥è¯¢æä¸¾ç±»ï¼è¯¥ç±»å®ä¹äºEsæ°æ®æå¡ä¸­èåæ¥è¯¢æ¨¡å¼å¸¸é
 * @type {string}
 */
var AggregationType = SuperMap.AggregationType = {
    /** æ ¼ç½èåç±»åã */
    GEOHASH_GRID: "geohash_grid",
    /** è¿æ»¤èåç±»åã */
    FILTER: "filter"
};


/**
 * @enum AggregationType
 * @memberOf SuperMap
 * @description  èåæ¥è¯¢ä¸­filteræ¥è¯¢æä¸¾ç±»
 * @type {string}
 */
var AggregationQueryBuilderType = SuperMap.AggregationQueryBuilderType = {
    /** èå´æ¥è¯¢ã */
    GEO_BOUNDING_BOX: "geo_bounding_box"
}


/**
 * @enum GetFeatureMode
 * @memberOf SuperMap
 * @description feature æ¥è¯¢æ¹å¼ã
 * @type {string}
 */
var GetFeatureMode = SuperMap.GetFeatureMode = {
    /** éè¿èå´æ¥è¯¢æ¥è·åè¦ç´ ã */
    BOUNDS: "BOUNDS",
    /** éè¿å ä½å¯¹è±¡çç¼å²åºæ¥è·åè¦ç´ ã */
    BUFFER: "BUFFER",
    /** éè¿ ID æ¥è·åè¦ç´ ã */
    ID: "ID",
    /** éè¿ç©ºé´æ¥è¯¢æ¨¡å¼æ¥è·åè¦ç´ ã */
    SPATIAL: "SPATIAL",
    /** éè¿ SQL æ¥è¯¢æ¥è·åè¦ç´ ã */
    SQL: 'SQL'
}

// CONCATENATED MODULE: ./src/common/iServer/DatasourceConnectionInfo.js
/* CopyrightÂ© 2000 - 2019 SuperMap Software Co.Ltd. All rights reserved.
 * This program are made available under the terms of the Apache License, Version 2.0
 * which accompanies this distribution and is available at http://www.apache.org/licenses/LICENSE-2.0.html.*/


 // eslint-disable-line no-unused-vars

/**
 * @class SuperMap.DatasourceConnectionInfo
 * @category  iServer Data
 * @classdesc æ°æ®æºè¿æ¥ä¿¡æ¯ç±»ãè¯¥ç±»åæ¬äºè¿è¡æ°æ®æºè¿æ¥çææä¿¡æ¯ï¼å¦æè¦è¿æ¥çæå¡å¨åç§°ãæ°æ®åºåç§°ãç¨æ·åä»¥åå¯ç ç­ã
 *            å½ä¿å­ä¸ºå·¥ä½ç©ºé´æ¶ï¼ å·¥ä½ç©ºé´ä¸­çæ°æ®æºçè¿æ¥ä¿¡æ¯é½å°å­å¨å°å·¥ä½ç©ºé´æä»¶ä¸­ãå¯¹äºä¸åç±»åçæ°æ®æºï¼å¶è¿æ¥ä¿¡æ¯ææåºå«ã
 *            æä»¥å¨ä½¿ ç¨è¯¥ç±»æåå«çæåæ¶ï¼è¯·æ³¨æè¯¥æåæéç¨çæ°æ®æºç±»åãå¯¹äºä»æ°æ®æºå¯¹è±¡ä¸­è¿åçæ°æ®è¿æ¥ä¿¡æ¯å¯¹è±¡ï¼åªæ connect æ¹æ³å¯ä»¥è¢«ä¿®æ¹ï¼
 *            å¶ä»åå®¹æ¯ä¸å¯ä»¥è¢«ä¿®æ¹çãå¯¹äºç¨æ·åå»ºçæ°æ®æºè¿æ¥ä¿¡æ¯å¯¹è±¡ï¼å¶åå®¹é½å¯ä»¥ä¿®æ¹ã
 * @category iServer Data
 * @param {Object} options - åæ°ã 
 * @param {string} options.alias - æ°æ®æºå«åã 
 * @param {string} options.dataBase - æ°æ®æºè¿æ¥çæ°æ®åºåã 
 * @param {boolean} [options.connect] - æ°æ®æºæ¯å¦èªå¨è¿æ¥æ°æ®ã 
 * @param {string} [options.driver] - ä½¿ç¨ ODBC(Open Database Connectivityï¼å¼æ¾æ°æ®åºäºè¿)çæ°æ®åºçé©±å¨ç¨åºåã 
 * @param {SuperMap.EngineType} [options.engineType] - æ°æ®æºè¿æ¥çå¼æç±»åã 
 * @param {boolean} [options.exclusive] - æ¯å¦ä»¥ç¬å æ¹å¼æå¼æ°æ®æºã 
 * @param {boolean} [options.OpenLinkTable] - æ¯å¦ææ°æ®åºä¸­çå¶ä»é SuperMap æ°æ®è¡¨ä½ä¸º LinkTable æå¼ã 
 * @param {string} [options.password] - ç»å½æ°æ®æºè¿æ¥çæ°æ®åºææä»¶çå¯ç ã 
 * @param {boolean} [options.readOnly] - æ¯å¦ä»¥åªè¯»æ¹å¼æå¼æ°æ®æºã 
 * @param {string} [options.server] - æ°æ®åºæå¡å¨åæ SDB æä»¶åã 
 * @param {string} [options.user] - ç»å½æ°æ®åºçç¨æ·åã 
 */
class DatasourceConnectionInfo_DatasourceConnectionInfo {


    constructor(options) {

        /**
         * @member {string} SuperMap.DatasourceConnectionInfo.prototype.alias
         * @description æ°æ®æºå«åã
         */
        this.alias = null;

        /**
         * @member {boolean} [SuperMap.DatasourceConnectionInfo.prototype.connect]
         * @description æ°æ®æºæ¯å¦èªå¨è¿æ¥æ°æ®ã
         */
        this.connect = null;

        /**
         * @member {string} SuperMap.DatasourceConnectionInfo.prototype.dataBase
         * @description æ°æ®æºè¿æ¥çæ°æ®åºåã
         */
        this.dataBase = null;

        /**
         * @member {string} [SuperMap.DatasourceConnectionInfo.prototype.driver]
         * @description ä½¿ç¨ ODBC(Open Database Connectivityï¼å¼æ¾æ°æ®åºäºè¿) çæ°æ®åºçé©±å¨ç¨åºåã
         * å¶ä¸­ï¼å¯¹äº SQL Server æ°æ®åºä¸ iServer åå¸ç WMTS æå¡ï¼æ­¤ä¸ºå¿è®¾åæ°ã
         * å¯¹äº SQL Server æ°æ®åºï¼å®ä½¿ç¨ ODBC è¿æ¥ï¼æè®¾ç½®çé©±å¨ç¨åºåä¸º "SQL Server" æ "SQL Native Client"ï¼
         * å¯¹äº iServer åå¸ç WMTS æå¡ï¼è®¾ç½®çé©±å¨åç§°ä¸º "WMTS"ã
         */
        this.driver = null;

        /**
         * @member {SuperMap.EngineType} [SuperMap.DatasourceConnectionInfo.prototype.engineType]
         * @description æ°æ®æºè¿æ¥çå¼æç±»åã
         */
        this.engineType = null;

        /**
         * @member {boolean} [SuperMap.DatasourceConnectionInfo.prototype.exclusive]
         * @description æ¯å¦ä»¥ç¬å æ¹å¼æå¼æ°æ®æºã
         */
        this.exclusive = null;

        /**
         * @member {boolean} [SuperMap.DatasourceConnectionInfo.prototype.OpenLinkTable]
         * @description æ¯å¦ææ°æ®åºä¸­çå¶ä»é SuperMap æ°æ®è¡¨ä½ä¸º LinkTable æå¼ã
         */
        this.OpenLinkTable = null;

        /**
         * @member {string} [SuperMap.DatasourceConnectionInfo.prototype.password]
         * @description ç»å½æ°æ®æºè¿æ¥çæ°æ®åºææä»¶çå¯ç ã
         */
        this.password = null;

        /**
         * @member {boolean} [SuperMap.DatasourceConnectionInfo.prototype.readOnly]
         * @description æ¯å¦ä»¥åªè¯»æ¹å¼æå¼æ°æ®æºã
         */
        this.readOnly = null;

        /**
         * @member {string} [SuperMap.DatasourceConnectionInfo.prototype.server]
         * @description æ°æ®åºæå¡å¨åãæä»¶åææå¡å°åã
         * 1.å¯¹äº SDB å UDB æä»¶ï¼ä¸ºå¶æä»¶çç»å¯¹è·¯å¾ãæ³¨æï¼å½ç»å¯¹è·¯å¾çé¿åº¦è¶è¿ UTF-8 ç¼ç æ ¼å¼ç 260 å­èé¿åº¦ï¼è¯¥æ°æ®æºæ æ³æå¼ã
         * 2.å¯¹äº Oracle æ°æ®åºï¼å¶æå¡å¨åä¸ºå¶ TNS æå¡åç§°ã
         * 3.å¯¹äº SQL Server æ°æ®åºï¼å¶æå¡å¨åä¸ºå¶ç³»ç»ç DSN(Database Source Name) åç§°ã
         * 4.å¯¹äº PostgreSQL æ°æ®åºï¼å¶æå¡å¨åä¸º âIP:ç«¯å£å·âï¼é»è®¤çç«¯å£å·æ¯ 5432ã
         * 5.å¯¹äº DB2 æ°æ®åºï¼å·²ç»è¿è¡äºç¼ç®ï¼æä»¥ä¸éè¦è¿è¡æå¡å¨çè®¾ç½®ã
         * 6.å¯¹äº Kingbase æ°æ®åºï¼å¶æå¡å¨åä¸ºå¶ IP å°åã
         * 7.å¯¹äº GoogleMaps æ°æ®æºï¼å¶æå¡å¨å°åï¼é»è®¤è®¾ç½®ä¸º â{@link http://maps.google.com}âï¼ä¸ä¸å¯æ´æ¹ã
         * 8.å¯¹äº SuperMapCould æ°æ®æºï¼ä¸ºå¶æå¡å°åã
         * 9.å¯¹äº MAPWORLD æ°æ®æºï¼ä¸ºå¶æå¡å°åï¼é»è®¤è®¾ç½®ä¸º â{@link http://www.tianditu.cn}âï¼ä¸ä¸å¯æ´æ¹ã
         * 10.å¯¹äº OGC å REST æ°æ®æºï¼ä¸ºå¶æå¡å°åã
         */
        this.server = null;

        /**
         * @member {string} SuperMap.DatasourceConnectionInfo.prototype.user
         * @description ç»å½æ°æ®åºçç¨æ·åã
         */
        this.user = null;

        if (options) {
            Util.extend(this, options);
        }

        this.CLASS_NAME = "SuperMap.DatasourceConnectionInfo";
    }

    /**
     * @function SuperMap.DatasourceConnectionInfo.prototype.destroy
     * @description éæ¾èµæºï¼å°å¼ç¨èµæºçå±æ§ç½®ç©ºã
     */
    destroy() {
        var me = this;
        me.alias = null;
        me.connect = null;
        me.dataBase = null;
        me.driver = null;
        me.engineType = null;
        me.exclusive = null;
        me.OpenLinkTable = null;
        me.password = null;
        me.readOnly = null;
        me.server = null;
        me.user = null;
    }

}

SuperMap.DatasourceConnectionInfo = DatasourceConnectionInfo_DatasourceConnectionInfo;
// CONCATENATED MODULE: ./src/common/iServer/OutputSetting.js
/* CopyrightÂ© 2000 - 2019 SuperMap Software Co.Ltd. All rights reserved.
 * This program are made available under the terms of the Apache License, Version 2.0
 * which accompanies this distribution and is available at http://www.apache.org/licenses/LICENSE-2.0.html.*/





/**
 * @class SuperMap.OutputSetting
 * @category  iServer ProcessingService
 * @classdesc åå¸å¼åæè¾åºç±»åè®¾ç½®ç±»ã
 * @param {Object} options - åæ°ã
 * @param {SuperMap.DatasourceConnectionInfo} options.datasourceInfo - æ°æ®æºè¿æ¥ä¿¡æ¯ã
 * @param {string} [options.datasetName='analystResult'] - ç»ææ°æ®éåç§°ã
 * @param {SuperMap.OutputType} [options.type=SuperMap.OutputType.UDB] - è¾åºç±»åã
 * @param {string} [options.outputPath] - åæç»æè¾åºè·¯å¾ã
 */
class OutputSetting_OutputSetting {

    constructor(options) {

        /**
         * @member {SuperMap.OutputType} SuperMap.OutputSetting.prototype.type
         * @description åå¸å¼åæçè¾åºç±»åã
         */
        this.type = OutputType.UDB;

        /**
         * @member {string} [SuperMap.OutputSetting.prototype.datasetName='analystResult']
         * @description åå¸å¼åæçè¾åºç»ææ°æ®éåç§°ã
         */
        this.datasetName = "analystResult";

        /**
         * @member {SuperMap.DatasourceConnectionInfo} SuperMap.OutputSetting.prototype.datasourceInfo
         * @description åå¸å¼åæçè¾åºç»ææ°æ®æºè¿æ¥ä¿¡æ¯ã
         */
        this.datasourceInfo = null;

        /**
         * @member {string} [SuperMap.OutputSetting.prototype.outputPath]
         * @description åå¸å¼åæçåæç»æè¾åºè·¯å¾ã
         */
        this.outputPath = "";

        Util.extend(this, options);
        this.CLASS_NAME = "SuperMap.OutputSetting";
    }

    /**
     * @function SuperMap.OutputSetting.prototype.destroy
     * @description éæ¾èµæºï¼å°å¼ç¨èµæºçå±æ§ç½®ç©ºã
     */
    destroy() {
        var me = this;
        me.type = null;
        me.datasetName = null;
        me.outputPath = null;
        if (me.datasourceInfo instanceof DatasourceConnectionInfo_DatasourceConnectionInfo) {
            me.datasourceInfo.destroy();
            me.datasourceInfo = null;
        }
    }

}

SuperMap.OutputSetting = OutputSetting_OutputSetting;
// CONCATENATED MODULE: ./src/common/iServer/MappingParameters.js
/* CopyrightÂ© 2000 - 2019 SuperMap Software Co.Ltd. All rights reserved.
 * This program are made available under the terms of the Apache License, Version 2.0
 * which accompanies this distribution and is available at http://www.apache.org/licenses/LICENSE-2.0.html.*/




/**
 * @class SuperMap.MappingParameters
 * @category  iServer ProcessingService
 * @classdesc åæåç»æå¯è§åçåæ°ç±»ã
 * @param {Object} options - åæ°ã
 * @param {Array.<SuperMap.ThemeGridRangeItem>} [options.items] - æ æ ¼åæ®µä¸é¢å¾å­é¡¹æ°ç»ã
 * @param {number} [options.numericPrecision=1] - ç²¾åº¦ï¼æ­¤å­æ®µç¨äºè®¾ç½®åæç»ææ ç­¾ä¸é¢å¾ä¸­æ ç­¾æ°å¼çç²¾åº¦ï¼å¦â1âè¡¨ç¤ºç²¾ç¡®å°å°æ°ç¹çåä¸ä½ã
 * @param {SuperMap.RangeMode} [options.rangeMode=SuperMap.RangeMode.EQUALINTERVAL] - ä¸é¢å¾åæ®µæ¨¡å¼ã
 * @param {number} [options.rangeCount] - ä¸é¢å¾åæ®µä¸ªæ°ã
 * @param {SuperMap.ColorGradientType} [options.colorGradientType=SuperMap.ColorGradientType.YELLOW_RED] - ä¸é¢å¾é¢è²æ¸åæ¨¡å¼ã
 */
class MappingParameters_MappingParameters {

    constructor(options) {

        /**
         * @member {Array.<SuperMap.ThemeGridRangeItem>} [SuperMap.MappingParameters.prototype.items]
         * @description æ æ ¼åæ®µä¸é¢å¾å­é¡¹æ°ç»ã
         */
        this.items = null;

        /**
         * @member {number} [SuperMap.MappingParameters.prototype.numericPrecision=1]
         * @description ç²¾åº¦ï¼æ­¤å­æ®µç¨äºè®¾ç½®åæç»ææ ç­¾ä¸é¢å¾ä¸­æ ç­¾æ°å¼çç²¾åº¦ï¼å¦â1âè¡¨ç¤ºç²¾ç¡®å°å°æ°ç¹çåä¸ä½ã
         */
        this.numericPrecision = 1;

        /**
         * @member {SuperMap.RangeMode} [SuperMap.MappingParameters.prototype.RangeMode=SuperMap.RangeMode.EQUALINTERVAL]
         * @description ä¸é¢å¾åæ®µæ¨¡å¼ã
         */
        this.rangeMode = RangeMode.EQUALINTERVAL;

        /**
         * @member {number} [SuperMap.MappingParameters.prototype.rangeCount]
         * @description ä¸é¢å¾åæ®µä¸ªæ°ã
         */
        this.rangeCount = "";

        /**
         * @member {SuperMap.ColorGradientType} [SuperMap.MappingParameters.prototype.colorGradientType=SuperMap.ColorGradientType.YELLOW_RED]
         * @description ä¸é¢å¾é¢è²æ¸åæ¨¡å¼ã
         */
        this.colorGradientType = ColorGradientType.YELLOW_RED;

        Util.extend(this, options);
        this.CLASS_NAME = "SuperMap.MappingParameters";
    }

    /**
     * @function SuperMap.MappingParameters.prototype.destroy
     * @description éæ¾èµæºï¼å°å¼ç¨èµæºçå±æ§ç½®ç©ºã
     */
    destroy() {
        var me = this;
        if (me.items) {
            if (me.items.length > 0) {
                for (var item in me.items) {
                    me.items[item].destroy();
                    me.items[item] = null;
                }
            }
            me.items = null;
        }
        me.numericPrecision = null;
        me.rangeMode = null;
        me.rangeCount = null;
        me.colorGradientType = null;
    }

}

SuperMap.MappingParameters = MappingParameters_MappingParameters;
// CONCATENATED MODULE: ./src/common/iServer/KernelDensityJobParameter.js
/* CopyrightÂ© 2000 - 2019 SuperMap Software Co.Ltd. All rights reserved.
 * This program are made available under the terms of the Apache License, Version 2.0
 * which accompanies this distribution and is available at http://www.apache.org/licenses/LICENSE-2.0.html.*/







/**
 * @class SuperMap.KernelDensityJobParameter
 * @category iServer ProcessingService DensityAnalyst
 * @classdesc å¯åº¦åæä»»å¡åæ°ç±»ã
 * @param {Object} options - åæ°ã 
 * @param {string} options.datasetName - æ°æ®éåã 
 * @param {string} options.fields - æéç´¢å¼ã 
 * @param {(SuperMap.Bounds|L.Bounds|ol.extent)} [options.query] - åæèå´ã 
 * @param {number} [options.resolution=80] - åè¾¨çã 
 * @param {number} [options.method=0] - åææ¹æ³ã 
 * @param {number} [options.meshType=0] - åæç±»åã 
 * @param {number} [options.radius=300] - åæçå½±ååå¾ã
 * @param {SuperMap.OutputSetting} [options.output] - è¾åºåæ°è®¾ç½®ã
 * @param {SuperMap.MappingParameters} [options.mappingParameters] - åæåç»æå¯è§åçåæ°ç±»ã   
 */
class KernelDensityJobParameter_KernelDensityJobParameter {

    constructor(options) {
        if (!options) {
            return;
        }
        /**
         * @member {string} SuperMap.KernelDensityJobParameter.prototype.datasetName
         * @description æ°æ®éåã
         */
        this.datasetName = "";

        /**
         * @member {SuperMap.Bounds|L.Bounds|ol.extent} [SuperMap.KernelDensityJobParameter.prototype.query]
         * @description åæèå´ã 
         */
        this.query = "";

        /**
         * @member {number} [SuperMap.KernelDensityJobParameter.prototype.resolution=80]
         * @description ç½æ ¼å¤§å°ã
         */
        this.resolution = 80;

        /**
         * @member {number} [SuperMap.KernelDensityJobParameter.prototype.method=0]
         * @description åææ¹æ³ã
         */
        this.method = 0;

        /**
         * @member {number} [SuperMap.KernelDensityJobParameter.prototype.meshType=0]
         * @description åæç±»åã
         */
        this.meshType = 0;

        /**
         * @member {string} SuperMap.KernelDensityJobParameter.prototype.fields
         * @description æéç´¢å¼ã
         */
        this.fields = "";

        /**
         * @member {number} [SuperMap.KernelDensityJobParameter.prototype.radius=300]
         * @description åæçå½±ååå¾ã
         */
        this.radius = 300;

        /**
         * @member {SuperMap.AnalystSizeUnit} [SuperMap.KernelDensityJobParameter.prototype.meshSizeUnit=SuperMap.AnalystSizeUnit.METER]
         * @description ç½æ ¼å¤§å°åä½ã
         */
        this.meshSizeUnit = AnalystSizeUnit.METER;

        /**
         * @member {SuperMap.AnalystSizeUnit} [SuperMap.KernelDensityJobParameter.prototype.radiusUnit=SuperMap.AnalystSizeUnit.METER]
         * @description æç´¢åå¾åä½ã
         */
        this.radiusUnit = AnalystSizeUnit.METER;

        /**
         * @member {SuperMap.AnalystAreaUnit} [SuperMap.KernelDensityJobParameter.prototype.areaUnit=SuperMap.AnalystAreaUnit.SQUAREMILE]
         * @description é¢ç§¯åä½ã
         */
        this.areaUnit = AnalystAreaUnit.SQUAREMILE;

        /**
         * @member {SuperMap.OutputSetting} SuperMap.KernelDensityJobParameter.prototype.output
         * @description è¾åºåæ°è®¾ç½®ç±»
         */
        this.output = null;

        /**
         * @member {SuperMap.MappingParameters} [SuperMap.KernelDensityJobParameter.prototype.mappingParameters]
         * @description åæåç»æå¯è§åçåæ°ç±»ã
         */
        this.mappingParameters = null;

        Util.extend(this, options);

        this.CLASS_NAME = "SuperMap.KernelDensityJobParameter";
    }

    /**
     * @function SuperMap.KernelDensityJobParameter.prototype.destroy
     * @description éæ¾èµæºï¼å°å¼ç¨èµæºçå±æ§ç½®ç©ºã
     */
    destroy() {
        this.datasetName = null;
        this.query = null;
        this.resolution = null;
        this.method = null;
        this.radius = null;
        this.meshType = null;
        this.fields = null;
        this.meshSizeUnit = null;
        this.radiusUnit = null;
        this.areaUnit = null;
        if (this.output instanceof OutputSetting_OutputSetting) {
            this.output.destroy();
            this.output = null;
        }
        if (this.mappingParameters instanceof MappingParameters_MappingParameters) {
            this.mappingParameters.destroy();
            this.mappingParameters = null;
        }
    }

    /**
     * @function SuperMap.KernelDensityJobParameter.toObject
     * @param {SuperMap.KernelDensityJobParameter} kernelDensityJobParameter - å¯åº¦åæä»»å¡åæ°ç±»ã
     * @param {SuperMap.KernelDensityJobParameter} tempObj - å¯åº¦åæä»»å¡åæ°å¯¹è±¡ã
     * @description å°å¯åº¦åæä»»å¡åæ°å¯¹è±¡è½¬æ¢ä¸º JSON å¯¹è±¡ã
     * @returns JSON å¯¹è±¡ã
     */
    static toObject(kernelDensityJobParameter, tempObj) {
        for (var name in kernelDensityJobParameter) {
            if (name === "datasetName") {
                tempObj['input'] = tempObj['input'] || {};
                tempObj['input'][name] = kernelDensityJobParameter[name];
                continue;
            }
            if (name === "output") {
                tempObj['output'] = tempObj['output'] || {};
                tempObj['output'] = kernelDensityJobParameter[name];
                continue;
            }

            tempObj['analyst'] = tempObj['analyst'] || {};
            if (name === 'query' && kernelDensityJobParameter[name]) {
                tempObj['analyst'][name] = kernelDensityJobParameter[name].toBBOX();
            } else {
                tempObj['analyst'][name] = kernelDensityJobParameter[name];
            }
            if (name === 'mappingParameters') {
                tempObj['analyst'][name] = tempObj['analyst'][name] || {};
                tempObj['analyst']['mappingParameters'] = kernelDensityJobParameter[name];
            }
        }
    }
}
SuperMap.KernelDensityJobParameter = KernelDensityJobParameter_KernelDensityJobParameter;
// CONCATENATED MODULE: ./src/common/iServer/SingleObjectQueryJobsParameter.js
/* CopyrightÂ© 2000 - 2019 SuperMap Software Co.Ltd. All rights reserved.
 * This program are made available under the terms of the Apache License, Version 2.0
 * which accompanies this distribution and is available at http://www.apache.org/licenses/LICENSE-2.0.html.*/






/**
 * @class SuperMap.SingleObjectQueryJobsParameter
 * @category  iServer ProcessingService Query
 * @classdesc åå¯¹è±¡ç©ºé´æ¥è¯¢åæä»»å¡åæ°ç±»ã
 * @param {Object} options - åæ°ã
 * @param {string} options.datasetName - æ°æ®éåã
 * @param {string} options.datasetQuery - æ¥è¯¢å¯¹è±¡æå¨çæ°æ®éåç§°ã
 * @param {SuperMap.SpatialQueryMode} [options.mode=SuperMap.SpatialQueryMode.CONTAIN] - ç©ºé´æ¥è¯¢æ¨¡å¼ã
 * @param {SuperMap.OutputSetting} [options.output] - è¾åºåæ°è®¾ç½®ã
 * @param {SuperMap.MappingParameters} [options.mappingParameters] - åæåç»æå¯è§åçåæ°ç±»ã   
 */
class SingleObjectQueryJobsParameter_SingleObjectQueryJobsParameter {

    constructor(options) {
        if (!options) {
            return;
        }
        /**
         * @member {string} SuperMap.SingleObjectQueryJobsParameter.prototype.datasetName
         * @description æ°æ®éåã
         */
        this.datasetName = "";

        /**
         * @member {string} SuperMap.SingleObjectQueryJobsParameter.prototype.datasetQuery
         * @description æ¥è¯¢å¯¹è±¡æå¨çæ°æ®éåç§°ã
         */
        this.datasetQuery = "";

        /**
         * @member {string} SuperMap.SingleObjectQueryJobsParameter.prototype.geometryQuery
         * @description æ¥è¯¢å¯¹è±¡æå¨çå ä½å¯¹è±¡ã
         */
        this.geometryQuery = "";

        /**
         * @member {SuperMap.SpatialQueryMode} [SuperMap.SingleObjectQueryJobsParameter.prototype.mode=SuperMap.SpatialQueryMode.CONTAIN]
         * @description ç©ºé´æ¥è¯¢æ¨¡å¼ ã
         */
        this.mode = SpatialQueryMode.CONTAIN;

        /**
         * @member {SuperMap.OutputSetting} [SuperMap.SingleObjectQueryJobsParameter.prototype.output]
         * @description è¾åºåæ°è®¾ç½®ç±»ã
         */
        this.output = null;

        /**
         * @member {SuperMap.MappingParameters} [SuperMap.SingleObjectQueryJobsParameter.prototype.mappingParameters]
         * @description åæåç»æå¯è§åçåæ°ç±»ã   
         */
        this.mappingParameters = null;

        Util.extend(this, options);

        this.CLASS_NAME = "SuperMap.SingleObjectQueryJobsParameter";
    }

    /**
     * @function SuperMap.SingleObjectQueryJobsParameter.prototype.destroy
     * @description éæ¾èµæºï¼å°å¼ç¨èµæºçå±æ§ç½®ç©ºã
     */
    destroy() {
        this.datasetName = null;
        this.datasetQuery = null;
        this.geometryQuery = null;
        this.mode = null;
        if (this.output instanceof OutputSetting_OutputSetting) {
            this.output.destroy();
            this.output = null;
        }
        if (this.mappingParameters instanceof MappingParameters_MappingParameters){
            this.mappingParameters.destroy();
            this.mappingParameters = null;
        }
    }

    /**
     * @function SuperMap.SingleObjectQueryJobsParameter.toObject
     * @param {Object} singleObjectQueryJobsParameter - åå¯¹è±¡ç©ºé´æ¥è¯¢åæä»»å¡åæ°ã
     * @param {Object} tempObj - ç®æ å¯¹è±¡ã
     * @description çæåå¯¹è±¡ç©ºé´æ¥è¯¢åæä»»å¡å¯¹è±¡ã
     */
    static toObject(singleObjectQueryJobsParameter, tempObj) {
        for (var name in singleObjectQueryJobsParameter) {
            if (name === "datasetName") {
                tempObj['input'] = tempObj['input'] || {};
                tempObj['input'][name] = singleObjectQueryJobsParameter[name];
                continue;
            }
            if (name === "output"){
                tempObj['output'] = tempObj['output'] || {};
                tempObj['output'] = singleObjectQueryJobsParameter[name];
                continue;
            }
            
            tempObj['analyst'] = tempObj['analyst'] || {};
            tempObj['analyst'][name] = singleObjectQueryJobsParameter[name];
            if(name === 'mappingParameters'){
                tempObj['analyst'][name] = tempObj['analyst'][name] || {};
                tempObj['analyst']['mappingParameters'] = singleObjectQueryJobsParameter[name];
            }
        }
    }

}

SuperMap.SingleObjectQueryJobsParameter = SingleObjectQueryJobsParameter_SingleObjectQueryJobsParameter;

// CONCATENATED MODULE: ./src/common/iServer/SummaryAttributesJobsParameter.js
/* CopyrightÂ© 2000 - 2019 SuperMap Software Co.Ltd. All rights reserved.
 * This program are made available under the terms of the Apache License, Version 2.0
 * which accompanies this distribution and is available at http://www.apache.org/licenses/LICENSE-2.0.html.*/





/**
 * @class SuperMap.SummaryAttributesJobsParameter
 * @category  iServer ProcessingService SummaryAttributes
 * @classdesc å±æ§æ±æ»åæä»»å¡åæ°ç±»
 * @param {Object} options - åæ°ã
 * @param {string} options.datasetName - æ°æ®éåã
 * @param {string} options.groupField - åç»å­æ®µã
 * @param {string} options.attributeField - å±æ§å­æ®µã
 * @param {string} options.statisticModes - ç»è®¡æ¨¡å¼ã
 * @param {SuperMap.OutputSetting} [options.output] -è¾åºåæ°è®¾ç½®ã
 * @param {SuperMap.MappingParameters} [options.mappingParameters] - åæåç»æå¯è§åçåæ°ç±»ã   
 */
class SummaryAttributesJobsParameter_SummaryAttributesJobsParameter {

    constructor(options) {
        if (!options) {
            return;
        }
        /**
         * @member {string} SuperMap.SummaryAttributesJobsParameter.prototype.datasetName
         * @description æ±æ»æ°æ®éåç§°ã
         */
        this.datasetName = "";
        /**
         * @member {string} SuperMap.SummaryAttributesJobsParameter.prototype.groupField
         * @description åç»å­æ®µã
         */
        this.groupField = "";
        /**
         * @member {string} SuperMap.SummaryAttributesJobsParameter.prototype.attributeField
         * @description å±æ§å­æ®µã
         */
        this.attributeField = "";
        /**
         * @member {string} SuperMap.SummaryAttributesJobsParameter.prototype.statisticModes
         * @description å±æ§æ±æ»ç»è®¡æ¨¡å¼ã
         */
        this.statisticModes = "";
        /**
         * @member {SuperMap.OutputSetting} SuperMap.SummaryAttributesJobsParameter.prototype.output
         * @description è¾åºåæ°è®¾ç½®ç±»ã
         */
        this.output = null;
        /**
         * @member {SuperMap.MappingParameters} [SuperMap.SummaryAttributesJobsParameter.prototype.mappingParameters]
         * @description åæåç»æå¯è§åçåæ°ç±»ã   
         */
        this.mappingParameters = null;

        Util.extend(this, options);
        this.CLASS_NAME = "SuperMap.SummaryAttributesJobsParameter";
    }

    /**
     * @function SuperMap.SummaryAttributesJobsParameter.destroy
     * @override
     */
    destroy() {
        this.datasetName = null;
        this.groupField = null;
        this.attributeField = null;
        this.statisticModes = null;
        if (this.output instanceof OutputSetting_OutputSetting) {
            this.output.destroy();
            this.output = null;
        }
        if (this.mappingParameters instanceof MappingParameters_MappingParameters){
            this.mappingParameters.destroy();
            this.mappingParameters = null;
        }
    }

    /**
     * @function SuperMap.SummaryAttributesJobsParameter.toObject
     * @param {Object} SummaryAttributesJobsParameter - å±æ§æ±æ»ä»»å¡åæ°ã
     * @param {Object} tempObj - ç®æ å¯¹è±¡ã
     * @description çæå±æ§æ±æ»åæä»»å¡å¯¹è±¡ã
     */
    static toObject(SummaryAttributesJobsParameter, tempObj) {
        for (var name in SummaryAttributesJobsParameter) {
            if (name === "datasetName") {
                tempObj['input'] = tempObj['input'] || {};
                tempObj['input'][name] = SummaryAttributesJobsParameter[name];
                continue;
            }
            if (name === "output") {
                tempObj['output'] = tempObj['output'] || {};
                tempObj['output'] = SummaryAttributesJobsParameter[name];
                continue;
            }
            
            tempObj['analyst'] = tempObj['analyst'] || {};
            tempObj['analyst'][name] = SummaryAttributesJobsParameter[name];
            if(name === 'mappingParameters'){
                tempObj['analyst'][name] = tempObj['analyst'][name] || {};
                tempObj['analyst']['mappingParameters'] = SummaryAttributesJobsParameter[name];
            }
        }
    }

}
SuperMap.SummaryAttributesJobsParameter = SummaryAttributesJobsParameter_SummaryAttributesJobsParameter;
// CONCATENATED MODULE: ./src/common/iServer/SummaryMeshJobParameter.js
/* CopyrightÂ© 2000 - 2019 SuperMap Software Co.Ltd. All rights reserved.
 * This program are made available under the terms of the Apache License, Version 2.0
 * which accompanies this distribution and is available at http://www.apache.org/licenses/LICENSE-2.0.html.*/







/**
 * @class SuperMap.SummaryMeshJobParameter
 * @category  iServer ProcessingService AggregatePoints
 * @classdesc ç¹èååæä»»å¡åæ°ç±»ã
 * @param {Object} options - åæ°ã
 * @param {string} options.datasetName - æ°æ®éåã
 * @param {(SuperMap.Bounds|L.Bounds|ol.extent)} [options.query] - åæèå´ã
 * @param {number} options.fields - æéç´¢å¼ã
 * @param {number} [options.resolution=100] - åè¾¨çã
 * @param {SuperMap.StatisticAnalystMode} [options.statisticModes=SuperMap.StatisticAnalystMode.AVERAGE] - åææ¨¡å¼ã
 * @param {number} [options.meshType=0] - åæç±»åã
 * @param {SuperMap.SummaryType} [options.type=SuperMap.SummaryType.SUMMARYMESH] - èåç±»åã
 * @param {SuperMap.OutputSetting} [options.output] - è¾åºåæ°è®¾ç½®ã
 * @param {SuperMap.MappingParameters} [options.mappingParameters] - åæåç»æå¯è§åçåæ°ç±»ã   
 */
class SummaryMeshJobParameter_SummaryMeshJobParameter {

    constructor(options) {
        if (!options) {
            return;
        }
        /**
         * @member {string} SuperMap.SummaryMeshJobParameter.prototype.datasetName
         * @description æ°æ®éåã
         */
        this.datasetName = "";

        /**
         * @member {string} SuperMap.SummaryMeshJobParameter.prototype.regionDataset
         * @description èåé¢æ°æ®éï¼èåç±»åä¸ºå¤è¾¹å½¢èåæ¶ä½¿ç¨çåæ°ï¼ã
         */
        this.regionDataset = "";

        /**
         * @member {(SuperMap.Bounds|L.Bounds|ol.extent)} SuperMap.SummaryMeshJobParameter.prototype.query
         * @description åæèå´ï¼èåç±»åä¸ºç½æ ¼é¢èåæ¶ä½¿ç¨çåæ°ï¼ã
         */
        this.query = "";

        /**
         * @member {number} [SuperMap.SummaryMeshJobParameter.prototype.resolution=100]
         * @description åè¾¨çï¼èåç±»åä¸ºç½æ ¼é¢èåæ¶ä½¿ç¨çåæ°ï¼ã
         */
        this.resolution = 100;

        /**
         * @member {number} [SuperMap.SummaryMeshJobParameter.prototype.meshType=0]
         * @description  ç½æ ¼é¢ç±»åï¼èåç±»åä¸ºç½æ ¼é¢èåæ¶ä½¿ç¨çåæ°ï¼ï¼åå¼ï¼0 æ 1ã
         */
        this.meshType = 0;

        /**
         * @member {SuperMap.StatisticAnalystMode} [SuperMap.SummaryMeshJobParameter.prototype.statisticModes=SuperMap.StatisticAnalystMode.AVERAGE]
         * @description ç»è®¡æ¨¡å¼ã
         */
        this.statisticModes = StatisticAnalystMode.AVERAGE;

        /**
         * @member {number} SuperMap.SummaryMeshJobParameter.prototype.fields
         * @description æéå­æ®µã
         */
        this.fields = "";

        /**
         * @member {SuperMap.SummaryType} [SuperMap.SummaryMeshJobParameter.prototype.type=SuperMap.SummaryType.SUMMARYMESH]
         * @description èåç±»åã
         */
        this.type = SummaryType.SUMMARYMESH;

        /**
         * @member {SuperMap.OutputSetting} [SuperMap.SummaryMeshJobParameter.prototype.output]
         * @description è¾åºåæ°è®¾ç½®ç±»ã
         */
        this.output = null;

        /**
         * @member {SuperMap.MappingParameters} [SuperMap.SummaryMeshJobParameter.prototype.mappingParameters]
         * @description åæåç»æå¯è§åçåæ°ç±»ã   
         */
        this.mappingParameters = null;

        Util.extend(this, options);

        this.CLASS_NAME = "SuperMap.SummaryMeshJobParameter";
    }


    /**
     * @function SuperMap.SummaryMeshJobParameter.destroy
     * @override
     */
    destroy() {
        this.datasetName = null;
        this.query = null;
        this.resolution = null;
        this.statisticModes = null;
        this.meshType = null;
        this.fields = null;
        this.regionDataset = null;
        this.type = null;
        if (this.output instanceof OutputSetting_OutputSetting) {
            this.output.destroy();
            this.output = null;
        }
        if (this.mappingParameters instanceof MappingParameters_MappingParameters){
            this.mappingParameters.destroy();
            this.mappingParameters = null;
        }
    }

    /**
     * @function SuperMap.SummaryMeshJobParameter.toObject
     * @param {Object} summaryMeshJobParameter - ç¹èååæä»»å¡åæ°ã
     * @param {Object} tempObj - ç®æ å¯¹è±¡ã
     * @description çæç¹èååæä»»å¡å¯¹è±¡ã
     */
    static toObject(summaryMeshJobParameter, tempObj) {
        for (var name in summaryMeshJobParameter) {
            if (name === "datasetName") {
                tempObj['input'] = tempObj['input'] || {};
                tempObj['input'][name] = summaryMeshJobParameter[name];
                continue;
            }
            if (name === "type") {
                tempObj['type'] = summaryMeshJobParameter[name];
                continue;
            }
            if (name === "output") {
                tempObj['output'] = tempObj['output'] || {};
                tempObj['output'] = summaryMeshJobParameter[name];
                continue;
            }     
            if (summaryMeshJobParameter.type === 'SUMMARYMESH' && name !== 'regionDataset' || summaryMeshJobParameter.type === 'SUMMARYREGION' && !contains(['meshType', 'resolution', 'query'], name)) {
                tempObj['analyst'] = tempObj['analyst'] || {};
                if (name === 'query' && summaryMeshJobParameter[name]) {
                    tempObj['analyst'][name] = summaryMeshJobParameter[name].toBBOX();
                } else {
                    tempObj['analyst'][name] = summaryMeshJobParameter[name];
                }
                if(name === 'mappingParameters'){
                    tempObj['analyst'][name] = tempObj['analyst'][name] || {};
                    tempObj['analyst']['mappingParameters'] = summaryMeshJobParameter[name];
                }
            }

        }

        function contains(arr, obj) {
            var i = arr.length;
            while (i--) {
                if (arr[i] === obj) {
                    return true;
                }
            }
            return false;
        }
    }

}

SuperMap.SummaryMeshJobParameter = SummaryMeshJobParameter_SummaryMeshJobParameter;

// CONCATENATED MODULE: ./src/common/iServer/SummaryRegionJobParameter.js
/* CopyrightÂ© 2000 - 2019 SuperMap Software Co.Ltd. All rights reserved.
 * This program are made available under the terms of the Apache License, Version 2.0
 * which accompanies this distribution and is available at http://www.apache.org/licenses/LICENSE-2.0.html.*/






/**
 * @class SuperMap.SummaryRegionJobParameter
 * @category  iServer ProcessingService SummaryRegion
 * @classdesc åºåæ±æ»åæä»»å¡åæ°ç±»ã
 * @param {Object} options - åæ°ã
 * @param {string} options.datasetName - æ°æ®éåã
 * @param {(SuperMap.Bounds|L.Bounds|ol.extent)} [options.query] - åæèå´ã
 * @param {string} [options.standardFields] - æ åå±æ§å­æ®µåç§°ã
 * @param {string} [options.weightedFields] - æéå­æ®µåç§°ã
 * @param {SuperMap.StatisticAnalystMode} [options.standardStatisticModes] - æ åå±æ§å­æ®µçç»è®¡æ¨¡å¼ãstandardSummaryFields ä¸º true æ¶å¿å¡«ã
 * @param {SuperMap.StatisticAnalystMode} [options.weightedStatisticModes] - æéå­æ®µçç»è®¡æ¨¡å¼ãweightedSummaryFields ä¸º true æ¶å¿å¡«ã 
 * @param {boolean} [options.sumShape=true] - æ¯å¦ç»è®¡é¿åº¦æé¢ç§¯ã
 * @param {boolean} [options.standardSummaryFields=false] - æ¯å¦ä»¥æ åå±å­æ®µç»è®¡ã
 * @param {boolean} [options.weightedSummaryFields=false] - æ¯å¦ä»¥æéå­æ®µç»è®¡ã
 * @param {number} [options.resolution=100] - ç½æ ¼å¤§å°ã
 * @param {number} [options.meshType=0] - ç½æ ¼é¢æ±æ»ç±»åã
 * @param {SuperMap.AnalystSizeUnit} [options.meshSizeUnit=SuperMap.AnalystSizeUnit.METER] - ç½æ ¼å¤§å°åä½ã
 * @param {SuperMap.SummaryType} [options.type=SuperMap.SummaryType.SUMMARYMESH] - æ±æ»ç±»åã
 * @param {SuperMap.OutputSetting} [options.output] - è¾åºåæ°è®¾ç½®ã
 * @param {SuperMap.MappingParameters} [options.mappingParameters] - åæåç»æå¯è§åçåæ°ç±»ã   
 */
class SummaryRegionJobParameter_SummaryRegionJobParameter {

    constructor(options) {
        if (!options) {
            return;
        }

        /**
         * @member {string} SuperMap.SummaryRegionJobParameter.prototype.datasetName
         * @description æ°æ®éåã
         */
        this.datasetName = "";

        /**
         * @member {string} SuperMap.SummaryRegionJobParameter.prototype.regionDataset
         * @description æ±æ»æ°æ®æºï¼å¤è¾¹å½¢æ±æ»æ¶ç¨å°çåæ°ï¼ã
         */
        this.regionDataset = "";

        /**
         * @member {boolean} [SuperMap.SummaryRegionJobParameter.prototype.sumShape=true]
         * @description æ¯å¦ç»è®¡é¿åº¦æé¢ç§¯ã
         */
        this.sumShape = true;

        /**
         * @member {(SuperMap.Bounds|L.Bounds|ol.extent)} SuperMap.SummaryRegionJobParameter.prototype.query
         * @description åæèå´ã
         */
        this.query = "";

        /**
         * @member {boolean} [SuperMap.SummaryRegionJobParameter.prototype.standardSummaryFields=false]
         * @description æ¯å¦ä»¥æ åå±å­æ®µç»è®¡ã
         */
        this.standardSummaryFields = false;

        /**
         * @member {string} SuperMap.SummaryRegionJobParameter.prototype.standardFields
         * @description æ åå±æ§å­æ®µåç§°ãä»æ¯æç³»ç»å­æ®µä»¥å¤çæ´å½¢ãé¿æ´å½¢ãæµ®ç¹åçå­æ®µçåç§°ãstandardSummaryFields ä¸º true æ¶å¿å¡«ã 
         */
        this.standardFields = "";

        /**
         * @member {SuperMap.StatisticAnalystMode} SuperMap.SummaryRegionJobParameter.prototype.standardStatisticModes
         * @description æ åå±æ§å­æ®µçç»è®¡æ¨¡å¼ãstandardSummaryFields ä¸º true æ¶å¿å¡«ã
         */
        this.standardStatisticModes = "";

        /**
         * @member {boolean} [SuperMap.SummaryRegionJobParameter.prototype.weightedSummaryFields=false]
         * @description æ¯å¦ä»¥æéå­æ®µç»è®¡ã
         */
        this.weightedSummaryFields = false;

        /**
         * @member {string} SuperMap.SummaryRegionJobParameter.prototype.weightedFields
         * @description æéå­æ®µåç§°ãä»æ¯æç³»ç»å­æ®µä»¥å¤çæ´å½¢ãé¿æ´å½¢ãæµ®ç¹åçå­æ®µçåç§°ãweightedSummaryFields ä¸º true æ¶å¿å¡«ã 
         */
        this.weightedFields = "";

        /**
         * @member {SuperMap.StatisticAnalystMode} SuperMap.SummaryRegionJobParameter.prototype.weightedStatisticModes
         * @description ä»¥æéå­æ®µç»è®¡çç»è®¡æ¨¡å¼ãæéå­æ®µçç»è®¡æ¨¡å¼ãweightedSummaryFields ä¸º true æ¶å¿å¡«ã 
         */
        this.weightedStatisticModes = "";

        /**
         * @member {number} [SuperMap.SummaryRegionJobParameter.prototype.meshType=0]
         * @description ç½æ ¼é¢æ±æ»ç±»åã
         */
        this.meshType = 0;

        /**
         * @member {number} [SuperMap.SummaryRegionJobParameter.prototype.resolution=100]
         * @description ç½æ ¼å¤§å°ã
         */
        this.resolution = 100;

        /**
         * @member {SuperMap.AnalystSizeUnit} [SuperMap.SummaryRegionJobParameter.prototype.meshSizeUnit=SuperMap.AnalystSizeUnit.METER]
         * @description ç½æ ¼å¤§å°åä½ã
         */
        this.meshSizeUnit = AnalystSizeUnit.METER;

        /**
         * @member {SuperMap.SummaryType} [SuperMap.SummaryRegionJobParameter.prototype.type=SuperMap.SummaryType.SUMMARYMESH]
         * @description æ±æ»ç±»åã
         */
        this.type = SummaryType.SUMMARYMESH;

        /**
         * @member {SuperMap.OutputSetting} SuperMap.SummaryRegionJobParameter.prototype.output
         * @description è¾åºåæ°è®¾ç½®ç±»
         */
        this.output = null;

        /**
         * @member {SuperMap.MappingParameters} [SuperMap.SummaryRegionJobParameter.prototype.mappingParameters]
         * @description åæåç»æå¯è§åçåæ°ç±»ã   
         */
        this.mappingParameters = null;

        Util.extend(this, options);

        this.CLASS_NAME = "SuperMap.SummaryRegionJobParameter";
    }

    /**
     * @function SuperMap.SummaryRegionJobParameter.prototype.destroy
     * @description éæ¾èµæºï¼å°å¼ç¨èµæºçå±æ§ç½®ç©ºã
     */
    destroy() {
        this.datasetName = null;
        this.sumShape = null;
        this.regionDataset = null;
        this.query = null;
        this.standardSummaryFields = null;
        this.standardFields = null;
        this.standardStatisticModes = null;
        this.weightedSummaryFields = null;
        this.weightedFields = null;
        this.weightedStatisticModes = null;
        this.meshType = null;
        this.resolution = null;
        this.meshSizeUnit = null;
        this.type = null;
        if (this.output instanceof OutputSetting_OutputSetting) {
            this.output.destroy();
            this.output = null;
        }
        if (this.mappingParameters instanceof MappingParameters_MappingParameters){
            this.mappingParameters.destroy();
            this.mappingParameters = null;
        }
    }

    /**
     * @function SuperMap.SummaryRegionJobParameter.toObject
     * @param {Object} summaryRegionJobParameter - ç¢éè£åªåæä»»å¡åæ°ã
     * @param {Object} tempObj - ç®æ å¯¹è±¡ã
     * @description çæåºåæ±æ»åææå¡å¯¹è±¡ã
     */
    static toObject(summaryRegionJobParameter, tempObj) {
        for (var name in summaryRegionJobParameter) {
            if (name === "datasetName") {
                tempObj['input'] = tempObj['input'] || {};
                tempObj['input'][name] = summaryRegionJobParameter[name];
                continue;
            }
            if (name === "type") {
                tempObj['type'] = summaryRegionJobParameter[name];
                continue;
            }
            if (name === "type") {
                tempObj['type'] = summaryRegionJobParameter[name];
                continue;
            }
            if (name === "output") {
                tempObj['output'] = tempObj['output'] || {};
                tempObj['output'] = summaryRegionJobParameter[name];
                continue;
            }
            if (summaryRegionJobParameter.type === "SUMMARYREGION" || summaryRegionJobParameter.type === "SUMMARYMESH" && name !== "regionDataset") {
                tempObj['analyst'] = tempObj['analyst'] || {};
                if (name === 'query' && summaryRegionJobParameter[name]) {
                    tempObj['analyst'][name] = summaryRegionJobParameter[name].toBBOX();
                } else {
                    tempObj['analyst'][name] = summaryRegionJobParameter[name];
                }
                if(name === 'mappingParameters'){
                    tempObj['analyst'][name] = tempObj['analyst'][name] || {};
                    tempObj['analyst']['mappingParameters'] = summaryRegionJobParameter[name];
                }

            }
        }
    }

}

SuperMap.SummaryRegionJobParameter = SummaryRegionJobParameter_SummaryRegionJobParameter;

// CONCATENATED MODULE: ./src/common/iServer/OverlayGeoJobParameter.js
/* CopyrightÂ© 2000 - 2019 SuperMap Software Co.Ltd. All rights reserved.
 * This program are made available under the terms of the Apache License, Version 2.0
 * which accompanies this distribution and is available at http://www.apache.org/licenses/LICENSE-2.0.html.*/





/**
 * @class SuperMap.OverlayGeoJobParameter
 * @category iServer ProcessingService OverlayAnalyst
 * @classdesc å å åæä»»å¡åæ°ç±»ã
 * @param {Object} options - åæ°ã
 * @param {string} options.datasetName - æ°æ®éåã
 * @param {string} options.datasetOverlay - å å å¯¹è±¡æå¨çæ°æ®éåç§°ã
 * @param {string} options.srcFields - è¾å¥æ°æ®éè¦ä¿ççå­æ®µã
 * @param {string} [options.overlayFields] - å å æ°æ®éè¦ä¿ççå­æ®µãå¯¹åææ¨¡å¼ä¸º clipãupdateãerase æ¶ï¼æ­¤åæ°æ æã
 * @param {string} [options.mode] - å å åææ¨¡å¼ã
 * @param {SuperMap.OutputSetting} [options.output] - è¾åºåæ°è®¾ç½®ã
 * @param {SuperMap.MappingParameters} [options.mappingParameters] - åæåç»æå¯è§åçåæ°ç±»ã   
 */
class OverlayGeoJobParameter_OverlayGeoJobParameter {

    constructor(options) {
        if (!options) {
            return;
        }
        /**
         * @member {string} SuperMap.OverlayGeoJobParameter.prototype.datasetName
         * @description æ°æ®éåã
         */
        this.datasetName = "";

        /**
         * @member {string} SuperMap.OverlayGeoJobParameter.prototype.datasetOverlay
         * @description å å å¯¹è±¡æå¨çæ°æ®éåç§°ã
         */
        this.datasetOverlay = "";

        /**
         * @member {string} [SuperMap.OverlayGeoJobParameter.prototype.mode]
         * @description å å åææ¨¡å¼ã
         */
        this.mode = "";

        /**
         * @member {string} SuperMap.OverlayGeoJobParameter.prototype.srcFields
         * @description è¾å¥æ°æ®éè¦ä¿ççå­æ®µã
         */
        this.srcFields = "";

        /**
         * @member {string} SuperMap.OverlayGeoJobParameter.prototype.overlayFields
         * @description å å æ°æ®éè¦ä¿ççå­æ®µï¼å¯¹åææ¨¡å¼ä¸º clipãupdateãerase æ¶ï¼æ­¤åæ°æ æã
         */
        this.overlayFields = "";

        /**
         * @member {SuperMap.OutputSetting} [SuperMap.OverlayGeoJobParameter.prototype.output]
         * @description è¾åºåæ°è®¾ç½®ç±»ã
         */
        this.output = null;

        /**
        * @member {SuperMap.MappingParameters} [SuperMap.OverlayGeoJobParameter.prototype.mappingParameters]
        * @description åæåç»æå¯è§åçåæ°ç±»ã   
        */
        this.mappingParameters = null;

        Util.extend(this, options);
        this.CLASS_NAME = "SuperMap.OverlayGeoJobParameter";
    }

    /**
     * @function SuperMap.OverlayGeoJobParameter.destroy
     * @override
     */
    destroy() {
        this.datasetName = null;
        this.datasetOverlay = null;
        this.mode = null;
        this.srcFields = null;
        this.overlayFields = null;
        if (this.output instanceof OutputSetting_OutputSetting) {
            this.output.destroy();
            this.output = null;
        }
        if (this.mappingParameters instanceof MappingParameters_MappingParameters) {
            this.mappingParameters.destroy();
            this.mappingParameters = null;
        }
    }

    /**
     * @function SuperMap.OverlayGeoJobParameter.toObject
     * @param {Object} OverlayGeoJobParameter - ç¹èååæä»»å¡åæ°ã
     * @param {Object} tempObj - ç®æ å¯¹è±¡ã
     * @description çæç¹èååæä»»å¡å¯¹è±¡ã
     */
    static toObject(OverlayGeoJobParameter, tempObj) {
        for (var name in OverlayGeoJobParameter) {
            if (name == "datasetName") {
                tempObj['input'] = tempObj['input'] || {};
                tempObj['input'][name] = OverlayGeoJobParameter[name];
                continue;
            }
            if (name === "output") {
                tempObj['output'] = tempObj['output'] || {};
                tempObj['output'] = OverlayGeoJobParameter[name];
                continue;
            }
            
            tempObj['analyst'] = tempObj['analyst'] || {};
            tempObj['analyst'][name] = OverlayGeoJobParameter[name];
            if(name === 'mappingParameters'){
                tempObj['analyst'][name] = tempObj['analyst'][name] || {};
                tempObj['analyst']['mappingParameters'] = OverlayGeoJobParameter[name];
            }
        }
    }

}

SuperMap.OverlayGeoJobParameter = OverlayGeoJobParameter_OverlayGeoJobParameter;
// CONCATENATED MODULE: ./src/common/iServer/BuffersAnalystJobsParameter.js
/* CopyrightÂ© 2000 - 2019 SuperMap Software Co.Ltd. All rights reserved.
 * This program are made available under the terms of the Apache License, Version 2.0
 * which accompanies this distribution and is available at http://www.apache.org/licenses/LICENSE-2.0.html.*/






/**
 * @class SuperMap.BuffersAnalystJobsParameter
 * @category iServer ProcessingService BufferAnalyst
 * @classdesc ç¼å²åºåæä»»å¡åæ°ç±»ã
 * @param {Object} options - åæ°ã   
 * @param {string} options.datasetName - æ°æ®éåã   
 * @param {(SuperMap.Bounds|L.Bounds|ol.extent)} options.bounds - åæèå´ã   
 * @param {string} [options.distance='15'] - ç¼å²è·ç¦»ï¼æç¼å²åºåå¾ã   
 * @param {string} [options.distanceField='pickup_latitude'] - ç¼å²åºåæè·ç¦»å­æ®µã   
 * @param {SuperMap.AnalystSizeUnit} [options.distanceUnit=SuperMap.AnalystSizeUnit.METER] - ç¼å²è·ç¦»åä½åä½ã   
 * @param {SuperMap.OutputSetting} [options.output] - è¾åºåæ°è®¾ç½®ã  
 * @param {SuperMap.MappingParameters} [options.mappingParameters] - åæåç»æå¯è§åçåæ°ç±»ã   
 */
class BuffersAnalystJobsParameter_BuffersAnalystJobsParameter {


    constructor(options) {
        /**
         * @member {string} SuperMap.BuffersAnalystJobsParameter.prototype.datasetName
         * @description æ°æ®éåã
         */
        this.datasetName = "";

        /**
         * @member {(SuperMap.Bounds|L.Bounds|ol.extent)} SuperMap.BuffersAnalystJobsParameter.prototype.bounds
         * @description åæèå´ã 
         */
        this.bounds = "";

        /**
         * @member {string} [SuperMap.BuffersAnalystJobsParameter.prototype.distance='15']
         * @description ç¼å²è·ç¦»ï¼æç§°ä¸ºç¼å²åºåå¾ãå½ç¼å²è·ç¦»å­æ®µä½ç©ºæ¶ï¼æ­¤åæ°ææã
         */
        this.distance = "";

        /**
         * @member {string} [SuperMap.BuffersAnalystJobsParameter.prototype.distanceField='pickup_latitude']
         * @description ç¼å²è·ç¦»å­æ®µã
         */
        this.distanceField = "";

        /**
         * @member {SuperMap.AnalystSizeUnit} [SuperMap.BuffersAnalystJobsParameter.prototype.distanceUnit=SuperMap.AnalystSizeUnit.METER]
         * @description ç¼å²è·ç¦»åä½ã
         */
        this.distanceUnit = AnalystSizeUnit.METER;

        /**
         * @member {string} SuperMap.BuffersAnalystJobsParameter.prototype.dissolveField
         * @description èåå­æ®µï¼æ ¹æ®å­æ®µå¼å¯¹ç¼å²åºç»æé¢å¯¹è±¡è¿è¡èåã
         */
        this.dissolveField = "";

        /**
         * @member {SuperMap.OutputSetting} [SuperMap.BuffersAnalystJobsParameter.prototype.output]
         * @description è¾åºåæ°è®¾ç½®ç±»ã
         */
        this.output = null;
        
        /**
         * @member {SuperMap.MappingParameters} [SuperMap.BuffersAnalystJobsParameter.prototype.mappingParameters]
         * @description åæåç»æå¯è§åçåæ°ç±»ã   
         */
        this.mappingParameters = null;

        if (!options) {
            return this;
        }
        Util.extend(this, options);

        this.CLASS_NAME = "SuperMap.BuffersAnalystJobsParameter";
    }

    /**
     * @function SuperMap.BuffersAnalystJobsParameter.prototype.destroy
     * @description éæ¾èµæºï¼å°å¼ç¨èµæºçå±æ§ç½®ç©ºã
     */
    destroy() {
        this.datasetName = null;
        this.bounds = null;
        this.distance = null;
        this.distanceField = null;
        this.distanceUnit = null;
        this.dissolveField = null;
        if (this.output instanceof OutputSetting_OutputSetting) {
            this.output.destroy();
            this.output = null;
        }
        if (this.mappingParameters instanceof MappingParameters_MappingParameters){
            this.mappingParameters.destroy();
            this.mappingParameters = null;
        }
    }

    /**
     * @function SuperMap.BuffersAnalystJobsParameter.toObject
     * @param {SuperMap.BuffersAnalystJobsParameter} BuffersAnalystJobsParameter - ç¼å²åºåæä»»å¡åæ°ã
     * @param {Object} tempObj - ç®æ å¯¹è±¡ã
     * @description çæç¼å²åºåæä»»å¡å¯¹è±¡ã
     */
    static toObject(BuffersAnalystJobsParameter, tempObj) {
        for (var name in BuffersAnalystJobsParameter) {
            if (name === "datasetName") {
                tempObj['input'] = tempObj['input'] || {};
                tempObj['input'][name] = BuffersAnalystJobsParameter[name];
                continue;
            }
            if (name === "output") {
                tempObj['output'] = tempObj['output'] || {};
                tempObj['output'] = BuffersAnalystJobsParameter[name];
                continue;
            }

            tempObj['analyst'] = tempObj['analyst'] || {};
            if (name === 'bounds') {
                tempObj['analyst'][name] = BuffersAnalystJobsParameter[name].toBBOX();
            } else {
                tempObj['analyst'][name] = BuffersAnalystJobsParameter[name];
            }
            if(name === 'mappingParameters'){
                tempObj['analyst'][name] = tempObj['analyst'][name] || {};
                tempObj['analyst']['mappingParameters'] = BuffersAnalystJobsParameter[name];
            }
        }
    }

}

SuperMap.BuffersAnalystJobsParameter = BuffersAnalystJobsParameter_BuffersAnalystJobsParameter;
// CONCATENATED MODULE: ./src/common/iServer/TopologyValidatorJobsParameter.js
/* CopyrightÂ© 2000 - 2019 SuperMap Software Co.Ltd. All rights reserved.
 * This program are made available under the terms of the Apache License, Version 2.0
 * which accompanies this distribution and is available at http://www.apache.org/licenses/LICENSE-2.0.html.*/






/**
 * @class SuperMap.TopologyValidatorJobsParameter
 * @category  iServer ProcessingService TopologyValidator
 * @classdesc æææ£æ¥åæä»»å¡åæ°ç±»ã
 * @param {Object} options - å¿å¡«åæ°ã
 * @param {string} options.datasetName - æ°æ®éåã
 * @param {string} options.datasetTopology -æ£æ¥å¯¹è±¡æå¨çæ°æ®éåç§°ã
 * @param {SuperMap.TopologyValidatorRule} [options.rule=SuperMap.TopologyValidatorRule.REGIONNOOVERLAP] - æææ£æ¥è§åã
 * @param {string} [options.tolerance] - å®¹éã
 * @param {SuperMap.OutputSetting} [options.output] - è¾åºåæ°è®¾ç½®ã
 * @param {SuperMap.MappingParameters} [options.mappingParameters] - åæåç»æå¯è§åçåæ°ç±»ã   
 */
class TopologyValidatorJobsParameter_TopologyValidatorJobsParameter {

    constructor(options) {
        if (!options) {
            return;
        }
        /**
         * @member {string} SuperMap.TopologyValidatorJobsParameter.prototype.datasetName
         * @description æ°æ®éåã
         */
        this.datasetName = "";

        /**
         * @member {string} SuperMap.TopologyValidatorJobsParameter.prototype.datasetTopology
         * @description æææ£æ¥å¯¹è±¡æå¨çæ°æ®éåç§°ã
         */
        this.datasetTopology = "";

        /**
         * @member {string} [SuperMap.TopologyValidatorJobsParameter.prototype.tolerance]
         * @description å®¹éï¼æå®çææéè¯¯æ£æ¥æ¶ä½¿ç¨çå®¹éã
         */
        this.tolerance = "";

        /**
         * @member {SuperMap.TopologyValidatorRule} [SuperMap.TopologyValidatorJobsParameter.prototype.rule=SuperMap.TopologyValidatorRule.REGIONNOOVERLAP]
         * @description æææ£æ¥æ¨¡å¼ã
         */
        this.rule = TopologyValidatorRule.REGIONNOOVERLAP;

        /**
         * @member {SuperMap.OutputSetting} [SuperMap.TopologyValidatorJobsParameter.prototype.output]
         * @description è¾åºåæ°è®¾ç½®ç±»ã
         */
        this.output = null;

        /**
         * @member {SuperMap.MappingParameters} [SuperMap.TopologyValidatorJobsParameter.prototype.mappingParameters]
         * @description åæåç»æå¯è§åçåæ°ç±»ã   
         */
        this.mappingParameters = null;

        Util.extend(this, options);

        this.CLASS_NAME = "SuperMap.TopologyValidatorJobsParameter";
    }

    /**
     * @function SuperMap.TopologyValidatorJobsParameter.prototype.destroy
     * @description éæ¾èµæºï¼å°å¼ç¨èµæºçå±æ§ç½®ç©ºã
     */
    destroy() {
        this.datasetName = null;
        this.datasetTopology = null;
        this.tolerance = null;
        this.rule = null;
        if (this.output instanceof OutputSetting_OutputSetting) {
            this.output.destroy();
            this.output = null;
        }
        if (this.mappingParameters instanceof MappingParameters_MappingParameters) {
            this.mappingParameters.destroy();
            this.mappingParameters = null;
        }
    }

    /**
     * @function SuperMap.TopologyValidatorJobsParameter.toObject
     * @param {Object} TopologyValidatorJobsParameter -æææ£æ¥åæä»»å¡åæ°ã
     * @param {Object} tempObj - ç®æ å¯¹è±¡ã
     * @description çææææ£æ¥åæä»»å¡å¯¹è±¡ã
     */
    static toObject(TopologyValidatorJobsParameter, tempObj) {
        for (var name in TopologyValidatorJobsParameter) {
            if (name === "datasetName") {
                tempObj['input'] = tempObj['input'] || {};
                tempObj['input'][name] = TopologyValidatorJobsParameter[name];
                continue;
            }
            if (name === "output") {
                tempObj['output'] = tempObj['output'] || {};
                tempObj['output'] = TopologyValidatorJobsParameter[name];
                continue;
            }
            tempObj['analyst'] = tempObj['analyst'] || {};
            tempObj['analyst'][name] = TopologyValidatorJobsParameter[name];
            if(name === 'mappingParameters'){
                tempObj['analyst'][name] = tempObj['analyst'][name] || {};
                tempObj['analyst']['mappingParameters'] = TopologyValidatorJobsParameter[name];
            }
        }
    }
}

SuperMap.TopologyValidatorJobsParameter = TopologyValidatorJobsParameter_TopologyValidatorJobsParameter;
// CONCATENATED MODULE: ./src/common/iServer/GeoCodingParameter.js
/* CopyrightÂ© 2000 - 2019 SuperMap Software Co.Ltd. All rights reserved.
 * This program are made available under the terms of the Apache License, Version 2.0
 * which accompanies this distribution and is available at http://www.apache.org/licenses/LICENSE-2.0.html.*/



/**
 * @class SuperMap.GeoCodingParameter
 * @category  iServer AddressMatch
 * @classdesc å°çæ­£åå¹éåæ°ç±»ã
 * @param {Object} options - åæ°ã 
 * @param {string} options.address - å°ç¹å³é®è¯ã 
 * @param {number} [options.fromIndex] - è®¾ç½®è¿åå¯¹è±¡çèµ·å§ç´¢å¼å¼ã 
 * @param {number} [options.toIndex] - è®¾ç½®è¿åå¯¹è±¡çç»æç´¢å¼å¼ã 
 * @param {Array.<string>} [options.filters] - è¿æ»¤å­æ®µï¼éå®æ¥è¯¢åºåã 
 * @param {string} [options.prjCoordSys] - æ¥è¯¢ç»æçåæ ç³»ã 
 * @param {number} [options.maxReturn] - æå¤§è¿åç»ææ°ã
 */
class GeoCodingParameter_GeoCodingParameter {




    constructor(options) {
        if (options.filters) {
            let strs = [];
            let fields = options.filters.split(',');
            fields.map(function (field) {
                strs.push("\"" + field + "\"");
                return field;
            });
            options.filters = strs;
        }
        /**
         * @member {string} SuperMap.GeoCodingParameter.prototype.address
         * @description å°ç¹å³é®è¯ã
         */
        this.address = null;

        /**
         * @member {number} [SuperMap.GeoCodingParameter.prototype.fromIndex]
         * @description è®¾ç½®è¿åå¯¹è±¡çèµ·å§ç´¢å¼å¼ã
         */
        this.fromIndex = null;

        /**
         * @member {number} [SuperMap.GeoCodingParameter.prototype.toIndex]
         * @description è®¾ç½®è¿åå¯¹è±¡çç»æç´¢å¼å¼ã
         */
        this.toIndex = null;

        /**
         * @member {Array.<string>} [SuperMap.GeoCodingParameter.prototype.filters]
         * @description è¿æ»¤å­æ®µï¼éå®æ¥è¯¢åºåã
         */
        this.filters = null;

        /**
         * @member {string} [SuperMap.GeoCodingParameter.prototype.prjCoordSys]
         * @description  æ¥è¯¢ç»æçåæ ç³»ã
         */
        this.prjCoordSys = null;

        /**
         * @member {number} [SuperMap.GeoCodingParameter.prototype.maxReturn]
         * @description æå¤§è¿åç»ææ°ã
         */
        this.maxReturn = null;
        Util.extend(this, options);
    }

    /**
     * @function SuperMap.GeoCodingParameter.prototype.destroy
     * @description éæ¾èµæºï¼å°å¼ç¨èµæºçå±æ§ç½®ç©ºã
     */
    destroy() {
        this.address = null;
        this.fromIndex = null;
        this.toIndex = null;
        this.filters = null;
        this.prjCoordSys = null;
        this.maxReturn = null;
    }

}

SuperMap.GeoCodingParameter = GeoCodingParameter_GeoCodingParameter;
// CONCATENATED MODULE: ./src/common/iServer/GeoDecodingParameter.js
/* CopyrightÂ© 2000 - 2019 SuperMap Software Co.Ltd. All rights reserved.
 * This program are made available under the terms of the Apache License, Version 2.0
 * which accompanies this distribution and is available at http://www.apache.org/licenses/LICENSE-2.0.html.*/



/**
 * @class SuperMap.GeoDecodingParameter
 * @category iServer AddressMatch
 * @classdesc å°çååå¹éåæ°ç±»ã
 * @param {Object} options - åæ°ã 
 * @param {number} options.x - æ¥è¯¢ä½ç½®çæ¨ªåæ ã 
 * @param {number} options.y - æ¥è¯¢ä½ç½®ççºµåæ ã 
 * @param {number} [options.fromIndex] - è®¾ç½®è¿åå¯¹è±¡çèµ·å§ç´¢å¼å¼ã 
 * @param {Array.<string>} [options.filters] - è¿æ»¤å­æ®µï¼éå®æ¥è¯¢åºåã 
 * @param {string} [options.prjCoordSys] - æ¥è¯¢ç»æçåæ ç³»ã 
 * @param {number} [options.maxReturn] - æå¤§è¿åç»ææ°ã 
 * @param {number} [options.geoDecodingRadius] - æ¥è¯¢åå¾ã
 */
class GeoDecodingParameter_GeoDecodingParameter {


    constructor(options) {

        if (options.filters) {
            let strs = [];
            let fields = options.filters.split(',');
            fields.map(function (field) {
                strs.push("\"" + field + "\"");
                return field
            });
            options.filters = strs;
        }
        /**
         * @member {number} SuperMap.GeoDecodingParameter.prototype.x
         * @description æ¥è¯¢ä½ç½®çæ¨ªåæ ã
         */
        this.x = null;

        /**
         * @member {number} SuperMap.GeoDecodingParameter.prototype.y
         * @description æ¥è¯¢ä½ç½®ççºµåæ ã
         */
        this.y = null;
        /**
         * @member {number} [SuperMap.GeoDecodingParameter.prototype.fromIndex]
         * @description  è®¾ç½®è¿åå¯¹è±¡çèµ·å§ç´¢å¼å¼ã
         */
        this.fromIndex = null;

        /**
         * @member {number} [SuperMap.GeoDecodingParameter.prototype.toIndex]
         * @description è®¾ç½®è¿åå¯¹è±¡çç»æç´¢å¼å¼ã
         */
        this.toIndex = null;

        /**
         * @member {Array.<string>} [SuperMap.GeoDecodingParameter.prototype.filters]
         * @description è¿æ»¤å­æ®µï¼éå®æ¥è¯¢åºåã
         */
        this.filters = null;

        /**
         * @member {string} [SuperMap.GeoDecodingParameter.prototype.prjCoordSys]
         * @description æ¥è¯¢ç»æçåæ ç³»ã
         */
        this.prjCoordSys = null;

        /**
         *  @member {number} [SuperMap.GeoDecodingParameter.prototype.maxReturn]
         *  @description æå¤§è¿åç»ææ°ã
         */
        this.maxReturn = null;

        /**
         * @member {number} SuperMap.GeoDecodingParameter.prototype.geoDecodingRadius
         * @description æ¥è¯¢åå¾ã
         */
        this.geoDecodingRadius = null;
        Util.extend(this, options);
    }

    /**
     * @function SuperMap.GeoDecodingParameter.prototype.destroy
     * @description éæ¾èµæºï¼å°å¼ç¨èµæºçå±æ§ç½®ç©ºã
     */
    destroy() {
        this.x = null;
        this.y = null;
        this.fromIndex = null;
        this.toIndex = null;
        this.filters = null;
        this.prjCoordSys = null;
        this.maxReturn = null;
        this.geoDecodingRadius = null;
    }

}

SuperMap.GeoDecodingParameter = GeoDecodingParameter_GeoDecodingParameter;
// CONCATENATED MODULE: ./src/common/widgets/CommonTypes.js
/* CopyrightÂ© 2000 - 2019 SuperMap Software Co.Ltd. All rights reserved.
 * This program are made available under the terms of the Apache License, Version 2.0
 * which accompanies this distribution and is available at http://www.apache.org/licenses/LICENSE-2.0.html.*/
/**
 * è¯¥æä»¶ç¨äºå­å¨ä¸äºå¬ç¨å¸¸é
 *
 */
const FileTypes = {
    EXCEL: "EXCEL",
    CSV: "CSV",
    ISERVER: "ISERVER",
    GEOJSON: "GEOJSON",
    JSON: 'JSON'
};
const FileConfig = {
    fileMaxSize: 10 * 1024 * 1024
};
// CONCATENATED MODULE: ./src/common/widgets/openfile/FileModel.js
/* CopyrightÂ© 2000 - 2019 SuperMap Software Co.Ltd. All rights reserved.
 * This program are made available under the terms of the Apache License, Version 2.0
 * which accompanies this distribution and is available at http://www.apache.org/licenses/LICENSE-2.0.html.*/


/**
 * @class SuperMap.FileModel
 * @description æä»¶æ°æ®å¾®ä»¶æ°æ®æ¨¡åï¼ç¨äºå­å¨ä¸äºæä»¶æ°æ®æç¶æï¼todo ç»æå¾å®å
 * @category Widgets OpenFile
 * @private
 */
class FileModel_FileModel {
    constructor(options) {
        this.FileTypes = FileTypes;
        this.FileConfig = FileConfig;
        this.loadFileObject = options && options.loadFileObject ? options.loadFileObject : [];
    }

    /**
     * @function SuperMap.FileModel.prototype.set
     * @description è®¾ç½®å±æ§å¼
     * @param {string} key - å±æ§åç§°
     * @param {string|Object} value - å±æ§å¼
     */
    set(key, value) {
        this[key] = value;
    }

    /**
     * @function SuperMap.FileModel.prototype.get
     * @description è·åæ°æ®å¼
     * @param {string} key - å±æ§åç§°
     * @returns {string|Object} value - è¿åå±æ§å¼
     */
    get(key) {
        return this[key];
    }

}
// CONCATENATED MODULE: ./src/common/widgets/messagebox/MessageBox.js
/* CopyrightÂ© 2000 - 2019 SuperMap Software Co.Ltd. All rights reserved.
 * This program are made available under the terms of the Apache License, Version 2.0
 * which accompanies this distribution and is available at http://www.apache.org/licenses/LICENSE-2.0.html.*/


/**
 * @class SuperMap.Widgets.MessageBox
 * @version 9.1.1
 * @classdesc å¾®ä»¶ä¿¡æ¯æç¤ºæ¡ã
 * @category Widgets Common
 */
class MessageBox {

    constructor() {
        this._initView();
    }

    _initView() {
        //åçjså½¢å¼
        const messageBoxContainer = document.createElement("div");
        messageBoxContainer.hidden = true;
        messageBoxContainer.setAttribute("class", "widget-messageboxcontainer widget-border-bottom-orange");

        //å¾æ 
        const iconContainer = document.createElement("div");
        iconContainer.setAttribute("class", "icon");
        this.icon = document.createElement("span");
        this.icon.setAttribute("class", "supermapol-icons-message-warning");
        iconContainer.appendChild(this.icon);
        messageBoxContainer.appendChild(iconContainer);

        //åå®¹ï¼
        const messageBox = document.createElement("div");
        messageBox.setAttribute("class", "widget-messagebox");
        messageBox.innerHTML = "";
        messageBoxContainer.appendChild(messageBox);
        this.messageBox = messageBox;

        //å³é­æé®
        const cancelContainer = document.createElement("div");
        cancelContainer.setAttribute("class", "widget-messagebox__cancelbtncontainer");
        const cancelBtn = document.createElement("button");
        cancelBtn.setAttribute("class", "widget-messagebox__cancelBtn");
        cancelBtn.innerHTML = "x";
        cancelBtn.onclick = this.closeView.bind(this);
        cancelContainer.appendChild(cancelBtn);
        messageBoxContainer.appendChild(cancelContainer);

        this.messageBoxContainer = messageBoxContainer;
        document.body.appendChild(this.messageBoxContainer);
    }

    /**
     * @function SuperMap.Widgets.MessageBox.prototype.closeView
     * @description å³é­æç¤ºæ¡ã
     */
    closeView() {
        this.messageBoxContainer.hidden = true;
    }

    /**
     * @function SuperMap.Widgets.MessageBox.prototype.showView
     * @description æ¾ç¤ºæç¤ºæ¡ã
     * @param {string} message - æç¤ºæ¡æ¾ç¤ºåå®¹ã
     * @param {string}[type="warring"] æç¤ºæ¡ç±»åï¼å¦ "warring", "failure", "success"ã
     */
    showView(message, type = 'warring') {
        //è®¾ç½®æç¤ºæ¡çæ ·å¼ï¼
        if (type === "success") {
            this.icon.setAttribute("class", "supermapol-icons-message-success");
            this.messageBoxContainer.setAttribute("class", "widget-messageboxcontainer widget-border-bottom-green");

        } else if (type === "failure") {
            this.icon.setAttribute("class", "supermapol-icons-message-failure");
            this.messageBoxContainer.setAttribute("class", "widget-messageboxcontainer widget-border-bottom-red");
        } else if (type === "warring") {
            this.icon.setAttribute("class", "supermapol-icons-message-warning");
            this.messageBoxContainer.setAttribute("class", "widget-messageboxcontainer widget-border-bottom-orange");
        }
        this.messageBox.innerHTML = message;
        this.messageBoxContainer.hidden = false;
    }
}

SuperMap.Widgets.MessageBox = MessageBox;
// EXTERNAL MODULE: external "function(){try{return echarts}catch(e){return {}}}()"
var external_function_try_return_echarts_catch_e_return_ = __webpack_require__(4);
var external_function_try_return_echarts_catch_e_return_default = /*#__PURE__*/__webpack_require__.n(external_function_try_return_echarts_catch_e_return_);

// CONCATENATED MODULE: ./src/common/iServer/GetFeaturesParametersBase.js
/* CopyrightÂ© 2000 - 2019 SuperMap Software Co.Ltd. All rights reserved.
 * This program are made available under the terms of the Apache License, Version 2.0
 * which accompanies this distribution and is available at http://www.apache.org/licenses/LICENSE-2.0.html.*/



/**
 * @class SuperMap.GetFeaturesParametersBase
 * @category  iServer Data FeatureResults
 * @classdesc è¦ç´ æ¥è¯¢åæ°åºç±»ã
 * @param {Object} options - åæ°ã 
 * @param {Array.<string>} options.datasetNames - æ°æ®ééåä¸­çæ°æ®éåç§°åè¡¨ã 
 * @param {boolean} [options.returnContent=true] - æ¯å¦ç´æ¥è¿åæ¥è¯¢ç»æã 
 * @param {number} [options.fromIndex=0] - æ¥è¯¢ç»æçæå°ç´¢å¼å·ã 
 * @param {number} [options.toIndex=19] - æ¥è¯¢ç»æçæå¤§ç´¢å¼å·ã 
 */
class GetFeaturesParametersBase_GetFeaturesParametersBase {


    constructor(options) {
        /**
         * @member {Array.<string>} SuperMap.GetFeaturesParametersBase.prototype.datasetName
         * @description æ°æ®ééåä¸­çæ°æ®éåç§°åè¡¨ã
         */
        this.datasetNames = null;

        /**
         * @member {boolean} [SuperMap.GetFeaturesParametersBase.prototype.returnContent=true]
         * @description æ¯å¦ç«å³è¿åæ°åå»ºèµæºçè¡¨è¿°è¿æ¯è¿åæ°èµæºç URIã
         *              å¦æä¸º trueï¼åç´æ¥è¿åæ°åå»ºèµæºï¼å³æ¥è¯¢ç»æçè¡¨è¿°ã
         *              å¦æä¸º falseï¼åè¿åçæ¯æ¥è¯¢ç»æèµæºç URIã
         */
        this.returnContent = true;

        /**
         * @member {number} [SuperMap.GetFeaturesParametersBase.prototype.fromIndex=0]
         * @description æ¥è¯¢ç»æçæå°ç´¢å¼å·ãå¦æè¯¥å¼å¤§äºæ¥è¯¢ç»æçæå¤§ç´¢å¼å·ï¼åæ¥è¯¢ç»æä¸ºç©ºã
         */
        this.fromIndex = 0;

        /**
         * @member {number} [SuperMap.GetFeaturesParametersBase.prototype.toIndex=19]
         * @description æ¥è¯¢ç»æçæå¤§ç´¢å¼å·ãå¦æè¯¥å¼å¤§äºæ¥è¯¢ç»æçæå¤§ç´¢å¼å·ï¼åä»¥æ¥è¯¢ç»æçæå¤§ç´¢å¼å·ä¸ºç»æ­¢ç´¢å¼å·ã
         */
        this.toIndex = 19;

        /**
         * @member {boolean} [SuperMap.GetFeaturesParametersBase.prototype.returnCountOnly=false]
         * @description åªè¿åæ¥è¯¢ç»æçæ»æ°ã
         */
        this.returnCountOnly = false;

        /**
         * @member {number} [SuperMap.GetFeaturesParametersBase.prototype.maxFeatures=1000]
         * @description è¿è¡ SQL æ¥è¯¢æ¶ï¼ç¨äºè®¾ç½®æå¡ç«¯è¿åæ¥è¯¢ç»ææ¡ç®æ°éã
         */
        this.maxFeatures = null;

        /**
         * @member {Object} SuperMap.GetFeaturesParametersBase.prototype.aggregations
         * @description èåæ¥è¯¢åæ°ï¼è¯¥åæ°ä»æ¯ææ°æ®æ¥æº Elasticsearch æå¡çæ°æ®æå¡ã
         */
        this.aggregations = null;

        Util.extend(this, options);

        this.CLASS_NAME = "SuperMap.GetFeaturesParametersBase";
    }

    /**
     *
     * @function SuperMap.GetFeaturesParametersBase.prototype.destroy
     * @description éæ¾èµæºï¼å°å¼ç¨èµæºçå±æ§ç½®ç©ºã
     */
    destroy() {
        var me = this;
        me.datasetNames = null;
        me.returnContent = null;
        me.fromIndex = null;
        me.toIndex = null;
        me.maxFeatures = null;
        if (me.aggregation) {
            me.aggregation = null;
        }
    }
}

SuperMap.GetFeaturesParametersBase = GetFeaturesParametersBase_GetFeaturesParametersBase;
// CONCATENATED MODULE: ./src/common/iServer/JoinItem.js
/* CopyrightÂ© 2000 - 2019 SuperMap Software Co.Ltd. All rights reserved.
 * This program are made available under the terms of the Apache License, Version 2.0
 * which accompanies this distribution and is available at http://www.apache.org/licenses/LICENSE-2.0.html.*/



/**
 * @class SuperMap.JoinItem
 * @category iServer
 * @classdesc è¿æ¥ä¿¡æ¯ç±»ã
 * è¯¥ç±»ç¨äºç¢éæ°æ®éä¸å¤é¨è¡¨çè¿æ¥ãå¤é¨è¡¨å¯ä»¥ä¸ºå¦ä¸ä¸ªç¢éæ°æ®éï¼å¶ä¸­çº¯å±æ§æ°æ®éä¸­æ²¡æç©ºé´å ä½ä¿¡æ¯ï¼æå¯¹åºç DBMS è¡¨ï¼ä¹å¯ä»¥æ¯ç¨æ·èªå»ºçä¸å¡è¡¨ã
 * éè¦æ³¨æçæ¯ï¼ç¢éæ°æ®éä¸å¤é¨è¡¨å¿é¡»å±äºåä¸æ°æ®æºãè¡¨ä¹é´çèç³»çå»ºç«æä¸¤ç§æ¹å¼ï¼ä¸ç§æ¯è¿æ¥ï¼joinï¼ï¼ä¸ç§æ¯å³èï¼linkï¼ã
 * è¿æ¥ï¼å®éä¸æ¯ä¾æ®ç¸åçå­æ®µå°ä¸ä¸ªå¤é¨è¡¨è¿½å å°æå®çè¡¨ï¼èå³èæ¯åºäºä¸ä¸ªç¸åçå­æ®µå®ä¹äºä¸¤ä¸ªè¡¨æ ¼ä¹é´çèç³»ï¼ä½ä¸æ¯å®éçè¿½å ã
 * ç¨äºè¿æ¥ä¸¤ä¸ªè¡¨çå­æ®µçåç§°ä¸ä¸å®ç¸åï¼ä½ç±»åå¿é¡»ä¸è´ãå½ä¸¤ä¸ªè¡¨æ ¼ä¹é´å»ºç«äºè¿æ¥ï¼éè¿å¯¹ä¸»è¡¨è¿è¡æä½ï¼å¯ä»¥å¯¹å¤é¨è¡¨è¿è¡æ¥è¯¢ï¼å¶ä½ä¸é¢å¾ä»¥ååæç­ã
 * å½ä¸¤ä¸ªè¡¨æ ¼ä¹é´æ¯ä¸å¯¹ä¸æå¤å¯¹ä¸çå³ç³»æ¶ï¼å¯ä»¥ä½¿ç¨ join è¿æ¥ãå½ä¸ºå¤å¯¹ä¸çå³ç³»æ¶ï¼åè®¸æå®å¤ä¸ªå­æ®µä¹é´çå³èã
 *ï¼æ³¨æï¼SuperMap.JoinItem ç®åæ¯æå·¦è¿æ¥ååè¿æ¥ï¼ä¸æ¯æå¨è¿æ¥åå³è¿æ¥ï¼UDB å¼æä¸æ¯æåè¿æ¥ãå¹¶ä¸ç¨äºå»ºç«è¿æ¥çä¸¤ä¸ªè¡¨å¿é¡»å¨åä¸ä¸ªæ°æ®æºä¸ã)
 * @param {Object} options - åæ°ã 
 * @param {string} options.foreignTableName - å¤é¨è¡¨çåç§°ã 
 * @param {string} options.joinFilter - ç¢éæ°æ®éä¸å¤é¨è¡¨ä¹é´çè¿æ¥è¡¨è¾¾å¼ï¼å³è®¾å®ä¸¤ä¸ªè¡¨ä¹é´å³èçå­æ®µã 
 * @param {SuperMap.JoinType} options.joinType - ä¸¤ä¸ªè¡¨ä¹é´è¿æ¥ç±»åã 
 * @example ä¸é¢ä»¥ SQL æ¥è¯¢è¯´æ joinItem çä½¿ç¨æ¹æ³ï¼
 *(start code)
 *   function queryBySQL() {
     *       // è®¾ç½®ä¸å¤é¨è¡¨çè¿æ¥ä¿¡æ¯
     *       var joinItem = new SuperMap.JoinItem({
     *           foreignTableName: "foreignTable",
     *           joinFilter: "foreignTable.CONTINENT = Countries.CONTINENT",
     *           joinType: "LEFTJOIN"
     *       })
     *       var queryParam, queryBySQLParams, queryBySQLService;
     *       // è®¾ç½®æ¥è¯¢åæ°ï¼å¨æ¥è¯¢åæ°ä¸­æ·»å joinItemå³èæ¡ä»¶ä¿¡æ¯
     *       queryParam = new SuperMap.FilterParameter({
     *            name: "Countries@World",
     *            joinItems: [joinItem]
     *         }),
     *       queryBySQLParams = new SuperMap.QueryBySQLParameters({
     *             queryParams: [queryParam]
     *         }),
     *       queryBySQLService = new SuperMap.QueryBySQLService(url, {
     *             eventListeners: { "processCompleted": processCompleted, "processFailed": processFailed}
     *         });
     *       queryBySQLService.processAsync(queryBySQLParams);
     *  }
 *  function processCompleted(queryEventArgs) {//todo}
 *  function processFailed(e) {//todo}
 * (end)
 */
class JoinItem_JoinItem {

    constructor(options) {
        /**
         * @member {string} SuperMap.JoinItem.prototype.foreignTableName
         * @description å¤é¨è¡¨çåç§°ã
         * å¦æå¤é¨è¡¨çåç§°æ¯ä»¥ âè¡¨å@æ°æ®æºåâ å½åæ¹å¼ï¼åè¯¥å±æ§åªéèµå¼è¡¨åã
         * ä¾å¦ï¼å¤é¨è¡¨ Name@changchunï¼Name ä¸ºè¡¨åï¼changchun ä¸ºæ°æ®æºåç§°ï¼åè¯¥å±æ§çèµå¼åºä¸ºï¼Nameã
         */
        this.foreignTableName = null;

        /**
         * @member {string} SuperMap.JoinItem.prototype.joinFilter
         * @description ç¢éæ°æ®éä¸å¤é¨è¡¨ä¹é´çè¿æ¥è¡¨è¾¾å¼ï¼å³è®¾å®ä¸¤ä¸ªè¡¨ä¹é´å³èçå­æ®µã
         * ä¾å¦ï¼å°æ¿å±é¢æ°æ®éï¼Buildingï¼ç district å­æ®µä¸æ¿å±æ¥æèççº¯å±æ§æ°æ®éï¼Ownerï¼ç region å­æ®µç¸è¿æ¥ï¼
         * ä¸¤ä¸ªæ°æ®éå¯¹åºçè¡¨åç§°åå«ä¸º Table_Building å Table_Ownerï¼
         * åè¿æ¥è¡¨è¾¾å¼ä¸º Table_Building.district = Table_Owner.regionã
         * å½æå¤ä¸ªå­æ®µç¸è¿æ¥æ¶ï¼ç¨ AND å°å¤ä¸ªè¡¨è¾¾å¼ç¸è¿ã
         */
        this.joinFilter = null;

        /**
         * @member {SuperMap.JoinType} SuperMap.JoinItem.prototype.joinType
         * @description ä¸¤ä¸ªè¡¨ä¹é´è¿æ¥ç±»åã
         * è¿æ¥ç±»åå³å®äºå¯¹ä¸¤ä¸ªè¡¨è¿è¡è¿æ¥æ¥è¯¢åè¿åçè®°å½çæåµã
         */
        this.joinType = null;

        if (options) {
            Util.extend(this, options);
        }
        this.CLASS_NAME = "SuperMap.JoinItem";
    }


    /**
     * @function SuperMap.JoinItem.prototype.destroy
     * @description éæ¾èµæºï¼å°å¼ç¨èµæºçå±æ§ç½®ç©ºã
     */
    destroy() {
        var me = this;
        me.foreignTableName = null;
        me.joinFilter = null;
        me.joinType = null;
    }

    /**
     * @function SuperMap.JoinItem.prototype.toServerJSONObject
     * @description è½¬æ¢æå¯¹åºç JSON æ ¼å¼å¯¹è±¡ã
     */
    toServerJSONObject() {
        var dataObj = {};
        dataObj = Util.copyAttributes(dataObj, this);
        //joinFilteråºæ¬æ¯ä¸ªçº¯å±æ§å¯¹è±¡ï¼è¿éä¸ååè½¬æ¢
        return dataObj;
    }
}

SuperMap.JoinItem = JoinItem_JoinItem;
// CONCATENATED MODULE: ./src/common/iServer/LinkItem.js
/* CopyrightÂ© 2000 - 2019 SuperMap Software Co.Ltd. All rights reserved.
 * This program are made available under the terms of the Apache License, Version 2.0
 * which accompanies this distribution and is available at http://www.apache.org/licenses/LICENSE-2.0.html.*/




/**
 * @class SuperMap.LinkItem
 * @constructs SuperMap.LinkItem
 * @category iServer
 * @classdesc å³èä¿¡æ¯ç±»ã
 * @description è¯¥ç±»ç¨äºç¢éæ°æ®éä¸å¤é¨è¡¨çå³èã å¤é¨è¡¨æ¯å¦ä¸ä¸ªæ°æ®éï¼å¶ä¸­çº¯å±æ§æ°æ®éä¸­æ²¡æç©ºé´å ä½ä¿¡æ¯ï¼ä¸­ç DBMS è¡¨,
 *              ç¢éæ°æ®éä¸å¤é¨è¡¨å¯ä»¥å±äºä¸åçæ°æ®æºï¼ä½æ°æ®æºç±»åç®ååªæ¯æ SQL Server å Oracle ç±»åãä½¿ç¨ LinkItem æ¶ï¼
 *              ç©ºé´æ°æ®åå±æ§æ°æ®å¿é¡»æ»¡è¶³å³èæ¡ä»¶ï¼å³ä¸»ç©ºé´æ°æ®éä¸å¤é¨å±æ§è¡¨ä¹é´å­å¨å³èå­æ®µã{@link SuperMap.LinkItem}
 *              åªæ¯æå·¦è¿æ¥ï¼UDBãPostgreSQL å DB2 æ°æ®æºä¸æ¯æ {@link SuperMap.LinkItem}ï¼å¦å¤ï¼ç¨äºå»ºç«å³èå³ç³»çä¸¤ä¸ªè¡¨å¯ä»¥ä¸å¨åä¸ä¸ªæ°æ®æºä¸ãæ³¨æï¼<br>
 * 1. ä½¿ç¨ {@link SuperMap.LinkItem} ççº¦ææ¡ä»¶ä¸ºï¼ç©ºé´æ°æ®åå±æ§æ°æ®å¿é¡»æå³èæ¡ä»¶ï¼å³ä¸»ç©ºé´æ°æ®éä¸å¤é¨å±æ§è¡¨ä¹é´å­å¨å³èå­æ®µï¼<br>
 * 2. ä½¿ç¨å¤å³èè¡¨å¶ä½ä¸é¢å¾æ¶ï¼æå³èçå­æ®µå¿é¡»è®¾ç½®è¡¨åï¼ä¾å¦ï¼å¦ææå³èçå­æ®µä¸º BaseMap_R æ°æ®éç SmIDï¼å°±è¦åæ BaseMap_R.SMIDã
 * @param {Object} options - åæ°ã
 * @param {SuperMap.DatasourceConnectionInfo} options.datasourceConnectionInfo - å³èçå¤é¨æ°æ®æºä¿¡æ¯ã
 * @param {Array.<string>} options.foreignKeys - ä¸»ç©ºé´æ°æ®éçå¤é®ã
 * @param {string} options.foreignTable - å³èçå¤é¨å±æ§è¡¨çåç§°ã
 * @param {Array.<string>} options.linkFields - æ¬²ä¿ççå¤é¨å±æ§è¡¨çå­æ®µã
 * @param {string} options.linkFilter - ä¸å¤é¨å±æ§è¡¨çè¿æ¥æ¡ä»¶ã
 * @param {string} options.name - æ­¤å³èä¿¡æ¯å¯¹è±¡çåç§°ã
 * @param {Array.<string>} options.primaryKeys - éè¦å³èçå¤é¨å±æ§è¡¨çä¸»é®ã
 * @example ä¸é¢ä»¥ SQL æ¥è¯¢è¯´æ linkitem çä½¿ç¨æ¹æ³ï¼
 *  function queryBySQL() {
 *      // è®¾ç½®å³èçå¤é¨æ°æ®åºä¿¡æ¯,aliasè¡¨ç¤ºæ°æ®åºå«å
 *      var dc = new SuperMap.DatasourceConnectionInfo({
 *          dataBase: "RelQuery",
 *          server: "192.168.168.39",
 *          user: "sa",
 *          password: "map",
 *          driver: "SQL Server",
 *          connect: true,
 *          OpenLinkTable: false,
 *          alias: "RelQuery",
 *          engineType: EngineType.SQLPLUS,
 *          readOnly: false,
 *          exclusive: false
 *      });
 *     // è®¾ç½®å³èä¿¡æ¯
 *      var linkItem = new SuperMap.LinkItem({
 *          datasourceConnectionInfo: dc,
 *          foreignKeys: ["name"],
 *          foreignTable: "Pop_2011",
 *          linkFields: ["SmID as Pid","pop"],
 *          name: "link",
 *          primatryKeys: ["name"],
 *      });
 *      // è®¾ç½®æ¥è¯¢åæ°ï¼å¨æ¥è¯¢åæ°ä¸­æ·»å linkItemå³èæ¡ä»¶ä¿¡æ¯
 *      var queryParam, queryBySQLParams, queryBySQLService;
 *      queryParam = new SuperMap.FilterParameter({
 *          name: "Province@RelQuery",
 *          fields: ["SmID","name"],
 *          attributeFilter: "SmID<7",
 *          linkItems: [linkItem]
 *       }),
 *      queryBySQLParams = new SuperMap.QueryBySQLParameters({
 *           queryParams: [queryParam]
 *              }),
 *      queryBySQLService = new SuperMap.QueryBySQLService(url, {
     *          eventListeners: {
     *              "processCompleted": processCompleted,
     *              "processFailed": processFailed
     *              }
     *      });
     *      queryBySQLService.processAsync(queryBySQLParams);
     *  }
 *  function processCompleted(queryEventArgs) {//todo}
 *  function processFailed(e) {//todo}
 *
 */
class LinkItem_LinkItem {


    constructor(options) {

        /**
         * @member {SuperMap.DatasourceConnectionInfo} SuperMap.LinkItem.prototype.datasourceConnectionInfo
         * @description å³èçå¤é¨æ°æ®æºä¿¡æ¯ã
         */
        this.datasourceConnectionInfo = null;

        /**
         * @member {Array.<string>} SuperMap.LinkItem.prototype.foreignKeys
         * @description ä¸»ç©ºé´æ°æ®éçå¤é®ã
         */
        this.foreignKeys = null;

        /**
         * @member {string} SuperMap.LinkItem.prototype.foreignTable
         * @description å³èçå¤é¨å±æ§è¡¨çåç§°ï¼ç®åä»æ¯æ Supermap ç®¡ççè¡¨ï¼å³å¦ä¸ä¸ªç¢éæ°æ®éæå¯¹åºç DBMS è¡¨ã
         */
        this.foreignTable = null;

        /**
         * @member {Array.<string>} SuperMap.LinkItem.prototype.linkFields
         * @description æ¬²ä¿ççå¤é¨å±æ§è¡¨çå­æ®µãå¦æä¸è®¾ç½®å­æ®µæèè®¾ç½®çå­æ®µå¨å¤é¨å±æ§è¡¨ä¸­ä¸å­å¨çè¯åä¸è¿
         * åä»»ä½å¤é¨å±æ§è¡¨çå±æ§ä¿¡æ¯ãå¦ææ¬²ä¿ççå¤é¨è¡¨å­æ®µä¸ä¸»è¡¨å­æ®µå­å¨ååï¼åè¿éè¦æå®ä¸ä¸ªä¸å­å¨å­æ®µåä½ä¸ºå¤é¨è¡¨çå­æ®µå«åã
         */
        this.linkFields = null;

        /**
         * @member {string} SuperMap.LinkItem.prototype.linkFilter
         * @description ä¸å¤é¨å±æ§è¡¨çè¿æ¥æ¡ä»¶ã
         */
        this.linkFilter = null;

        /**
         * @member {string} SuperMap.LinkItem.prototype.name
         * @description æ­¤å³èä¿¡æ¯å¯¹è±¡çåç§°ã
         */
        this.name = null;

        /**
         * @member {Array.<string>} SuperMap.LinkItem.prototype.primaryKeys
         * @description éè¦å³èçå¤é¨å±æ§è¡¨çä¸»é®ã
         */
        this.primaryKeys = null;

        if (options) {
            Util.extend(this, options);
        }

        this.CLASS_NAME = "SuperMap.LinkItem";
    }

    /**
     * @function SuperMap.LinkItem.prototype.destroy
     * @description éæ¾èµæºï¼å°å¼ç¨èµæºçå±æ§ç½®ç©ºã
     */
    destroy() {
        var me = this;
        if (me.datasourceConnectionInfo instanceof DatasourceConnectionInfo_DatasourceConnectionInfo) {
            me.datasourceConnectionInfo.destroy();
            me.datasourceConnectionInfo = null;
        }
        me.foreignKeys = null;
        me.foreignTable = null;
        me.linkFields = null;
        me.linkFilter = null;
        me.name = null;
        me.primaryKeys = null;
    }

}

SuperMap.LinkItem = LinkItem_LinkItem;
// CONCATENATED MODULE: ./src/common/iServer/FilterParameter.js
/* CopyrightÂ© 2000 - 2019 SuperMap Software Co.Ltd. All rights reserved.
 * This program are made available under the terms of the Apache License, Version 2.0
 * which accompanies this distribution and is available at http://www.apache.org/licenses/LICENSE-2.0.html.*/





/**
 * @class SuperMap.FilterParameter
 * @category iServer
 * @classdesc æ¥è¯¢è¿æ»¤æ¡ä»¶åæ°ç±»ãè¯¥ç±»ç¨äºè®¾ç½®æ¥è¯¢æ°æ®éçæ¥è¯¢è¿æ»¤åæ°ã
 * @param {Object} options - åæ°ã 
 * @param {string} options.attributeFilter - å±æ§è¿æ»¤æ¡ä»¶ã 
 * @param {string} options.name - æ¥è¯¢æ°æ®éåç§°æèå¾å±åç§°ã 
 * @param {Array.<SuperMap.JoinItem>} [options.joinItems] - ä¸å¤é¨è¡¨çè¿æ¥ä¿¡æ¯ SuperMap.JoinItem æ°ç»ã 
 * @param {Array.<SuperMap.LinkItem>} [options.linkItems] - ä¸å¤é¨è¡¨çå³èä¿¡æ¯ SuperMap.LinkItem æ°ç»ã 
 * @param {Array.<string>} [options.ids] - æ¥è¯¢ id æ°ç»ï¼å³å±æ§è¡¨ä¸­ç SmID å¼ã 
 * @param {string} [options.orderBy] - æ¥è¯¢æåºçå­æ®µï¼orderBy çå­æ®µé¡»ä¸ºæ°å¼åçã 
 * @param {string} [options.groupBy] - æ¥è¯¢åç»æ¡ä»¶çå­æ®µã 
 * @param {Array.<string>} [options.fields] - æ¥è¯¢å­æ®µæ°ç»ã 
 */
class FilterParameter_FilterParameter {


    constructor(options) {
        /**
         * @member {string} SuperMap.FilterParameter.prototype.attributeFilter
         * @description å±æ§è¿æ»¤æ¡ä»¶ã
         * ç¸å½äº SQL è¯­å¥ä¸­ç WHERE å­å¥ï¼å¶æ ¼å¼ä¸ºï¼WHERE <æ¡ä»¶è¡¨è¾¾å¼>ï¼
         * attributeFilter å°±æ¯å¶ä¸­çâæ¡ä»¶è¡¨è¾¾å¼âã
         * è¯¥å­æ®µçç¨æ³ä¸º attributeFilter = "è¿æ»¤æ¡ä»¶"ã
         * ä¾å¦ï¼è¦æ¥è¯¢å­æ®µ fieldValue å°äº100çè®°å½ï¼è®¾ç½® attributeFilter = "fieldValue < 100"ï¼
         * è¦æ¥è¯¢å­æ®µ name çå¼ä¸ºâéåºâçè®°å½ï¼è®¾ç½® attributeFilter = "name like '%éåº%'"ï¼ç­ç­ã
         */
        this.attributeFilter = null;

        /**
         * @member {string} SuperMap.FilterParameter.prototype.name
         * @description æ¥è¯¢æ°æ®éåç§°æèå¾å±åç§°ï¼æ ¹æ®å®éçæ¥è¯¢å¯¹è±¡èå®ã
         * ä¸è¬æåµä¸è¯¥å­æ®µä¸ºæ°æ®éåç§°ï¼ä½å¨è¿è¡ä¸å°å¾ç¸å³åè½çæä½æ¶ï¼
         * éè¦è®¾ç½®ä¸ºå¾å±åç§°ï¼å¾å±åç§°æ ¼å¼ï¼æ°æ®éåç§°@æ°æ®æºå«åï¼ã
         * å ä¸ºä¸ä¸ªå°å¾çå¾å±å¯è½æ¯æ¥èªäºä¸åæ°æ®æºçæ°æ®éï¼
         * èä¸åçæ°æ®æºä¸­å¯è½å­å¨ååçæ°æ®éï¼
         * ä½¿ç¨æ°æ®éåç§°ä¸è½å¯ä¸çç¡®å®æ°æ®éï¼
         * æä»¥å¨è¿è¡ä¸å°å¾ç¸å³åè½çæä½æ¶ï¼è¯¥å¼éè¦è®¾ç½®ä¸ºå¾å±åç§°ã
         */
        this.name = null;

        /**
         * @member {Array.<SuperMap.JoinItem>} [SuperMap.FilterParameter.prototype.joinItems]
         * @description ä¸å¤é¨è¡¨çè¿æ¥ä¿¡æ¯ SuperMap.JoinItem æ°ç»ã
         */
        this.joinItems = null;

        /**
         * @member {Array.<SuperMap.LinkItem>} [SuperMap.FilterParameter.prototype.linkItems]
         * @description ä¸å¤é¨è¡¨çå³èä¿¡æ¯ LinkItem æ°ç»ã
         */
        this.linkItems = null;

        /**
         * @member {Array.<string>} [SuperMap.FilterParameter.prototype.ids]
         * @description æ¥è¯¢ id æ°ç»ï¼å³å±æ§è¡¨ä¸­ç SmID å¼ã
         */
        this.ids = null;

        /**
         * @member {string} [SuperMap.FilterParameter.prototype.orderBy]
         * @description æ¥è¯¢æåºçå­æ®µï¼orderByçå­æ®µé¡»ä¸ºæ°å¼åçã
         * ç¸å½äº SQL è¯­å¥ä¸­ç ORDER BY å­å¥ï¼å¶æ ¼å¼ä¸ºï¼ORDER BY <åå>ï¼
         * ååå³å±æ§è¡¨ä¸­æ¯ä¸åçåç§°ï¼ååå¯ç§°ä¸ºå±æ§ï¼å¨ SuperMap ä¸­åç§°ä¸ºå­æ®µã
         * å¯¹åä¸ªå­æ®µæåºæ¶ï¼è¯¥å­æ®µçç¨æ³ä¸º orderBy = "å­æ®µå"ï¼
         * å¯¹å¤ä¸ªå­æ®µæåºæ¶ï¼å­æ®µä¹é´ä»¥è±æéå·è¿è¡åå²ï¼ç¨æ³ä¸º orderBy = "å­æ®µå1, å­æ®µå2"ã
         * ä¾å¦ï¼ç°æä¸ä¸ªå½å®¶æ°æ®éï¼å®æä¸¤ä¸ªå­æ®µåå«ä¸ºâSmAreaâåâpop_1994âï¼
         * åå«è¡¨ç¤ºå½å®¶çé¢ç§¯å1994å¹´çåå½äººå£æ°éã
         * å¦æè¦æç§åå½äººå£æ°éå¯¹è®°å½è¿è¡æåºï¼å orderBy = "pop_1994"ï¼
         * å¦æè¦ä»¥é¢ç§¯åäººå£è¿è¡æåºï¼å orderBy = "SmArea, pop_1994"ã
         */
        this.orderBy = null;


        /**
         * @member {string} [SuperMap.FilterParameter.prototype.groupBy]
         * @description æ¥è¯¢åç»æ¡ä»¶çå­æ®µã
         * ç¸å½äº SQL è¯­å¥ä¸­ç GROUP BY å­å¥ï¼å¶æ ¼å¼ä¸ºï¼GROUP BY <åå>ï¼
         * ååå³å±æ§è¡¨ä¸­æ¯ä¸åçåç§°ï¼ååå¯ç§°ä¸ºå±æ§ï¼å¨ SuperMap ä¸­åç§°ä¸ºå­æ®µã
         * å¯¹åä¸ªå­æ®µåç»æ¶ï¼è¯¥å­æ®µçç¨æ³ä¸º groupBy = "å­æ®µå"ï¼
         * å¯¹å¤ä¸ªå­æ®µåç»æ¶ï¼å­æ®µä¹é´ä»¥è±æéå·è¿è¡åå²ï¼ç¨æ³ä¸º groupBy = "å­æ®µå1, å­æ®µå2"ã
         * ä¾å¦ï¼ç°æä¸ä¸ªå¨çåå¸æ°æ®éï¼è¯¥æ°æ®éæä¸¤ä¸ªå­æ®µåå«ä¸ºâContinentâåâCountryâï¼
         * åå«è¡¨ç¤ºæä¸ªåå¸æå±çæ´²åå½å®¶ã
         * å¦æè¦æç§å½å®¶å¯¹å¨ççåå¸è¿è¡åç»ï¼ å¯ä»¥è®¾ç½® groupBy = "Country"ï¼
         * å¦æä»¥æ´²åå½å®¶å¯¹åå¸è¿è¡åç»ï¼è®¾ç½® groupBy = "Continent, Country"ã
         */
        this.groupBy = null;

        /**
         * @member {Array.<string>} [SuperMap.FilterParameter.prototype.fields]
         * @description æ¥è¯¢å­æ®µæ°ç»ï¼å¦æä¸è®¾ç½®åä½¿ç¨ç³»ç»è¿åçææå­æ®µã
         */
        this.fields = null;
        if (options) {
            Util.extend(this, options);
        }

        this.CLASS_NAME = "SuperMap.FilterParameter";
    }


    /**
     * @function SuperMap.FilterParameter.prototype.destroy
     * @description éæ¾èµæºï¼å°å¼ç¨èµæºçå±æ§ç½®ç©ºã
     */
    destroy() {
        var me = this;
        me.attributeFilter = null;
        me.name = null;
        if (me.joinItems) {
            for (let i = 0, joinItems = me.joinItems, len = joinItems.length; i < len; i++) {
                joinItems[i].destroy();
            }
            me.joinItems = null;
        }
        if (me.linkItems) {
            for (let i = 0, linkItems = me.linkItems, len = linkItems.length; i < len; i++) {
                linkItems[i].destroy();
            }
            me.linkItems = null;
        }
        me.ids = null;
        me.orderBy = null;
        me.groupBy = null;
        me.fields = null;
    }


}

SuperMap.FilterParameter = FilterParameter_FilterParameter;
// CONCATENATED MODULE: ./src/common/iServer/GetFeaturesBySQLParameters.js
/* CopyrightÂ© 2000 - 2019 SuperMap Software Co.Ltd. All rights reserved.
 * This program are made available under the terms of the Apache License, Version 2.0
 * which accompanies this distribution and is available at http://www.apache.org/licenses/LICENSE-2.0.html.*/





/**
 * @class SuperMap.GetFeaturesBySQLParameters
 * @category iServer Data FeatureResults
 * @classdesc æ°æ®æå¡ä¸­æ°æ®é SQL æ¥è¯¢åæ°ç±»ã
 * @param {Object} options - åæ°ã 
 * @param {SuperMap.FilterParameter} options.queryParameter - æ¥è¯¢è¿æ»¤æ¡ä»¶åæ°ã 
 * @param {Array.<string>} options.datasetNames - æ°æ®ééåä¸­çæ°æ®éåç§°åè¡¨ã 
 * @param {boolean} [options.returnContent=true] - æ¯å¦ç´æ¥è¿åæ¥è¯¢ç»æã 
 * @param {number} [options.fromIndex=0] - æ¥è¯¢ç»æçæå°ç´¢å¼å·ã 
 * @param {number} [options.toIndex=19] - æ¥è¯¢ç»æçæå¤§ç´¢å¼å·ã 
 * @extends {SuperMap.GetFeaturesParametersBase}
 */
class GetFeaturesBySQLParameters_GetFeaturesBySQLParameters extends GetFeaturesParametersBase_GetFeaturesParametersBase {


    constructor(options) {
        super(options);
        /**
         * @member {string} SuperMap.GetFeaturesBySQLParameters.prototype.getFeatureMode
         * @description æ°æ®éæ¥è¯¢æ¨¡å¼ã
         */
        this.getFeatureMode = "SQL";

        /**
         * @member {SuperMap.FilterParameter} SuperMap.GetFeaturesBySQLParameters.prototype.queryParameter
         * @description æ¥è¯¢è¿æ»¤æ¡ä»¶åæ°ç±»ã
         */
        this.queryParameter = null;

        Util.extend(this, options);

        this.CLASS_NAME = "SuperMap.GetFeaturesBySQLParameters";
    }

    /**
     * @function SuperMap.GetFeaturesBySQLParameters.prototype.destroy
     * @override
     */
    destroy() {
        super.destroy();
        var me = this;
        me.getFeatureMode = null;
        if (me.queryParameter) {
            me.queryParameter.destroy();
            me.queryParameter = null;
        }
    }

    /**
     * @function SuperMap.GetFeaturesBySQLParameters.prototype.toJsonParameters
     * @description å° SuperMap.GetFeaturesBySQLParameters å¯¹è±¡è½¬æ¢ä¸º JSON å­ç¬¦ä¸²ã
     * @param {SuperMap.GetFeaturesBySQLParameters} params - æ°æ®é SQL æ¥è¯¢åæ°å¯¹è±¡ã
     * @returns {string} è½¬ååç JSON å­ç¬¦ä¸²ã
     */
    static toJsonParameters(params) {
        var paramsBySql = {
            datasetNames: params.datasetNames,
            getFeatureMode: "SQL",
            queryParameter: params.queryParameter
        };
        if (params.maxFeatures && !isNaN(params.maxFeatures)) {
            paramsBySql.maxFeatures = params.maxFeatures;
        }
        if (params.aggregations) {
            paramsBySql.aggregations = params.aggregations;
        }
        return Util.toJSON(paramsBySql);
    }

}

SuperMap.GetFeaturesBySQLParameters = GetFeaturesBySQLParameters_GetFeaturesBySQLParameters;
// CONCATENATED MODULE: ./src/common/commontypes/Credential.js
/* CopyrightÂ© 2000 - 2019 SuperMap Software Co.Ltd. All rights reserved.
 * This program are made available under the terms of the Apache License, Version 2.0
 * which accompanies this distribution and is available at http://www.apache.org/licenses/LICENSE-2.0.html.*/


/**
 * @class SuperMap.Credential
 * @category Security
 * @classdesc SuperMap çå®å¨è¯ä¹¦ç±»ï¼å¶ä¸­åæ¬ token ç­å®å¨éªè¯ä¿¡æ¯ã</br>
 * éè¦ä½¿ç¨ç¨æ·ååå¯ç å¨ï¼"http://localhost:8090/iserver/services/security/tokens" ä¸ç³è¯· valueã</br>
 * è·å¾å½¢å¦ï¼"2OMwGmcNlrP2ixqv1Mk4BuQMybOGfLOrljruX6VcYMDQKc58Sl9nMHsqQaqeBx44jRvKSjkmpZKK1L596y7skQ.." ç valueã</br>
 * ç®åæ¯æçåè½åæ¬ï¼å°å¾æå¡ãä¸é¢å¾ãéç®ãæ¥è¯¢ãå¬äº¤æ¢ä¹ãç©ºé´åæãç½ç»åæï¼ä¸æ¯æè½®è¯¢åè½ã</br>
 * @param {string} value - è®¿é®åå®å¨éå¶çæå¡æ¶ç¨äºéè¿å®å¨è®¤è¯çéªè¯ä¿¡æ¯ã
 * @param {string} [name='token'] - éªè¯ä¿¡æ¯åç¼ï¼name=value é¨åç name é¨åã
 * @example
 * var pixcel = new SuperMap.Credential("valueString","token");
 * pixcel.destroy();
 */
class Credential {


    constructor(value, name) {

        /**
         * @member {string} SuperMap.Bounds.prototype.value
         * @description è®¿é®åå®å¨éå¶çæå¡æ¶ç¨äºéè¿å®å¨è®¤è¯çéªè¯ä¿¡æ¯ã
         */
        this.value = value ? value : "";

        /**
         * @member {string} [SuperMap.Bounds.prototype.name='token']
         * @description éªè¯ä¿¡æ¯åç¼ï¼name=value é¨åç name é¨åã
         */
        this.name = name ? name : "token";
        this.CLASS_NAME = "SuperMap.Credential";
    }

    /**
     * @function SuperMap.Credential.prototype.getUrlParameters
     * @example
     * var credential = new SuperMap.Credential("valueString","token");
     * //è¿é str = "token=valueString";
     * var str = credential.getUrlParameters();
     * @returns {string} è¿åå®å¨ä¿¡æ¯ç»æç url çæ®µã
     */
    getUrlParameters() {
        //å½éè¦å¶ä»å®å¨ä¿¡æ¯çæ¶åï¼åéè¦return this.name + "=" + this.value + "&" + "...";çå½¢å¼æ·»å ã
        return this.name + "=" + this.value;
    }


    /**
     * @function SuperMap.Bounds.prototype.getValue
     * @description è·å valueã
     * @example
     * var credential = new SuperMap.Credential("2OMwGmcNlrP2ixqv1Mk4BuQMybOGfLOrljruX6VcYMDQKc58Sl9nMHsqQaqeBx44jRvKSjkmpZKK1L596y7skQ..","token");
     * //è¿é str = "2OMwGmcNlrP2ixqv1Mk4BuQMybOGfLOrljruX6VcYMDQKc58Sl9nMHsqQaqeBx44jRvKSjkmpZKK1L596y7skQ..";
     * var str = credential.getValue();
     * @returns {string} è¿å value å­ç¬¦ä¸²ï¼å¨ iServer æå¡ä¸è¯¥ value å¼å³ä¸º token å¼ã
     */
    getValue() {
        return this.value;
    }

    /**
     *
     * @function SuperMap.Credential.prototype.destroy
     * @description éæ¯æ­¤å¯¹è±¡ãéæ¯åæ­¤å¯¹è±¡çææå±æ§ä¸º nullï¼èä¸æ¯åå§å¼ã
     * @example
     * var credential = new SuperMap.Credential("valueString","token");
     * credential.destroy();
     */
    destroy() {
        this.value = null;
        this.name = null;
    }

}

/**
 * @member {SuperMap.Credential} SuperMap.Credential.CREDENTIAL
 * @description è¿ä¸ªå¯¹è±¡ä¿å­ä¸ä¸ªå®å¨ç±»çå®ä¾ï¼å¨æå¡ç«¯éè¦å®å¨éªè¯çæ¶åå¿é¡»è¿è¡è®¾ç½®ã
 * @constant
 * @example
 * ä»£ç å®ä¾:
 *  // å½iServerå¯ç¨æå¡å®å¨çæ¶åï¼ä¸è¾¹çä»£ç æ¯å¿é¡»çãå®å¨è¯ä¹¦ç±»è½å¤æ¥æ¶ä¸ä¸ªvalueåä¸ä¸ªnameåæ°ã
 *  var value = "(ä»¥iServerä¸ºä¾ï¼è¿éæ¯ç³è¯·çtokenå¼)";
 *  var name = "token";
 *  // é»è®¤nameåæ°ä¸ºtokenï¼æä»¥å½ä½¿ç¨iServeræå¡çæ¶åå¯ä»¥ä¸è¿è¡è®¾ç½®ã
 *  SuperMap.Credential.CREDENTIAL = new SuperMap.Credential(value, name);
 *
 */

Credential.CREDENTIAL = null;
SuperMap.Credential = Credential;

// CONCATENATED MODULE: ./src/common/format/Format.js
/* CopyrightÂ© 2000 - 2019 SuperMap Software Co.Ltd. All rights reserved.
 * This program are made available under the terms of the Apache License, Version 2.0
 * which accompanies this distribution and is available at http://www.apache.org/licenses/LICENSE-2.0.html.*/



/**
 * @class SuperMap.Format
 * @classdesc è¯»ååç§æ ¼å¼çæ ¼å¼ç±»åºç±»ãå¶å­ç±»åºè¯¥åå«å¹¶å®ç° read å write æ¹æ³ã
 * @category BaseTypes Format
 * @param {Object} options - å¯éåæ°ã
 * @param {boolean} [options.keepData=false] - å¦æè®¾ç½®ä¸º trueï¼ data å±æ§ä¼æåè¢«è§£æçå¯¹è±¡ï¼ä¾å¦ JSON æ xml æ°æ®å¯¹è±¡ï¼ã
 * @param {Object} [options.data] - å½ keepData å±æ§è®¾ç½®ä¸º trueï¼è¿æ¯ä¼ éç» read æä½çè¦è¢«è§£æçå­ç¬¦ä¸²ã
 */
class Format_Format {


    constructor(options) {
        /**
         * @member {Object} SuperMap.Format.prototype.data 
         * @description å½ keepData å±æ§è®¾ç½®ä¸º trueï¼è¿æ¯ä¼ éç» read æä½çè¦è¢«è§£æçå­ç¬¦ä¸²ã
         */
        this.data = null;

        /**
         * APIProperty: keepData
         * @member {Object} [SuperMap.Format.prototype.keepData=false]
         * @description ä¿ææè¿è¯»å°çæ°æ®çå¼ç¨ï¼éè¿ <data> å±æ§ï¼ã
         */
        this.keepData = false;

        Util.extend(this, options);
        this.options = options;

        this.CLASS_NAME = "SuperMap.Format";
    }

    /**
     * @function SuperMap.Format.prototype.destroy
     * @description éæ¯è¯¥æ ¼å¼ç±»ï¼éæ¾ç¸å³èµæºã
     */
    destroy() {
        //ç¨æ¥éæ¯è¯¥æ ¼å¼ç±»ï¼éæ¾ç¸å³èµæº
    }

    /**
     * @function SuperMap.Format.prototype.read
     * @description æ¥ä»å­ç¬¦ä¸²ä¸­è¯»åæ°æ®ã
     * @param {string} data - è¯»åçæ°æ®ã
     */
    read(data) { // eslint-disable-line no-unused-vars
        //ç¨æ¥ä»å­ç¬¦ä¸²ä¸­è¯»åæ°æ®
    }

    /**
     * @function SuperMap.Format.prototype.write
     * @description å°å¯¹è±¡åæå­ç¬¦ä¸²ã
     * @param {Object} object - å¯åºååçå¯¹è±¡ã
     * @returns {string} å¯¹è±¡è¢«åæå­ç¬¦ä¸²ã
     */
    write(object) { // eslint-disable-line no-unused-vars
        //ç¨æ¥åå­ç¬¦ä¸²
    }
}

SuperMap.Format = Format_Format;

// CONCATENATED MODULE: ./src/common/format/JSON.js
/* CopyrightÂ© 2000 - 2019 SuperMap Software Co.Ltd. All rights reserved.
 * This program are made available under the terms of the Apache License, Version 2.0
 * which accompanies this distribution and is available at http://www.apache.org/licenses/LICENSE-2.0.html.*/



/**
 * @class SuperMap.Format.JSON
 * @classdesc å®å¨çè¯»å JSON çè§£æç±»ãä½¿ç¨ {@link SuperMap.Format.JSON} æé å½æ°åå»ºæ°å®ä¾ã
 * @category BaseTypes Format
 * @param {Object} [options] - åæ°ã
 * @param {string} [options.indent="    "] - ç¨äºæ ¼å¼åè¾åºï¼indent å­ç¬¦ä¸²ä¼å¨æ¯æ¬¡ç¼©è¿çæ¶åä½¿ç¨ä¸æ¬¡ã
 * @param {string} [options.space=" "] - ç¨äºæ ¼å¼åè¾åºï¼space å­ç¬¦ä¸²ä¼å¨åå¼å¯¹ç ":" åè¾¹æ·»å ã
 * @param {string} [options.newline="\n"] - ç¨äºæ ¼å¼åè¾åº, newline å­ç¬¦ä¸²ä¼ç¨å¨æ¯ä¸ä¸ªåå¼å¯¹ææ°ç»é¡¹æ«å°¾ã
 * @param {number} [options.level=0] - ç¨äºæ ¼å¼åè¾åº, è¡¨ç¤ºçæ¯ç¼©è¿çº§å«ã
 * @param {boolean} [options.pretty=false] - æ¯å¦å¨åºååçæ¶åä½¿ç¨é¢å¤çç©ºæ ¼æ§å¶ç»æãå¨ write æ¹æ³ä¸­ä½¿ç¨ã
 * @param {boolean} [options.nativeJSON] - éè¦è¢«æ³¨åççå¬å¨å¯¹è±¡ã
 * @extends {SuperMap.Format}
 */
class JSON_JSONFormat extends Format_Format {

    constructor(options) {
        super(options);
        /**
         * @member {string} [SuperMap.Format.JSON.prototype.indent="    "]
         * @description ç¨äºæ ¼å¼åè¾åºï¼indent å­ç¬¦ä¸²ä¼å¨æ¯æ¬¡ç¼©è¿çæ¶åä½¿ç¨ä¸æ¬¡ã
         */
        this.indent = "    ";

        /**
         * @member {string} [SuperMap.Format.JSON.prototype.space=" "]
         * @description ç¨äºæ ¼å¼åè¾åºï¼space å­ç¬¦ä¸²ä¼å¨åå¼å¯¹ç ":" åè¾¹æ·»å ã
         */
        this.space = " ";

        /**
         * @member {string} [SuperMap.Format.JSON.prototype.newline="\n"]
         * @description ç¨äºæ ¼å¼åè¾åº, newline å­ç¬¦ä¸²ä¼ç¨å¨æ¯ä¸ä¸ªåå¼å¯¹ææ°ç»é¡¹æ«å°¾ã
         */
        this.newline = "\n";

        /**
         * @member {integer} [SuperMap.Format.JSON.prototype.level=0] 
         * @description ç¨äºæ ¼å¼åè¾åº, è¡¨ç¤ºçæ¯ç¼©è¿çº§å«ã
         */
        this.level = 0;

        /**
         * @member {boolean} [SuperMap.Format.JSON.prototype.pretty=false]
         * @description æ¯å¦å¨åºååçæ¶åä½¿ç¨é¢å¤çç©ºæ ¼æ§å¶ç»æãå¨ write æ¹æ³ä¸­ä½¿ç¨ã
         */
        this.pretty = false;

        /**
         * @member {boolean} SuperMap.Format.JSON.prototype.nativeJSON 
         * @description å¤æ­æµè§å¨æ¯å¦åçæ¯æ JSON æ ¼å¼æ°æ®ã
         */
        this.nativeJSON = (function () {
            return !!(window.JSON && typeof JSON.parse === "function" && typeof JSON.stringify === "function");
        })();

        this.CLASS_NAME = "SuperMap.Format.JSON";
        /**
         * @member SuperMap.Format.JSON.prototype.serialize
         * @description æä¾ä¸äºç±»åå¯¹è±¡è½¬ JSON å­ç¬¦ä¸²çæ¹æ³ã
         */
        this.serialize = {
            /**
             * @function SuperMap.Format.JSON.serialize.object
             * @description æå¯¹è±¡è½¬æ¢ä¸º JSON å­ç¬¦ä¸²ã
             * @param {Object} object - å¯åºååçå¯¹è±¡ã
             * @returns {string} JSON å­ç¬¦ä¸²ã
             */
            'object': function (object) {
                // three special objects that we want to treat differently
                if (object == null) {
                    return "null";
                }
                if (object.constructor === Date) {
                    return this.serialize.date.apply(this, [object]);
                }
                if (object.constructor === Array) {
                    return this.serialize.array.apply(this, [object]);
                }
                var pieces = ['{'];
                this.level += 1;
                var key, keyJSON, valueJSON;

                var addComma = false;
                for (key in object) {
                    if (object.hasOwnProperty(key)) {
                        // recursive calls need to allow for sub-classing
                        keyJSON = this.write.apply(this,
                            [key, this.pretty]);
                        valueJSON = this.write.apply(this,
                            [object[key], this.pretty]);
                        if (keyJSON != null && valueJSON != null) {
                            if (addComma) {
                                pieces.push(',');
                            }
                            pieces.push(this.writeNewline(), this.writeIndent(),
                                keyJSON, ':', this.writeSpace(), valueJSON);
                            addComma = true;
                        }
                    }
                }

                this.level -= 1;
                pieces.push(this.writeNewline(), this.writeIndent(), '}');
                return pieces.join('');
            },

            /**
             * @function SuperMap.Format.JSON.serialize.array
             * @description ææ°ç»è½¬æ¢æ JSON å­ç¬¦ä¸²ã
             * @param {Array} array - å¯åºååçæ°ç»ã
             * @returns {string} JSON å­ç¬¦ä¸²ã
             */
            'array': function (array) {
                var json;
                var pieces = ['['];
                this.level += 1;

                for (var i = 0, len = array.length; i < len; ++i) {
                    // recursive calls need to allow for sub-classing
                    json = this.write.apply(this,
                        [array[i], this.pretty]);
                    if (json != null) {
                        if (i > 0) {
                            pieces.push(',');
                        }
                        pieces.push(this.writeNewline(), this.writeIndent(), json);
                    }
                }

                this.level -= 1;
                pieces.push(this.writeNewline(), this.writeIndent(), ']');
                return pieces.join('');
            },

            /**
             * @function SuperMap.Format.JSON.serialize.string
             * @description æå­ç¬¦ä¸²è½¬æ¢æ JSON å­ç¬¦ä¸²ã
             * @param {string} string - å¯åºååçå­ç¬¦ä¸²ã
             * @returns {string} JSON å­ç¬¦ä¸²ã
             */
            'string': function (string) {
                // If the string contains no control characters, no quote characters, and no
                // backslash characters, then we can simply slap some quotes around it.
                // Otherwise we must also replace the offending characters with safe
                // sequences.
                var m = {
                    '\b': '\\b',
                    '\t': '\\t',
                    '\n': '\\n',
                    '\f': '\\f',
                    '\r': '\\r',
                    '"': '\\"',
                    '\\': '\\\\'
                };
                /*eslint-disable no-control-regex*/
                if (/["\\\x00-\x1f]/.test(string)) {
                    return '"' + string.replace(/([\x00-\x1f\\"])/g, function (a, b) {
                        var c = m[b];
                        if (c) {
                            return c;
                        }
                        c = b.charCodeAt();
                        return '\\u00' +
                            Math.floor(c / 16).toString(16) +
                            (c % 16).toString(16);
                    }) + '"';
                }
                return '"' + string + '"';
            },

            /**
             * @function SuperMap.Format.JSON.serialize.number
             * @description ææ°å­è½¬æ¢æ JSON å­ç¬¦ä¸²ã
             * @param {number} number - å¯åºååçæ°å­ã
             * @returns {string} JSON å­ç¬¦ä¸²ã
             */
            'number': function (number) {
                return isFinite(number) ? String(number) : "null";
            },

            /**
             * @function SuperMap.Format.JSON.serialize.boolean
             * @description Transform a boolean into a JSON string.
             * @param {boolean} bool - The boolean to be serialized.
             * @returns {string} A JSON string representing the boolean.
             */
            'boolean': function (bool) {
                return String(bool);
            },

            /**
             * @function SuperMap.Format.JSON.serialize.object
             * @description å°æ¥æå¯¹è±¡è½¬æ¢æ JSON å­ç¬¦ä¸²ã
             * @param {Date} date - å¯åºååçæ¥æå¯¹è±¡ã
             * @returns {string} JSON å­ç¬¦ä¸²ã
             */
            'date': function (date) {
                function format(number) {
                    // Format integers to have at least two digits.
                    return (number < 10) ? '0' + number : number;
                }

                return '"' + date.getFullYear() + '-' +
                    format(date.getMonth() + 1) + '-' +
                    format(date.getDate()) + 'T' +
                    format(date.getHours()) + ':' +
                    format(date.getMinutes()) + ':' +
                    format(date.getSeconds()) + '"';
            }
        };
    }

    /**
     * @function SuperMap.Format.JSON.prototype.read
     * @description å°ä¸ä¸ªç¬¦å JSON ç»æçå­ç¬¦ä¸²è¿è¡è§£æã
     * @param {string} json - ç¬¦å JSON ç»æçå­ç¬¦ä¸²ã
     * @param {function} filter - è¿æ»¤æ¹æ³ï¼æç»ç»æçæ¯ä¸ä¸ªé®å¼å¯¹é½ä¼è°ç¨è¯¥è¿æ»¤æ¹æ³ï¼å¹¶å¨å¯¹åºçå¼çä½ç½®æ¿æ¢æè¯¥æ¹æ³è¿åçå¼ã
     * @returns {Object} å¯¹è±¡ï¼æ°ç»ï¼å­ç¬¦ä¸²ææ°å­ã
     */
    read(json, filter) {
        var object;
        if (this.nativeJSON) {
            try {
                object = JSON.parse(json, filter);
            } catch (e) {
                // Fall through if the regexp test fails.
            }
        }

        if (this.keepData) {
            this.data = object;
        }

        return object;
    }

    /**
     * @function SuperMap.Format.JSON.prototype.write
     * @description åºååä¸ä¸ªå¯¹è±¡å°ä¸ä¸ªç¬¦å JSON æ ¼å¼çå­ç¬¦ä¸²ã
     * @param {(object|string|Array|number|boolean)} value - éè¦è¢«åºååçå¯¹è±¡ï¼æ°ç»ï¼å­ç¬¦ä¸²ï¼æ°å­ï¼å¸å°å¼ã
     * @param {boolean} [pretty=false] - æ¯å¦å¨åºååçæ¶åä½¿ç¨é¢å¤çç©ºæ ¼æ§å¶ç»æãå¨ write æ¹æ³ä¸­ä½¿ç¨ã
     * @returns {string} ç¬¦å JSON æ ¼å¼çå­ç¬¦ä¸²ã
     *
     */
    write(value, pretty) {
        this.pretty = !!pretty;
        var json = null;
        var type = typeof value;
        if (this.serialize[type]) {
            try {
                json = (!this.pretty && this.nativeJSON) ?
                    JSON.stringify(value) :
                    this.serialize[type].apply(this, [value]);
            } catch (err) {
                //SuperMap.Console.error("Trouble serializing: " + err);
            }
        }
        return json;
    }

    /**
     * @function SuperMap.Format.JSON.prototype.writeIndent
     * @description æ ¹æ®ç¼©è¿çº§å«è¾åºä¸ä¸ªç¼©è¿å­ç¬¦ä¸²ã
     * @private
     * @returns {string} ä¸ä¸ªéå½çç¼©è¿å­ç¬¦ä¸²ã
     */
    writeIndent() {
        var pieces = [];
        if (this.pretty) {
            for (var i = 0; i < this.level; ++i) {
                pieces.push(this.indent);
            }
        }
        return pieces.join('');
    }

    /**
     * @function SuperMap.Format.JSON.prototype.writeNewline
     * @description å¨æ ¼å¼åè¾åºæ¨¡å¼æåµä¸è¾åºä»£è¡¨æ°ä¸è¡çå­ç¬¦ä¸²ã
     * @private
     * @returns {string} ä»£è¡¨æ°çä¸è¡çå­ç¬¦ä¸²ã
     */
    writeNewline() {
        return (this.pretty) ? this.newline : '';
    }

    /**
     * @function SuperMap.Format.JSON.prototype.writeSpace
     * @private
     * @description å¨æ ¼å¼åè¾åºæ¨¡å¼æåµä¸è¾åºä¸ä¸ªä»£è¡¨ç©ºæ ¼çå­ç¬¦ä¸²ã
     * @returns {string} ä¸ä¸ªç©ºæ ¼ã
     */
    writeSpace() {
        return (this.pretty) ? this.space : '';
    }

}

SuperMap.Format.JSON = JSON_JSONFormat;
// CONCATENATED MODULE: ./src/common/iServer/CommonServiceBase.js
/* CopyrightÂ© 2000 - 2019 SuperMap Software Co.Ltd. All rights reserved.
 * This program are made available under the terms of the Apache License, Version 2.0
 * which accompanies this distribution and is available at http://www.apache.org/licenses/LICENSE-2.0.html.*/










/**
 * @class SuperMap.CommonServiceBase
 * @category  iServer
 * @classdesc å¯¹æ¥ iServer åç§æå¡ç Service çåºç±»ã
 * @param {string} url - æå¡å°åã
 * @param {Object} options - åæ°ã
 * @param {Object} options.eventListeners - äºä»¶çå¬å¨å¯¹è±¡ãæ processCompleted å±æ§å¯ä¼ å¥å¤çå®æåçåè°å½æ°ãprocessFailed å±æ§ä¼ å¥å¤çå¤±è´¥åçåè°å½æ°ã
 * @param {string} [options.proxy] - æå¡ä»£çå°åã
 * @param {SuperMap.ServerType} [options.serverType=SuperMap.ServerType.ISERVER] - æå¡å¨ç±»åï¼iServer|iPortal|Onlineã
 * @param {boolean} [options.withCredentials=false] - è¯·æ±æ¯å¦æºå¸¦ cookieã
 */
class CommonServiceBase_CommonServiceBase {

    constructor(url, options) {
        let me = this;

        this.EVENT_TYPES = ["processCompleted", "processFailed"];

        this.events = null;

        this.eventListeners = null;

        this.url = null;

        this.urls = null;

        this.proxy = null;

        this.serverType = null;

        this.index = null;

        this.length = null;

        this.options = null;

        this.totalTimes = null;

        this.POLLING_TIMES = 3;

        this._processSuccess = null;

        this._processFailed = null;

        this.isInTheSameDomain = null;

        this.withCredentials = false;

        if (Util.isArray(url)) {
            me.urls = url;
            me.length = url.length;
            me.totalTimes = me.length;
            if (me.length === 1) {
                me.url = url[0];
            } else {
                me.index = parseInt(Math.random() * me.length);
                me.url = url[me.index];
            }
        } else {
            me.totalTimes = 1;
            me.url = url;
        }

        if (Util.isArray(url) && !me.isServiceSupportPolling()) {
            me.url = url[0];
            me.totalTimes = 1;
        }

        me.serverType = me.serverType || ServerType.ISERVER;

        options = options || {};

        Util.extend(this, options);

        me.isInTheSameDomain = Util.isInTheSameDomain(me.url);

        me.events = new Events_Events(me, null, me.EVENT_TYPES, true);
        if (me.eventListeners instanceof Object) {
            me.events.on(me.eventListeners);
        }

        this.CLASS_NAME = "SuperMap.CommonServiceBase";
    }

    /**
     * @function SuperMap.CommonServiceBase.prototype.destroy
     * @description éæ¾èµæºï¼å°å¼ç¨çèµæºå±æ§ç½®ç©ºã
     */
    destroy() {
        let me = this;
        if (Util.isArray(me.urls)) {
            me.urls = null;
            me.index = null;
            me.length = null;
            me.totalTimes = null;
        }
        me.url = null;
        me.options = null;
        me._processSuccess = null;
        me._processFailed = null;
        me.isInTheSameDomain = null;

        me.EVENT_TYPES = null;
        if (me.events) {
            me.events.destroy();
            me.events = null;
        }
        if (me.eventListeners) {
            me.eventListeners = null;
        }
    }

    /**
     * @function  SuperMap.CommonServiceBase.prototype.request
     * @description: è¯¥æ¹æ³ç¨äºåæå¡åéè¯·æ±ã
     * @param {Object} options - åæ°ã
     * @param {string} [options.method='GET'] - è¯·æ±æ¹å¼ï¼åæ¬ "GET"ï¼"POST"ï¼"PUT"ï¼"DELETE"ã
     * @param {string} [options.url] - åéè¯·æ±çå°åã
     * @param {Object} [options.params] - ä½ä¸ºæ¥è¯¢å­ç¬¦ä¸²æ·»å å° URL ä¸­çä¸ç»é®å¼å¯¹ï¼æ­¤åæ°åªéç¨äº GET æ¹å¼åéçè¯·æ±ã
     * @param {string} [options.data] - åéå°æå¡å¨çæ°æ®ã
     * @param {function} options.success - è¯·æ±æååçåè°å½æ°ã
     * @param {function} options.failure - è¯·æ±å¤±è´¥åçåè°å½æ°ã
     * @param {Object} [options.scope] - å¦æåè°å½æ°æ¯å¯¹è±¡çä¸ä¸ªå¬å±æ¹æ³ï¼è®¾å®è¯¥å¯¹è±¡çèå´ã
     * @param {boolean} [options.isInTheSameDomain] - è¯·æ±æ¯å¦å¨å½ååä¸­ã
     * @param {boolean} [options.withCredentials=false] - è¯·æ±æ¯å¦æºå¸¦ cookieã
     */
    request(options) {
        let me = this;
        options.url = options.url || me.url;
        options.proxy = options.proxy || me.proxy;
        options.withCredentials = options.withCredentials != undefined ? options.withCredentials : me.withCredentials;
        options.isInTheSameDomain = me.isInTheSameDomain;
        //ä¸ºurlæ·»å å®å¨è®¤è¯ä¿¡æ¯çæ®µ
        let credential = this.getCredential(options.url);
        if (credential) {
            //å½urlä¸­å«æ?ï¼å¹¶ä¸?å¨urlæ«å°¾çæ¶åç´æ¥æ·»å token *ç½ç»åæç­æå¡è¯·æ±urlä¼åºç°æ«å°¾æ¯?çæåµ*
            //å½urlä¸­å«æ?ï¼å¹¶ä¸?ä¸å¨urlæ«å°¾çæ¶åæ·»å &token
            //å½urlä¸­ä¸å«æ?ï¼å¨urlæ«å°¾æ·»å ?token
            let endStr = options.url.substring(options.url.length - 1, options.url.length);
            if (options.url.indexOf("?") > -1 && endStr === "?") {
                options.url += credential.getUrlParameters();
            } else if (options.url.indexOf("?") > -1 && endStr !== "?") {
                options.url += "&" + credential.getUrlParameters();
            } else {
                options.url += "?" + credential.getUrlParameters();
            }
        }

        me.calculatePollingTimes();
        me._processSuccess = options.success;
        me._processFailed = options.failure;
        options.scope = me;
        options.success = me.getUrlCompleted;
        options.failure = me.getUrlFailed;
        me.options = options;
        me._commit(me.options);
    }

    /**
     * @function SuperMap.CommonServiceBase.prototype.getCredential
     * @description  è·åå­æ®ä¿¡æ¯
     * @param {string} url - æå¡å°åã
     * @returns {SuperMap.Credential} å­æ®ä¿¡æ¯å¯¹è±¡ã
     */
    getCredential(url) {
        let keyUrl = url,
            credential, value;
        switch (this.serverType) {
            case ServerType.IPORTAL:
                value = SecurityManager_SecurityManager.getToken(keyUrl);
                credential = value ? new Credential(value, "token") : null;
                if (!credential) {
                    value = SecurityManager_SecurityManager.getKey(keyUrl);
                    credential = value ? new Credential(value, "key") : null;
                }
                break;
            case ServerType.ONLINE:
                value = SecurityManager_SecurityManager.getKey(keyUrl);
                credential = value ? new Credential(value, "key") : null;
                break;
            default:
                //iServer or others
                value = SecurityManager_SecurityManager.getToken(keyUrl);
                credential = value ? new Credential(value, "token") : null;
                break;
        }
        return credential;
    }

    /**
     * @function SuperMap.CommonServiceBase.prototype.getUrlCompleted
     * @description è¯·æ±æååæ§è¡æ­¤æ¹æ³ã
     * @param {Object} result - æå¡å¨è¿åçç»æå¯¹è±¡ã
     */
    getUrlCompleted(result) {
        let me = this;
        me._processSuccess(result);
    }


    /**
     * @function SuperMap.CommonServiceBase.prototype.getUrlFailed
     * @description è¯·æ±å¤±è´¥åæ§è¡æ­¤æ¹æ³ã
     * @param {Object} result - æå¡å¨è¿åçç»æå¯¹è±¡ã
     */
    getUrlFailed(result) {
        let me = this;
        if (me.totalTimes > 0) {
            me.totalTimes--;
            me.ajaxPolling();
        } else {
            me._processFailed(result);
        }
    }


    /**
     *
     * @function SuperMap.CommonServiceBase.prototype.ajaxPolling
     * @description è¯·æ±å¤±è´¥åï¼å¦æå©ä½è¯·æ±å¤±è´¥æ¬¡æ°ä¸ä¸º 0ï¼éæ°è·å URL åéè¯·æ±
     */
    ajaxPolling() {
        let me = this,
            url = me.options.url,
            re = /^http:\/\/([a-z]{9}|(\d+\.){3}\d+):\d{0,4}/;
        me.index = parseInt(Math.random() * me.length);
        me.url = me.urls[me.index];
        url = url.replace(re, re.exec(me.url)[0]);
        me.options.url = url;
        me.options.isInTheSameDomain = Util.isInTheSameDomain(url);
        me._commit(me.options);
    }


    /**
     * @function SuperMap.CommonServiceBase.prototype.calculatePollingTimes
     * @description è®¡ç®å©ä½è¯·æ±å¤±è´¥æ§è¡æ¬¡æ°ã
     */
    calculatePollingTimes() {
        let me = this;
        if (me.times) {
            if (me.totalTimes > me.POLLING_TIMES) {
                if (me.times > me.POLLING_TIMES) {
                    me.totalTimes = me.POLLING_TIMES;
                } else {
                    me.totalTimes = me.times;
                }
            } else {
                if (me.times < me.totalTimes) {
                    me.totalTimes = me.times;
                }
            }

        } else {
            if (me.totalTimes > me.POLLING_TIMES) {
                me.totalTimes = me.POLLING_TIMES;
            }
        }
        me.totalTimes--;
    }

    /**
     * @function SuperMap.CommonServiceBase.prototype.isServiceSupportPolling
     * @description å¤æ­æå¡æ¯å¦æ¯æè½®è¯¢ã
     */
    isServiceSupportPolling() {
        let me = this;
        return !(
            me.CLASS_NAME === "SuperMap.REST.ThemeService" ||
            me.CLASS_NAME === "SuperMap.REST.EditFeaturesService"
        );
    }

    /**
     * @function SuperMap.CommonServiceBase.prototype.serviceProcessCompleted
     * @description ç¶æå®æï¼æ§è¡æ­¤æ¹æ³ã
     * @param {Object} result - æå¡å¨è¿åçç»æå¯¹è±¡ã
     */
    serviceProcessCompleted(result) {
        result = Util.transformResult(result);
        this.events.triggerEvent("processCompleted", {
            result: result
        });
    }

    /**
     * @function SuperMap.CommonServiceBase.prototype.serviceProcessFailed
     * @description ç¶æå¤±è´¥ï¼æ§è¡æ­¤æ¹æ³ã
     * @param {Object} result - æå¡å¨è¿åçç»æå¯¹è±¡ã
     */
    serviceProcessFailed(result) {
        result = Util.transformResult(result);
        let error = result.error || result;
        this.events.triggerEvent("processFailed", {
            error: error
        });
    }

    _commit(options) {
        if (options.method === "POST" || options.method === "PUT") {
            if (options.params) {
                options.url = Util.urlAppend(options.url,
                    Util.getParameterString(options.params || {}));
            }
            options.params = options.data;
        }
        FetchRequest.commit(options.method, options.url, options.params, {
            headers: options.headers,
            withCredentials: options.withCredentials,
            timeout: options.async ? 0 : null,
            proxy: options.proxy
        }).then(function (response) {
            if (response.text) {
                return response.text();
            }
            if (response.json) {
                return response.json();
            }
            return response;
        }).then(function (text) {
            var result = text;
            if (typeof text === "string") {
                result = new JSON_JSONFormat().read(text);
            }
            if (!result || result.error || result.code >= 300 && result.code !== 304) {
                if (result && result.error) {
                    result = {
                        error: result.error
                    };
                } else {
                    result = {
                        error: result
                    };
                }
            }
            if (result.error) {
                var failure = (options.scope) ? FunctionExt.bind(options.failure, options.scope) : options.failure;
                failure(result);
            } else {
                result.succeed = result.succeed == undefined ? true : result.succeed;
                var success = (options.scope) ? FunctionExt.bind(options.success, options.scope) : options.success;
                success(result);
            }
        }).catch(function (e) {
            var failure = (options.scope) ? FunctionExt.bind(options.failure, options.scope) : options.failure;
            failure(e);
        })
    }
}

SuperMap.CommonServiceBase = CommonServiceBase_CommonServiceBase;

/**
 * æå¡å¨è¯·æ±åè°å½æ°
 * @callback RequestCallback
 * @example
 * var requestCallback = function (serviceResult){
 *      console.log(serviceResult.result);
 * }
 * new QueryService(url).queryByBounds(param, requestCallback);
 * @param {Object} serviceResult
 * @param {Object} serviceResult.result æå¡å¨è¿åç»æã
 * @param {Object} serviceResult.object åå¸åºç¨ç¨åºäºä»¶çå¯¹è±¡ã
 * @param {Object} serviceResult.type äºä»¶ç±»åã
 * @param {Object} serviceResult.element æ¥åæµè§å¨äºä»¶ç DOM èç¹ã
 */
// CONCATENATED MODULE: ./src/common/commontypes/Feature.js
/* CopyrightÂ© 2000 - 2019 SuperMap Software Co.Ltd. All rights reserved.
 * This program are made available under the terms of the Apache License, Version 2.0
 * which accompanies this distribution and is available at http://www.apache.org/licenses/LICENSE-2.0.html.*/



/**
 * @class SuperMap.Feature
 * @category BaseTypes Geometry
 * @classdesc è¦ç´ ç±»ç»åäºå°çåå±æ§ï¼Feature ç±»åæ¶å·æ marker å lonlat å±æ§ã
 * @param {SuperMap.Layer} layer - å¾å±ã
 * @param {SuperMap.LonLat} lonlat - ç»çº¬åº¦ã
 * @param {Object} data - æ°æ®å¯¹è±¡ã
 */
class Feature_Feature {


    constructor(layer, lonlat, data) {
        this.CLASS_NAME = "SuperMap.Feature";
        /**
         * @deprecated
         * @member {SuperMap.Layer} SuperMap.Feature.prototype.layer
         * @description å¾å±ã
         */
        this.layer = layer;

        /**
         * @member {string} SuperMap.Feature.prototype.id
         * @description è¦ç´  IDã
         */
        this.id = Util.createUniqueID(this.CLASS_NAME + "_");

        /**
         * @member {SuperMap.LonLat} SuperMap.Feature.prototype.lonlat
         * @description ç»çº¬åº¦ã
         *
         */
        this.lonlat = lonlat;

        /**
         * @member {Object} SuperMap.Feature.prototype.data
         * @description æ°æ®å¯¹è±¡ã
         */
        this.data = (data != null) ? data : {};

    }

    /**
     * @function SuperMap.Feature.prototype.destroy
     * @description éæ¾ç¸å³èµæºã
     */
    destroy() {
        this.id = null;
        this.lonlat = null;
        this.data = null;
    }
}

SuperMap.Feature = Feature_Feature;
// CONCATENATED MODULE: ./src/common/commontypes/Vector.js
/* CopyrightÂ© 2000 - 2019 SuperMap Software Co.Ltd. All rights reserved.
 * This program are made available under the terms of the Apache License, Version 2.0
 * which accompanies this distribution and is available at http://www.apache.org/licenses/LICENSE-2.0.html.*/






/**
 * @class SuperMap.Feature.Vector
 * @category BaseTypes Geometry
 * @classdesc ç¢éè¦ç´ ç±»ãè¯¥ç±»å·æ Geometry å±æ§å­æ¾å ä½ä¿¡æ¯ï¼
 * attributes å±æ§å­æ¾éå ä½ä¿¡æ¯ï¼å¦å¤è¿åå«äº style å±æ§ï¼ç¨æ¥å®ä¹ç¢éè¦ç´ çæ ·å¼ï¼
 * å¶ä¸­ï¼é»è®¤çæ ·å¼å¨ {@link SuperMap.Feature.Vector.style} ç±»ä¸­å®ä¹ï¼å¦ææ²¡æç¹å«çæå®å°ä½¿ç¨é»è®¤çæ ·å¼ã
 * @extends {SuperMap.Feature}
 * @param {SuperMap.Geometry} geometry - ä»£è¡¨è¦ç´ çå ä½å½¢ç¶ã
 * @param {Object} [attributes] - æè¿°è¦ç´ çä»»æçå¯åºååå±æ§ï¼å°è¦æ å°å° attributes å±æ§ä¸­çå¯¹è±¡ã
 * @param {Object} [style] - æ ·å¼å¯¹è±¡ã
 * @example
 * var geometry = new SuperMap.Geometry.Point(-115,10);
 *  var style = {
     *      strokeColor:"#339933",
     *      strokeOpacity:1,
     *      strokeWidth:3,
     *      pointRadius:6
     *  }
 *  var pointFeature = new SuperMap.Feature.Vector(geometry,null,style);
 *  vectorLayer.addFeatures(pointFeature);
 */
class Vector_Vector extends Feature_Feature {


    constructor(geometry, attributes, style) {
        super(null, null, attributes);
        /**
         * @member {string} SuperMap.Feature.Vector.prototype.fid
         * @description fid
         */
        this.fid = null;

        /**
         * @member {SuperMap.Geometry} SuperMap.Feature.Vector.prototype.geometry
         * @description è¯¥å±æ§ç¨äºå­æ¾å ä½ä¿¡æ¯ã
         */
        this.geometry = geometry ? geometry : null;

        /**
         * @member {Object} SuperMap.Feature.Vector.prototype.attributes
         * @description æè¿°è¦ç´ çä»»æçå¯åºååå±æ§ã
         */
        this.attributes = {};

        if (attributes) {
            this.attributes = Util.extend(this.attributes, attributes);
        }

        /**
         * @member {SuperMap.Bounds} SuperMap.Feature.Vector.prototype.bounds
         * @description The box bounding that feature's geometry, that
         *     property can be set by an <SuperMap.Format> object when
         *     deserializing the feature, so in most cases it represents an
         *     information set by the server.
         */
        this.bounds = null;

        /**
         * @member {string} SuperMap.Feature.Vector.prototype.state
         * @description state
         */
        this.state = null;

        /**
         * @member {Object} SuperMap.Feature.Vector.prototype.style
         * @description è¦ç´ çæ ·å¼å±æ§ï¼å°å¾æ¥è¯¢è¿åç feature ç styleï¼8C åä¸ºnullã
         */
        this.style = style ? style : null;

        /**
         * @member {string} SuperMap.Feature.Vector.prototype.url 
         * @description å¦æè®¾ç½®äºè¿ä¸ªå±æ§ï¼å¨æ´æ°æèå é¤è¦ç´ æ¶éè¦èè {@link SuperMap.HTTP} ã
         */
        this.url = null;

        this.lonlat = null;

        this.CLASS_NAME = "SuperMap.Feature.Vector";
        // TRASH THIS
        SuperMap.State = {
            /** states */
            UNKNOWN: 'Unknown',
            INSERT: 'Insert',
            UPDATE: 'Update',
            DELETE: 'Delete'
        };

        Vector_Vector.style = {
            'default': {
                fillColor: "#ee9900",
                fillOpacity: 0.4,
                hoverFillColor: "white",
                hoverFillOpacity: 0.8,
                strokeColor: "#ee9900",
                strokeOpacity: 1,
                strokeWidth: 1,
                strokeLinecap: "round",
                strokeDashstyle: "solid",
                hoverStrokeColor: "red",
                hoverStrokeOpacity: 1,
                hoverStrokeWidth: 0.2,
                pointRadius: 6,
                hoverPointRadius: 1,
                hoverPointUnit: "%",
                pointerEvents: "visiblePainted",
                cursor: "inherit",
                fontColor: "#000000",
                labelAlign: "cm",
                labelOutlineColor: "white",
                labelOutlineWidth: 3
            },
            'select': {
                fillColor: "blue",
                fillOpacity: 0.4,
                hoverFillColor: "white",
                hoverFillOpacity: 0.8,
                strokeColor: "blue",
                strokeOpacity: 1,
                strokeWidth: 2,
                strokeLinecap: "round",
                strokeDashstyle: "solid",
                hoverStrokeColor: "red",
                hoverStrokeOpacity: 1,
                hoverStrokeWidth: 0.2,
                pointRadius: 6,
                hoverPointRadius: 1,
                hoverPointUnit: "%",
                pointerEvents: "visiblePainted",
                cursor: "pointer",
                fontColor: "#000000",
                labelAlign: "cm",
                labelOutlineColor: "white",
                labelOutlineWidth: 3

            },
            'temporary': {
                fillColor: "#66cccc",
                fillOpacity: 0.2,
                hoverFillColor: "white",
                hoverFillOpacity: 0.8,
                strokeColor: "#66cccc",
                strokeOpacity: 1,
                strokeLinecap: "round",
                strokeWidth: 2,
                strokeDashstyle: "solid",
                hoverStrokeColor: "red",
                hoverStrokeOpacity: 1,
                hoverStrokeWidth: 0.2,
                pointRadius: 6,
                hoverPointRadius: 1,
                hoverPointUnit: "%",
                pointerEvents: "visiblePainted",
                //cursor:"inherit",
                cursor: "default",
                fontColor: "#000000",
                labelAlign: "cm",
                labelOutlineColor: "white",
                labelOutlineWidth: 3

            },
            'delete': {
                display: "none"
            }
        };
    }

    /**
     * @function SuperMap.Feature.Vector.prototype.destroy
     * @description nullify references to prevent circular references and memory leaks
     */
    destroy() {
        if (this.layer) {
            this.layer.removeFeatures(this);
            this.layer = null;
        }

        this.geometry = null;
        super.destroy();
    }

    /**
     * @function SuperMap.Feature.Vector.prototype.clone
     * @description Create a clone of this vector feature.  Does not set any non-standard
     *     properties.
     * @returns {SuperMap.Feature.Vector} An exact clone of this vector feature.
     */
    clone() {
        return new Vector_Vector(
            this.geometry ? this.geometry.clone() : null,
            this.attributes,
            this.style);
    }

    /**
     * @function SuperMap.Feature.Vector.prototype.toState
     * @description è®¾ç½®æ°ç¶æã
     * @param {string} state - ç¶æã
     */
    toState(state) {
        if (state === SuperMap.State.UPDATE) {
            switch (this.state) {
                case SuperMap.State.UNKNOWN:
                case SuperMap.State.DELETE:
                    this.state = state;
                    break;
                case SuperMap.State.UPDATE:
                case SuperMap.State.INSERT:
                    break;
            }
        } else if (state === SuperMap.State.INSERT) {
            switch (this.state) {
                case SuperMap.State.UNKNOWN:
                    break;
                default:
                    this.state = state;
                    break;
            }
        } else if (state === SuperMap.State.DELETE) {
            switch (this.state) {
                case SuperMap.State.INSERT:
                    // the feature should be destroyed
                    break;
                case SuperMap.State.DELETE:
                    break;
                case SuperMap.State.UNKNOWN:
                case SuperMap.State.UPDATE:
                    this.state = state;
                    break;
            }
        } else if (state === SuperMap.State.UNKNOWN) {
            this.state = state;
        }
    }
}
/**
 *
 * @typedef {Object} SuperMap.Feature.Vector.style
 * @description SuperMap.features æå¤§éçæ ·å¼å±æ§ï¼å¦ææ²¡æç¹å«çæå®å°ä½¿ç¨é»è®¤çæ ·å¼ï¼
 * å¤§é¨åæ ·å¼éè¿ SVG æ åå®ä¹å±æ§ã
 * - fill properties èµæä»ç»ï¼{@link http://www.w3.org/TR/SVG/painting.html#FillProperties}
 * - stroke properties èµæä»ç»ï¼{@link http://www.w3.org/TR/SVG/painting.html#StrokeProperties}
 * @property {boolean} [fill] - ä¸éè¦å¡«ååè®¾ç½®ä¸º falseã
 * @property {string} [fillColor='#ee9900'] - åå­è¿å¶å¡«åé¢è²ã
 * @property {number} [fillOpacity=0.4] - å¡«åä¸éæåº¦ã
 * @property {boolean} [stroke] - ä¸éè¦æè¾¹åè®¾ä¸º falseã
 * @property {string} [strokeColor='#ee9900'] - åå­è¿å¶æè¾¹é¢è²ã
 * @property {number} [strokeOpacity=0.4] - æè¾¹çä¸éæåº¦(0-1)ã
 * @property {number} [strokeWidth=1] - åç´ æè¾¹å®½åº¦ã
 * @property {string} [strokeLinecap='round'] - strokeLinecap æä¸ç§ç±»å buttï¼roundï¼squareã
 * @property {string} [strokeDashstyle='solid'] - æ dotï¼dashï¼dashdotï¼longdashï¼longdashdotï¼solid å ç§æ ·å¼ã
 * @property {boolean} [graphic] - ä¸éè¦åè®¾ç½®ä¸º falseã
 * @property {number} [pointRadius=6] - åç´ ç¹åå¾ã
 * @property {string} [pointerEvents='visiblePainted'] - pointerEventsã
 * @property {string} [cursor] - cursorã
 * @property {boolean} [allowRotate='false'] - æ¯å¦åè®¸å¾æ éçè¿è¡æ¹åæè½¬ãç¨äºæ¶ç©ºæ°æ®å¾å±ã
 * @property {string} [externalGraphic] - è¿æ¥å°ç¨æ¥æ¸²æç¹çå¤é¨çå¾å½¢ã
 * @property {number} [graphicWidth] - å¤é¨å¾è¡¨çåç´ å®½åº¦ã
 * @property {number} [graphicHeight] - å¤é¨å¾è¡¨çé«å®½åº¦ã
 * @property {number} [graphicOpacity] - å¤é¨å¾è¡¨çä¸éæåº¦(0-1)ã
 * @property {number} [graphicXOffset] - å¤é¨å¾è¡¨æ²¿çxæ¹åçåç§»éã
 * @property {number} [graphicYOffset] - å¤é¨å¾è¡¨æ²¿çyæ¹åçåç§»é Pixelã
 * @property {number} [rotation] - ä¸ä¸ªå¾è¡¨æ²¿çå¶ä¸­å¿ç¹ï¼æèåç§»ä¸­å¿æå®ç¹ï¼å¨é¡ºæ¶éæ¹åæè½¬ã
 * @property {number} [graphicZIndex] - æ¸²ææ¶ä½¿ç¨çç´¢å¼å¼ã
 * @property {string} [graphicName='circle'] - æ¸²æç¹æ¶å¾æ ä½¿ç¨çåå­ãæ¯æ"circle" , "square", "star", "x", "cross", "triangle"ã
 * @property {string} [graphicTitle] - å¤é¨å¾è¡¨çæç¤ºæ¡ã
 * @property {string} [backgroundGraphic] - å¤é¨å¾è¡¨çèæ¯ã
 * @property {number} [backgroundGraphicZIndex] - èæ¯å¾æ¸²ææ¶ä½¿ç¨çç´¢å¼å¼ã
 * @property {number} [backgroundXOffset] - èæ¯å¾å¨ x è½´çåç§»éã
 * @property {number} [backgroundYOffset] - èæ¯å¾å¨ y è½´çåç§»éã
 * @property {number} [backgroundHeight] - èæ¯å¾çé«åº¦ãå¦ææ²¡æè®¾ç½®ï¼å°ç¨ graphicHeightã
 * @property {number} [backgroundWidth] - èæ¯å¾çå®½åº¦ãå¦ææ²¡æè®¾ç½®ï¼å°ç¨ graphicWidthã
 * @property {boolean} [isUnicode=false] - è¿ä¸ªå±æ§è¦éå label å±æ§æ¥ç¨ï¼å½ä¸º trueæ¶ï¼label å°±å¯ä»¥ä½¿ç¨ unicode ç¼ç ï¼
 * æ¯å¦ "a" ç unicode åå­è¿å¶ç¼ç ä¸º 61ï¼å label å±æ§å¯ä»¥ä¸º "&#x61;",å¶ä¸­ "&#" ä¸ºåç¼ï¼æ å¿è¿ä¸ªä¸º unicode ç¼ç ï¼
 * "x" æ¯æ 16 è¿å¶,è¿æ¶é¡µé¢æ¾ç¤ºçæ¯ "a"ï¼å½æ­¤å¼ä¸º false çæ¶åï¼label çåå®¹ä¼è¢«ç´æ¥è¾åºï¼
 * æ¯å¦ï¼label ä¸º "&#x61;"ï¼è¿æ¶é¡µé¢æ¾ç¤ºçä¹æ¯ "&#x61;"ã
 * @property {string} [label] - å¯éçæ ç­¾ææ¬ã
 * @property {string} [labelAlign='cm'] - æ ç­¾å¯¹é½ï¼æ¯ç±ä¸¤ä¸ªå­ç¬¦ç»æçå­ç¬¦ä¸²ï¼å¦ï¼"lt", "cm", "rb"ï¼
 * å¶ä¸­ç¬¬ä¸ä¸ªå­ç¬¦ä»£è¡¨æ°´å¹³æ¹åä¸çå¯¹é½ï¼"l"=left, "c"=center, "r"=rightï¼
 * ç¬¬äºä¸ªå­ç¬¦ä»£è¡¨åç´æ¹åä¸çå¯¹é½ï¼"t"=top, "m"=middle, "b"=bottomã
 * @property {number} [labelXOffset] - æ ç­¾å¨ x è½´æ¹åçåç§»éã
 * @property {number} [labelYOffset] - æ ç­¾å¨ y è½´æ¹åçåç§»éã
 * @property {boolean} [labelSelect=false] - å¦æè®¾ä¸º trueï¼æ ç­¾å¯ä»¥éç¨ SelectFeature æè similar æ§ä»¶ã
 * @property {string} [fontColor='#000000'] - æ ç­¾å­ä½é¢è²ã
 * @property {number} [fontOpacity] - æ ç­¾éæåº¦ (0-1)ã
 * @property {string} [fontFamily] - æ ç­¾çå­ä½ç±»åã
 * @property {string} [fontSize] - æ ç­¾çå­ä½å¤§å°ã
 * @property {string} [fontStyle] - æ ç­¾çå­ä½æ ·å¼ã
 * @property {string} [fontWeight] - æ ç­¾çå­ä½ç²ç»ã
 * @property {string} [display] - å¦æ display å±æ§è®¾ç½®ä¸º ânoneâï¼ç¬¦å·å°æ²¡æä»»ä½ææã
 * @example
 *  // labelçç¨æ³å¦ä¸ï¼
 *  function addGeoTest(){
 *  var geometry = new SuperMap.Geometry.Point(105, 35);
 *  var pointFeature = new SuperMap.Feature.Vector(geometry);
 *  var styleTest = {
 *        label:"supermap",
 *        fontColor:"#0000ff",
 *        fontOpacity:"0.5",
 *        fontFamily:"é¶ä¹¦",
 *        fontSize:"8em",
 *        fontWeight:"bold",
 *        fontStyle:"italic",
 *        labelSelect:"true",
 *     }
 *           pointFeature.style = styleTest;
 *          vectorLayer.addFeatures([pointFeature]);
 * }
     */
SuperMap.Feature.Vector = Vector_Vector;



// CONCATENATED MODULE: ./src/common/commontypes/Size.js
/* CopyrightÂ© 2000 - 2019 SuperMap Software Co.Ltd. All rights reserved.
 * This program are made available under the terms of the Apache License, Version 2.0
 * which accompanies this distribution and is available at http://www.apache.org/licenses/LICENSE-2.0.html.*/


/**
 * @class  SuperMap.Size
 * @category BaseTypes Style
 * @classdesc æ­¤ç±»æç»ä¸å¯¹é«å®½å¼çå®ä¾ã
 * @param {number} [w=0.0] - å®½åº¦ã
 * @param {number} [h=0.0] - é«åº¦ã
 *
 * @example
 * var size = new SuperMap.Size(31,46);
 */
class Size {

    constructor(w, h) {
        /**
         * @member {number} [SuperMap.Size.prototype.w=0.0]
         * @description å®½åº¦ã
         */
        this.w = w ? parseFloat(w) : 0.0;

        /**
         * @member {number} [SuperMap.Size.prototype.h=0.0]
         * @description é«åº¦ã
         */
        this.h = w ? parseFloat(h) : 0.0;
        this.CLASS_NAME = "SuperMap.Size";
    }


    /**
     * @function SuperMap.Size.prototype.toString
     * @description è¿åæ­¤å¯¹è±¡çå­ç¬¦ä¸²å½¢å¼ã
     * @example
     * var size = new SuperMap.Size(10,5);
     * var str = size.toString();
     * @returns {string} ä¾å¦ï¼"w=10,h=5"ã
     */
    toString() {
        return ("w=" + this.w + ",h=" + this.h);
    }


    /**
     * @function SuperMap.Size.prototype.clone
     * @description åéå½åsizeå¯¹è±¡ã
     * @example
     * var size = new SuperMap.Size(31,46);
     * var size2 = size.clone();
     * @returns {SuperMap.Size}  è¿åä¸ä¸ªæ°çä¸å½å size å¯¹è±¡æç¸åå®½ãé«ç Size å¯¹è±¡ã
     */
    clone() {
        return new Size(this.w, this.h);
    }


    /**
     *
     * @function SuperMap.Size.prototype.equals
     * @description æ¯è¾ä¸¤ä¸ª size å¯¹è±¡æ¯å¦ç¸ç­ã
     * @example
     * var size = new SuperMap.Size(31,46);
     * var size2 = new SuperMap.Size(31,46);
     * var isEquals = size.equals(size2);
     *
     * @param {SuperMap.Size} sz - ç¨äºæ¯è¾ç¸ç­ç Size å¯¹è±¡ã
     * @returns {boolean} ä¼ å¥ç size åå½å size é«å®½ç¸ç­ï¼æ³¨æï¼å¦æä¼ å¥ç size ä¸ºç©ºåè¿å falseã
     *
     */
    equals(sz) {
        var equals = false;
        if (sz != null) {
            equals = ((this.w === sz.w && this.h === sz.h) ||
                (isNaN(this.w) && isNaN(this.h) && isNaN(sz.w) && isNaN(sz.h)));
        }
        return equals;
    }

    /**
     *
     * @function SuperMap.Size.prototype.destroy
     * @description éæ¯æ­¤å¯¹è±¡ãéæ¯åæ­¤å¯¹è±¡çææå±æ§ä¸º nullï¼èä¸æ¯åå§å¼ã
     * @example
     * var size = new SuperMap.Size(31,46);
     * size.destroy();
     */
    destroy() {
        this.w = null;
        this.h = null;
    }
}

SuperMap.Size = Size;
// CONCATENATED MODULE: ./src/common/commontypes/LonLat.js
/* CopyrightÂ© 2000 - 2019 SuperMap Software Co.Ltd. All rights reserved.
 * This program are made available under the terms of the Apache License, Version 2.0
 * which accompanies this distribution and is available at http://www.apache.org/licenses/LICENSE-2.0.html.*/


/**
 * @class SuperMap.LonLat
 * @category BaseTypes Geometry
 * @classdesc  è¿ä¸ªç±»ç¨æ¥è¡¨ç¤ºç»åº¦åçº¬åº¦å¯¹ã
 * @param {number} [lon=0.0] - å°å¾åä½ä¸ç X è½´åæ ï¼å¦æå°å¾æ¯å°çæå½±ï¼åæ­¤å¼æ¯ç»åº¦ï¼å¦åï¼æ­¤å¼æ¯å°å¾å°çä½ç½®ç x åæ ã
 * @param {number} [lat=0.0] - å°å¾åä½ä¸ç Y è½´åæ ï¼å¦æå°å¾æ¯å°çæå½±ï¼åæ­¤å¼æ¯çº¬åº¦ï¼å¦åï¼æ­¤å¼æ¯å°å¾å°çä½ç½®ç y åæ ã
 * @param {Array.<float>} [location] - å¦æè¦åæ¶è®¾ç½®ï¼åä½¿ç¨ä¼ å¥æ¨ªçºµåæ ç»æçæ°ç»ã
 * @example
 * var lonLat = new SuperMap.LonLat(30,45);
 */
class LonLat_LonLat {


    constructor(lon, lat) {
        if (Util.isArray(lon)) {
            lat = lon[1];
            lon = lon[0];
        }
        /**
         * @member {float} [SuperMap.LonLat.prototype.lon=0.0]
         * @description å°å¾çåä½ç X è½´ï¼æ¨ªè½´ï¼åæ ã
         */
        this.lon = lon ? Util.toFloat(lon) : 0.0;

        /**
         * @member {float} [SuperMap.LonLat.prototype.lat=0.0]
         * @description å°å¾çåä½ç Y è½´ï¼çºµè½´ï¼åæ ã
         */
        this.lat = lat ? Util.toFloat(lat) : 0.0;
        this.CLASS_NAME = "SuperMap.LonLat";
    }

    /**
     * @function SuperMap.LonLat.prototype.toString
     * @description è¿åæ­¤å¯¹è±¡çå­ç¬¦ä¸²å½¢å¼
     * @example
     * var lonLat = new SuperMap.LonLat(100,50);
     * var str = lonLat.toString();
     * @returns {string} ä¾å¦: "lon=100,lat=50"
     */
    toString() {
        return ("lon=" + this.lon + ",lat=" + this.lat);
    }

    /**
     * @function SuperMap.LonLat.prototype.toShortString
     * @description å°ç»åº¦çº¬åº¦è½¬æ¢æç®åå­ç¬¦ä¸²ã
     * @example
     * var lonLat = new SuperMap.LonLat(100,50);
     * var str = lonLat.toShortString();
     * @returns {string} è¿åå¤çåçç»çº¬åº¦å­ç¬¦ä¸²ãä¾å¦ï¼"100,50"
     */
    toShortString() {
        return (this.lon + "," + this.lat);
    }

    /**
     * @function SuperMap.LonLat.prototype.clone
     * @description å¤å¶åæ å¯¹è±¡ï¼å¹¶è¿åå¤å¶åçæ°å¯¹è±¡ã
     * @example
     * var lonLat1 = new SuperMap.LonLat(100,50);
     * var lonLat2 = lonLat1.clone();
     * @returns {SuperMap.LonLat}  è¿åç¸ååæ å¼çæ°çåæ å¯¹è±¡ã
     */
    clone() {
        return new LonLat_LonLat(this.lon, this.lat);
    }

    /**
     * @function SuperMap.LonLat.prototype.add
     * @description å¨å·²æåæ å¯¹è±¡çç»çº¬åº¦åºç¡ä¸å ä¸æ°çåæ ç»çº¬åº¦ï¼å¹¶è¿åæ°çåæ å¯¹è±¡ã
     * @example
     * var lonLat1 = new SuperMap.LonLat(100,50);
     * //lonLat2 æ¯æ°çå¯¹è±¡
     * var lonLat2 = lonLat1.add(100,50);
     * @param {float} lon - ä¼ å¥çç»åº¦åæ°ã
     * @param {float} lat - ä¼ å¥ççº¬åº¦åæ°ã
     * @returns {SuperMap.LonLat} è¿åä¸ä¸ªæ°ç LonLat å¯¹è±¡ï¼æ­¤å¯¹è±¡çç»çº¬åº¦æ¯ç±ä¼ å¥çç»çº¬åº¦ä¸å½åçç»çº¬åº¦ç¸å æå¾ã
     */
    add(lon, lat) {
        if ((lon == null) || (lat == null)) {
            throw new TypeError('LonLat.add cannot receive null values');
        }
        return new LonLat_LonLat(this.lon + Util.toFloat(lon),
            this.lat + Util.toFloat(lat));
    }

    /**
     * @function SuperMap.LonLat.prototype.equals
     * @description å¤æ­ä¸¤ä¸ªåæ å¯¹è±¡æ¯å¦ç¸ç­ã
     * @example
     * var lonLat1 = new SuperMap.LonLat(100,50);
     * var lonLat2 = new SuperMap.LonLat(100,50);
     * var isEquals = lonLat1.equals(lonLat2);
     * @param {SuperMap.LonLat} ll - éè¦è¿è¡æ¯è¾çåæ å¯¹è±¡ã
     * @returns {boolean} å¦æLonLatå¯¹è±¡çç»çº¬åº¦åä¼ å¥çç»çº¬åº¦ä¸è´åè¿åtrue,ä¸ä¸
     *      è´æä¼ å¥çllåæ°ä¸ºNULLåè¿åfalseã
     */
    equals(ll) {
        var equals = false;
        if (ll != null) {
            equals = ((this.lon === ll.lon && this.lat === ll.lat) ||
                (isNaN(this.lon) && isNaN(this.lat) && isNaN(ll.lon) && isNaN(ll.lat)));
        }
        return equals;
    }

    /**
     * @function SuperMap.LonLat.prototype.wrapDateLine
     * @description éè¿ä¼ å¥çèå´å¯¹è±¡å¯¹åæ å¯¹è±¡è½¬æ¢å°è¯¥èå´åã
     * å¦æç»åº¦å°äºç»å®èå´æå°ç²¾åº¦ï¼åå¨åç»åº¦åºç¡ä¸å ä¸èå´å®½åº¦ï¼ç´å°ç²¾åº¦å¨èå´åä¸ºæ­¢ï¼å¦æç»åº¦å¤§äºç»å®èå´åå¨åç»åº¦åºç¡ä¸åå»èå´å®½åº¦ã
     * å³æå°ä¸å¨ç»åº¦èå´åçåæ è½¬æ¢å°èå´ä»¥åï¼åªä¼è½¬æ¢ lonï¼ä¸ä¼è½¬æ¢ latï¼ä¸»è¦ç¨äºè½¬ç§»å°æ¥ççº¿ä»¥åï¼ã
     * @example
     * var lonLat1 = new SuperMap.LonLat(420,50);
     * var lonLat2 = lonLat1.wrapDateLine(
     *      new SuperMap.Bounds(-180,-90,180,90)
     *  );
     * @param {SuperMap.Bounds} maxExtent - æå¤§è¾¹ççèå´ã
     * @returns {SuperMap.LonLat} å°åæ è½¬æ¢å°èå´å¯¹è±¡ä»¥åï¼å¹¶è¿åæ°çåæ ã
     */
    wrapDateLine(maxExtent) {

        var newLonLat = this.clone();

        if (maxExtent) {
            //shift right?
            while (newLonLat.lon < maxExtent.left) {
                newLonLat.lon += maxExtent.getWidth();
            }

            //shift left?
            while (newLonLat.lon > maxExtent.right) {
                newLonLat.lon -= maxExtent.getWidth();
            }
        }

        return newLonLat;
    }

    /**
     *
     * @function SuperMap.LonLat.prototype.destroy
     * @description éæ¯æ­¤å¯¹è±¡ã
     * éæ¯åæ­¤å¯¹è±¡çææå±æ§ä¸º nullï¼èä¸æ¯åå§å¼ã
     * @example
     * var lonLat = new SuperMap.LonLat(100,50);
     * lonLat.destroy();
     */
    destroy() {
        this.lon = null;
        this.lat = null;
    }

    /**
     * @function SuperMap.LonLat.fromString
     * @description éè¿å­ç¬¦ä¸²çæä¸ä¸ª {@link SuperMap.LonLat} å¯¹è±¡ã
     * @example
     * var str = "100,50";
     * var lonLat = SuperMap.LonLat.fromString(str);
     * @param {string} str - å­ç¬¦ä¸²çæ ¼å¼ï¼Lon+","+Latãå¦ï¼"100,50"ã
     * @returns {SuperMap.LonLat} è¿åä¸ä¸ª {@link SuperMap.LonLat} å¯¹è±¡ã
     */
    static fromString(str) {
        var pair = str.split(",");
        return new LonLat_LonLat(pair[0], pair[1]);
    }

    /**
     * @function SuperMap.LonLat.fromArray
     * @description éè¿æ°ç»çæä¸ä¸ª <SuperMap.LonLat> å¯¹è±¡ã
     * @param {Array.<float>} arr - æ°ç»çæ ¼å¼ï¼é¿åº¦åªè½ä¸º2,ï¼[Lon,Lat]ãå¦ï¼[5,-42]ã
     * @returns {SuperMap.LonLat} è¿åä¸ä¸ª <SuperMap.LonLat> å¯¹è±¡ã
     */
    static fromArray(arr) {
        var gotArr = Util.isArray(arr),
            lon = gotArr && arr[0],
            lat = gotArr && arr[1];
        return new LonLat_LonLat(lon, lat);
    }


}


// CONCATENATED MODULE: ./src/common/commontypes/Bounds.js
/* CopyrightÂ© 2000 - 2019 SuperMap Software Co.Ltd. All rights reserved.
 * This program are made available under the terms of the Apache License, Version 2.0
 * which accompanies this distribution and is available at http://www.apache.org/licenses/LICENSE-2.0.html.*/






/**
 * @class SuperMap.Bounds
 * @category BaseTypes Geometry
 * @classdesc è¡¨ç¤ºè¾¹çç±»å®ä¾ãä½¿ç¨ bounds ä¹åéè¦è®¾ç½® leftï¼bottomï¼rightï¼top åä¸ªå±æ§ï¼è¿äºå±æ§çåå§å¼ä¸º nullã
 * @param {number} [left] - å·¦è¾¹çï¼æ³¨æèèå®½åº¦ï¼çè®ºä¸å°äº right å¼ã
 * @param {number} [bottom] - ä¸è¾¹çãèèé«åº¦ï¼çè®ºä¸å°äº top å¼ã
 * @param {number} [right] - å³è¾¹çã
 * @param {number} [top] - ä¸è¾¹çã
 * @param {Array.<number>} [array] - [left, bottom, right, top]ï¼å¦æåæ¶ä¼ å¤ä¸ªåæ°ï¼åä½¿ç¨å·¦ä¸å³ä¸ç»æçæ°ç»ã
 * @example
 * var bounds = new SuperMap.Bounds();
 * bounds.extend(new SuperMap.LonLat(4,5));
 * bounds.extend(new SuperMap.LonLat(5,6));
 * bounds.toBBOX(); // returns 4,5,5,6
 */
class Bounds_Bounds {


    constructor(left, bottom, right, top) {
        if (Util.isArray(left)) {
            top = left[3];
            right = left[2];
            bottom = left[1];
            left = left[0];
        }
        /**
         * @member {number} SuperMap.Bounds.prototype.left
         * @description æå°çæ°´å¹³åæ ç³»ã
         */
        this.left = left != null ? Util.toFloat(left) : this.left;

        /**
         * @member {number} SuperMap.Bounds.prototype.bottom
         * @description æå°çåç´åæ ç³»ã
         */
        this.bottom = bottom != null ? Util.toFloat(bottom) : this.bottom;

        /**
         * @member {number} SuperMap.Bounds.prototype.right
         * @description æå¤§çæ°´å¹³åæ ç³»ã
         */
        this.right = right != null ? Util.toFloat(right) : this.right;

        /**
         * @member {number} SuperMap.Bounds.prototype.top
         * @description æå¤§çåç´åæ ç³»ã
         */
        this.top = top != null ? Util.toFloat(top) : this.top;

        /**
         * @member {SuperMap.LonLat} SuperMap.Bounds.prototype.centerLonLat
         * @description bounds çå°å¾ç©ºé´çä¸­å¿ç¹ãç¨ getCenterLonLat() è·å¾ã
         */
        this.centerLonLat = null;
        this.CLASS_NAME = "SuperMap.Bounds";
    }

    /**
     * @function SuperMap.Bounds.prototype.clone
     * @description å¤å¶å½å bounds å¯¹è±¡ã
     * @example
     * var bounds1 = new SuperMap.Bounds(-180,-90,180,90);
     * var bounds2 = bounds1.clone();
     * @returns {SuperMap.Bounds} è¿åä¸ä¸ªåéç boundsã
     */
    clone() {
        return new Bounds_Bounds(this.left, this.bottom,
            this.right, this.top);
    }

    /**
     * @function SuperMap.Bounds.prototype.equals
     * @description å¤æ­ä¸¤ä¸ª bounds å¯¹è±¡æ¯å¦ç¸ç­ã
     * @example
     * var bounds1 = new SuperMap.Bounds(-180,-90,180,90);
     * var bounds2 = new SuperMap.Bounds(-180,-90,180,90);
     * var isEquals = bounds1.equals(bounds2);
     * @param {SuperMap.Bounds} bounds - éè¦è¿è¡è®¡è¾ç boundsã
     * @returns {boolean} å¦æ bounds å¯¹è±¡çè¾¹åä¼ å¥ç bounds ä¸è´åè¿å trueï¼ä¸ä¸è´æä¼ å¥ç bounds åæ°ä¸º NULL åè¿å falseã
     */
    equals(bounds) {
        var equals = false;
        if (bounds != null) {
            equals = ((this.left === bounds.left) &&
                (this.right === bounds.right) &&
                (this.top === bounds.top) &&
                (this.bottom === bounds.bottom));
        }
        return equals;
    }

    /**
     * @function SuperMap.Bounds.prototype.toString
     * @description è¿åæ­¤å¯¹è±¡çå­ç¬¦ä¸²å½¢å¼ã
     * @example
     * var bounds = new SuperMap.Bounds(-180,-90,180,90);
     * var str = bounds.toString();
     * @returns {string} è¾¹çå¯¹è±¡çå­ç¬¦ä¸²è¡¨ç¤ºå½¢å¼ï¼left,bottom,right,topï¼ï¼ä¾å¦: "-180,-90,180,90"ã
     */
    toString() {
        return [this.left, this.bottom, this.right, this.top].join(",");
    }

    /**
     * @function SuperMap.Bounds.prototype.toArray
     * @description è¾¹çå¯¹è±¡çæ°ç»è¡¨ç¤ºå½¢å¼ã
     * @example
     * var bounds = new SuperMap.Bounds(-180,-90,100,80);
     * //array1 = [-180,-90,100,80];
     * var array1 = bounds.toArray();
     * //array1 = [-90,-180,80,100];
     * var array2 = bounds.toArray(true);
     * @param {boolean} [reverseAxisOrder=false] - æ¯å¦åè½¬è½´é¡ºåºã
     * å¦æè®¾ä¸º trueï¼ååè½¬é¡ºåºï¼bottom,left,top,rightï¼ï¼å¦åææ­£å¸¸è½´é¡ºåºï¼left,bottom,right,topï¼ã
     * @returns {Array.<number>} left, bottom, right, top æ°ç»ã
     */
    toArray(reverseAxisOrder) {
        if (reverseAxisOrder === true) {
            return [this.bottom, this.left, this.top, this.right];
        } else {
            return [this.left, this.bottom, this.right, this.top];
        }
    }

    /**
     * @function SuperMap.Bounds.prototype.toBBOX
     * @description åå°æ°ç¹å decimal ä½æ°å­è¿è¡åèäºå¥åè½¬æ¢ä¸º BBOX å­ç¬¦ä¸²ã
     * @example
     * var bounds = new SuperMap.Bounds(-1.1234567,-1.7654321,1.4444444,1.5555555);
     * //str1 = "-1.123457,-1.765432,1.444444,1.555556";
     * var str1 = bounds.toBBOX();
     * //str2 = "-1.1,-1.8,1.4,1.6";
     * var str2 = bounds.toBBOX(1);
     * //str2 = "-1.8,-1.1,1.6,1.4";
     * var str2 = bounds.toBBOX(1,true);
     * @param {integer} [decimal=6] - è¾¹çæ¹ä½åæ çæææ°å­ä¸ªæ°ã
     * @param {boolean} [reverseAxisOrder=false] - æ¯å¦æ¯åè½¬è½´é¡ºåºã
     * å¦æè®¾ä¸ºtrueï¼ååè½¬é¡ºåºï¼bottom,left,top,rightï¼,å¦åææ­£å¸¸è½´é¡ºåºï¼left,bottom,right,topï¼ã
     * @returns {string} è¾¹çå¯¹è±¡çå­ç¬¦ä¸²è¡¨ç¤ºå½¢å¼ï¼å¦ï¼"5,42,10,45"ã
     */
    toBBOX(decimal, reverseAxisOrder) {
        if (decimal == null) {
            decimal = 6;
        }
        var mult = Math.pow(10, decimal);
        var xmin = Math.round(this.left * mult) / mult;
        var ymin = Math.round(this.bottom * mult) / mult;
        var xmax = Math.round(this.right * mult) / mult;
        var ymax = Math.round(this.top * mult) / mult;
        if (reverseAxisOrder === true) {
            return ymin + "," + xmin + "," + ymax + "," + xmax;
        } else {
            return xmin + "," + ymin + "," + xmax + "," + ymax;
        }
    }

    /**
     * @function SuperMap.Bounds.prototype.toGeometry
     * @description åºäºå½åè¾¹çèå´åå»ºä¸ä¸ªæ°çå¤è¾¹å½¢å¯¹è±¡ã
     * @example
     * var bounds = new SuperMap.Bounds(-180,-90,100,80);
     * //SuperMap.Geometry.Polygonå¯¹è±¡
     * var geo = bounds.toGeometry();
     * @returns {SuperMap.Geometry.Polygon} åºäºå½å bounds åæ åå»ºçæ°çå¤è¾¹å½¢ã
     */
    // toGeometry() {
    //     return new Polygon([
    //         new LinearRing([
    //             new Point(this.left, this.bottom),
    //             new Point(this.right, this.bottom),
    //             new Point(this.right, this.top),
    //             new Point(this.left, this.top)
    //         ])
    //     ]);
    // }

    /**
     * @function SuperMap.Bounds.prototype.getWidth
     * @description è·å bounds çå®½åº¦ã
     * @example
     * var bounds = new SuperMap.Bounds(-180,-90,100,80);
     * //width = 280;
     * var width = bounds.getWidth();
     * @returns {float} è·åå½å bounds çå®½åº¦ï¼right åå» leftï¼ã
     */
    getWidth() {
        return (this.right - this.left);
    }

    /**
     * @function SuperMap.Bounds.prototype.getHeight
     * @description è·å bounds çé«åº¦ã
     * @example
     * var bounds = new SuperMap.Bounds(-180,-90,100,80);
     * //height = 170;
     * var height = bounds.getHeight();
     * @returns {float} è¿åè¾¹çé«åº¦ï¼top åå» bottomï¼ã
     */
    getHeight() {
        return (this.top - this.bottom);
    }

    /**
     * @function SuperMap.Bounds.prototype.getSize
     * @description è·åè¾¹æ¡å¤§å°ã
     * @example
     * var bounds = new SuperMap.Bounds(-180,-90,100,80);
     * var size = bounds.getSize();
     * @returns {SuperMap.Size} è¿åè¾¹æ¡å¤§å°ã
     */
    getSize() {
        return new Size(this.getWidth(), this.getHeight());
    }

    /**
     * @function SuperMap.Bounds.prototype.getCenterPixel
     * @description è·ååç´ æ ¼å¼çèå´ä¸­å¿ç¹ã
     * @example
     * var bounds = new SuperMap.Bounds(-180,-90,100,80);
     * var pixel = bounds.getCenterPixel();
     * @returns {SuperMap.Pixel} è¿ååç´ æ ¼å¼çå½åèå´çä¸­å¿ç¹ã
     */
    getCenterPixel() {
        return new Pixel_Pixel((this.left + this.right) / 2,
            (this.bottom + this.top) / 2);
    }

    /**
     * @function SuperMap.Bounds.prototype.getCenterLonLat
     * @description è·åå°çæ ¼å¼çèå´ä¸­å¿ç¹ã
     * @example
     * var bounds = new SuperMap.Bounds(-180,-90,100,80);
     * var lonlat = bounds.getCenterLonLat();
     * @returns {SuperMap.LonLat} è¿åå½åå°çèå´çä¸­å¿ç¹ã
     */
    getCenterLonLat() {
        if (!this.centerLonLat) {
            this.centerLonLat = new LonLat_LonLat(
                (this.left + this.right) / 2, (this.bottom + this.top) / 2
            );
        }
        return this.centerLonLat;
    }

    /**
     * @function SuperMap.Bounds.prototype.scale
     * @description æç§æ¯ä¾æ©å¤§/ç¼©å°åºä¸ä¸ªæ°ç boundsã
     * @example
     * var bounds = new SuperMap.Bounds(-50,-50,40,40);
     * var bounds2 = bounds.scale(2);
     * @param {float} [ratio=1] - éè¦æ©å¤§çæ¯ä¾ã
     * @param {(SuperMap.Pixel|SuperMap.LonLat)} [origin] - æ©å¤§æ¶çåºåç¹ï¼é»è®¤ä¸ºå½å bounds çä¸­å¿ç¹ã
     * @returns {SuperMap.Bounds} è¿åéè¿ ratioãorigin è®¡ç®å¾å°çæ°çè¾¹çèå´ã
     */
    scale(ratio, origin) {
        ratio = ratio ? ratio : 1;
        if (origin == null) {
            origin = this.getCenterLonLat();
        }

        var origx, origy;

        // get origin coordinates
        if (origin.CLASS_NAME === "SuperMap.LonLat") {
            origx = origin.lon;
            origy = origin.lat;
        } else {
            origx = origin.x;
            origy = origin.y;
        }

        var left = (this.left - origx) * ratio + origx;
        var bottom = (this.bottom - origy) * ratio + origy;
        var right = (this.right - origx) * ratio + origx;
        var top = (this.top - origy) * ratio + origy;

        return new Bounds_Bounds(left, bottom, right, top);
    }

    /**
     * @function SuperMap.Bounds.prototype.add
     * @description å¨å½åç Bounds ä¸æç§ä¼ å¥çåæ ç¹è¿è¡å¹³ç§»ï¼è¿åæ°çèå´ã
     * @example
     * var bounds1 = new SuperMap.Bounds(-50,-50,40,40);
     * //bounds2 æ¯æ°ç bounds
     * var bounds2 = bounds.add(20,10);
     * @param {float} x - ä¼ å¥åæ ç¹ç x åæ ã
     * @param {float} y - ä¼ å¥åæ ç¹ç y åæ ã
     * @returns {SuperMap.Bounds} è¿åä¸ä¸ªæ°ç boundsï¼æ­¤ bounds çåæ æ¯ç±ä¼ å¥ç xï¼y åæ°ä¸å½å bounds åæ è®¡ç®æå¾ã
     */
    add(x, y) {
        if ((x == null) || (y == null)) {
            throw new TypeError('Bounds.add cannot receive null values');
        }
        return new Bounds_Bounds(this.left + x, this.bottom + y,
            this.right + x, this.top + y);
    }

    /**
     * @function SuperMap.Bounds.prototype.extend
     * @description å¨å½å bounds ä¸æ©å± boundsï¼æ¯æ pointï¼lanlat å boundsãæ©å±åç bounds çèå´æ¯ä¸¤èçç»åã
     * @example
     * var bounds1 = new SuperMap.Bounds(-50,-50,40,40);
     * //bounds æ¹å
     * bounds.extend(new SuperMap.LonLat(50,60));
     * @param {(SuperMap.Geometry.Point|SuperMap.LonLat|SuperMap.Bounds)} object - å¯ä»¥æ¯ pointãlonlat å boundsã
     */
    extend(object) {
        var bounds = null;
        if (object) {
            // clear cached center location
            switch (object.CLASS_NAME) {
                case "SuperMap.LonLat":
                    bounds = new Bounds_Bounds(object.lon, object.lat,
                        object.lon, object.lat);
                    break;
                case "SuperMap.Geometry.Point":
                    bounds = new Bounds_Bounds(object.x, object.y,
                        object.x, object.y);
                    break;

                case "SuperMap.Bounds":
                    bounds = object;
                    break;
            }

            if (bounds) {
                this.centerLonLat = null;
                if ((this.left == null) || (bounds.left < this.left)) {
                    this.left = bounds.left;
                }
                if ((this.bottom == null) || (bounds.bottom < this.bottom)) {
                    this.bottom = bounds.bottom;
                }
                if ((this.right == null) || (bounds.right > this.right)) {
                    this.right = bounds.right;
                }
                if ((this.top == null) || (bounds.top > this.top)) {
                    this.top = bounds.top;
                }
            }
        }
    }

    /**
     * @function SuperMap.Bounds.prototype.containsLonLat
     * @description å¤æ­ä¼ å¥çåæ æ¯å¦å¨èå´åã
     * @example
     * var bounds1 = new SuperMap.Bounds(-50,-50,40,40);
     * //isContains1 = true
     * //è¿éçç¬¬äºä¸ªåæ°å¯ä»¥ç´æ¥ä¸º boolean ç±»åï¼ä¹å°±æ¯inclusive
     * var isContains1 = bounds.containsLonLat(new SuperMap.LonLat(40,40),true);
     *
     * //(40,40)å¨èå´åï¼åæ ·(40+360,40)ä¹å¨èå´å
     * var bounds2 = new SuperMap.Bounds(-50,-50,40,40);
     * //isContains2 = true;
     * var isContains2 = bounds2.containsLonLat(
     *      new SuperMap.LonLat(400,40),
     *      {
     *           inclusive:true,
     *           //å¨ççèå´
     *           worldBounds: new SuperMap.Bounds(-180,-90,180,90)
     *      }
     * );
     * @param {(SuperMap.LonLat|Object)} ll - <SuperMap.LonLat> å¯¹è±¡æèæ¯ä¸ä¸ªåå« 'lon' ä¸ 'lat' å±æ§çå¯¹è±¡ã
     * @param {Object} options - å¯éåæ°ã
     * @param {boolean} [options.inclusive=true] - æ¯å¦åå«è¾¹çã
     * @param {SuperMap.Bounds} [options.worldBounds] - å¦ææä¾ worldBounds åæ°, å¦æ ll åæ°æä¾çåæ è¶åºäºä¸çè¾¹çï¼worldBoundsï¼ï¼
     *        ä½æ¯éè¿æ¥ççº¿çè½¬åå¯ä»¥è¢«åå«, å®å°è¢«è®¤ä¸ºæ¯åå«å¨è¯¥èå´åçã
     * @returns {boolean} ä¼ å¥åæ æ¯å¦åå«å¨èå´åã
     */
    containsLonLat(ll, options) {
        if (typeof options === "boolean") {
            options = {inclusive: options};
        }
        options = options || {};
        var contains = this.contains(ll.lon, ll.lat, options.inclusive),
            worldBounds = options.worldBounds;
        //æ¥ççº¿ä»¥å¤çä¹æå¯è½ç®åå«ï¼
        if (worldBounds && !contains) {
            var worldWidth = worldBounds.getWidth();
            var worldCenterX = (worldBounds.left + worldBounds.right) / 2;
            //è¿ä¸æ­¥å¾å³é®
            var worldsAway = Math.round((ll.lon - worldCenterX) / worldWidth);
            contains = this.containsLonLat({
                lon: ll.lon - worldsAway * worldWidth,
                lat: ll.lat
            }, {inclusive: options.inclusive});
        }
        return contains;
    }

    /**
     * @function SuperMap.Bounds.prototype.containsPixel
     * @description å¤æ­ä¼ å¥çåç´ æ¯å¦å¨èå´åãç´æ¥å¹éå¤§å°ï¼ä¸æ¶ååç´ åå°çè½¬æ¢ã
     * @example
     * var bounds = new SuperMap.Bounds(-50,-50,40,40);
     * //isContains = true
     * var isContains = bounds.containsPixel(new SuperMap.Pixel(40,40),true);
     * @param {SuperMap.Pixel} px - æä¾çåç´ åæ°ã
     * @param {boolean} [inclusive=true] - æ¯å¦åå«è¾¹çã
     * @returns {boolean} ä¼ å¥ç pixel å¨å½åè¾¹çèå´ä¹åã
     */
    containsPixel(px, inclusive) {
        return this.contains(px.x, px.y, inclusive);
    }

    /**
     * @function SuperMap.Bounds.prototype.contains
     * @description å¤æ­ä¼ å¥ç xï¼y åæ å¼æ¯å¦å¨èå´åã
     * @example
     * var bounds = new SuperMap.Bounds(-50,-50,40,40);
     * //isContains = true
     * var isContains = bounds.contains(40,40,true);
     * @param {float} x - ä¼ å¥ç x åæ å¼ã
     * @param {float} y - ä¼ å¥ç y åæ å¼ã
     * @param {boolean} [inclusive=true] - æ¯å¦åå«è¾¹çã
     * @returns {boolean} ä¼ å¥ç xï¼y åæ æ¯å¦å¨å½åèå´åã
     */
    contains(x, y, inclusive) {
        //set default
        if (inclusive == null) {
            inclusive = true;
        }

        if (x == null || y == null) {
            return false;
        }

        //x = Util.toFloat(x);
        //y = Util.toFloat(y);

        var contains = false;
        if (inclusive) {
            contains = ((x >= this.left) && (x <= this.right) &&
                (y >= this.bottom) && (y <= this.top));
        } else {
            contains = ((x > this.left) && (x < this.right) &&
                (y > this.bottom) && (y < this.top));
        }
        return contains;
    }

    /**
     * @function SuperMap.Bounds.prototype.intersectsBounds
     * @description å¤æ­ç®æ è¾¹çèå´æ¯å¦ä¸å½åè¾¹çèå´ç¸äº¤ãå¦æä¸¤ä¸ªè¾¹çèå´ä¸­çä»»æ
     *              è¾¹ç¼ç¸äº¤æèä¸ä¸ªè¾¹çåå«äºå¦å¤ä¸ä¸ªå°±è®¤ä¸ºè¿ä¸¤ä¸ªè¾¹çç¸äº¤ã
     * @example
     * var bounds = new SuperMap.Bounds(-180,-90,100,80);
     * var isIntersects = bounds.intersectsBounds(
     *      new SuperMap.Bounds(-170,-90,120,80)
     *  );
     * @param {SuperMap.Bounds} bounds - ç®æ è¾¹çã
     * @param {Object} options - åæ°ã
     * @param {boolean} [options.inclusive=true] - è¾¹ç¼éåä¹çæç¸äº¤ãå¦ææ¯falseï¼
     *                               ä¸¤ä¸ªè¾¹çèå´æ²¡æéå é¨åä»ä»æ¯å¨è¾¹ç¼ç¸æ¥ï¼éåï¼ï¼
     *                               è¿ç§æåµè¢«è®¤ä¸ºæ²¡æç¸äº¤ã
     * @param {SuperMap.Bounds} [options.worldBounds] - æä¾äº worldBounds åæ°, å¦æä»ä»¬ç¸äº¤æ¶
     *                               æ¯å¨å¨çèå´å, ä¸¤ä¸ªè¾¹çå°è¢«è§ä¸ºç¸äº¤ãè¿ä»éç¨äºäº¤åæå®å¨ä¸å¨ä¸çèå´çè¾¹çã
     * @returns {boolean} ä¼ å¥ç bounds å¯¹è±¡ä¸å½å bounds ç¸äº¤ã
     */
    intersectsBounds(bounds, options) {
        if (typeof options === "boolean") {
            options = {inclusive: options};
        }
        options = options || {};
        if (options.worldBounds) {
            var self = this.wrapDateLine(options.worldBounds);
            bounds = bounds.wrapDateLine(options.worldBounds);
        } else {
            self = this;
        }
        if (options.inclusive == null) {
            options.inclusive = true;
        }
        var intersects = false;
        var mightTouch = (
            self.left === bounds.right ||
            self.right === bounds.left ||
            self.top === bounds.bottom ||
            self.bottom === bounds.top
        );

        // if the two bounds only touch at an edge, and inclusive is false,
        // then the bounds don't *really* intersect.
        if (options.inclusive || !mightTouch) {
            // otherwise, if one of the boundaries even partially contains another,
            // inclusive of the edges, then they do intersect.
            var inBottom = (
                ((bounds.bottom >= self.bottom) && (bounds.bottom <= self.top)) ||
                ((self.bottom >= bounds.bottom) && (self.bottom <= bounds.top))
            );
            var inTop = (
                ((bounds.top >= self.bottom) && (bounds.top <= self.top)) ||
                ((self.top > bounds.bottom) && (self.top < bounds.top))
            );
            var inLeft = (
                ((bounds.left >= self.left) && (bounds.left <= self.right)) ||
                ((self.left >= bounds.left) && (self.left <= bounds.right))
            );
            var inRight = (
                ((bounds.right >= self.left) && (bounds.right <= self.right)) ||
                ((self.right >= bounds.left) && (self.right <= bounds.right))
            );
            intersects = ((inBottom || inTop) && (inLeft || inRight));
        }
        // document me
        if (options.worldBounds && !intersects) {
            var world = options.worldBounds;
            var width = world.getWidth();
            var selfCrosses = !world.containsBounds(self);
            var boundsCrosses = !world.containsBounds(bounds);
            if (selfCrosses && !boundsCrosses) {
                bounds = bounds.add(-width, 0);
                intersects = self.intersectsBounds(bounds, {inclusive: options.inclusive});
            } else if (boundsCrosses && !selfCrosses) {
                self = self.add(-width, 0);
                intersects = bounds.intersectsBounds(self, {inclusive: options.inclusive});
            }
        }
        return intersects;
    }

    /**
     * @function SuperMap.Bounds.prototype.containsBounds
     * @description å¤æ­ç®æ è¾¹çæ¯å¦è¢«å½åè¾¹çåå«å¨åã
     * @example
     * var bounds = new SuperMap.Bounds(-180,-90,100,80);
     * var isContains = bounds.containsBounds(
     *      new SuperMap.Bounds(-170,-90,100,80),true,true
     *  );
     * @param {SuperMap.Bounds} bounds - ç®æ è¾¹çã
     * @param {boolean} [partial=false] - ç®æ è¾¹ççä»»æé¨åé½åå«å¨å½åè¾¹çä¸­åè¢«è®¤ä¸ºæ¯åå«å³ç³»ã
     * å¦æè®¾ä¸º falseï¼æ´ä¸ªç®æ è¾¹çå¨é¨è¢«åå«å¨å½åè¾¹çèå´åã
     * @param {boolean} [inclusive=true] - è¾¹ç¼å±äº«è¢«è§ä¸ºåå«ã
     * @returns {boolean} ä¼ å¥çè¾¹çè¢«å½åè¾¹çåå«ã
     */
    containsBounds(bounds, partial, inclusive) {
        if (partial == null) {
            partial = false;
        }
        if (inclusive == null) {
            inclusive = true;
        }
        var bottomLeft = this.contains(bounds.left, bounds.bottom, inclusive);
        var bottomRight = this.contains(bounds.right, bounds.bottom, inclusive);
        var topLeft = this.contains(bounds.left, bounds.top, inclusive);
        var topRight = this.contains(bounds.right, bounds.top, inclusive);

        return (partial) ? (bottomLeft || bottomRight || topLeft || topRight)
            : (bottomLeft && bottomRight && topLeft && topRight);
    }

    /**
     * @function SuperMap.Bounds.prototype.determineQuadrant
     * @description å¤æ­ä¼ å¥åæ æ¯å¦å¨ bounds èå´åçè±¡éãä»¥ bounds ä¸­å¿ç¹ä¸ºåæ åç¹ã
     * @example
     * var bounds = new SuperMap.Bounds(-180,-90,100,80);
     * //str = "tr";
     * var str = bounds.determineQuadrant(
     *      new SuperMap.LonLat(20,20)
     *  );
     * @param {SuperMap.LonLat} lonlat - ä¼ å¥çåæ å¯¹è±¡ã
     * @returns {string} ä¼ å¥åæ æå¨çè±¡éï¼"br" "tr" "tl" "bl" åå«å¯¹åº"å³ä¸"ï¼"å³ä¸"ï¼"å·¦ä¸" "å·¦ä¸"ï¼ã
     */
    determineQuadrant(lonlat) {

        var quadrant = "";
        var center = this.getCenterLonLat();

        quadrant += (lonlat.lat < center.lat) ? "b" : "t";
        quadrant += (lonlat.lon < center.lon) ? "l" : "r";

        return quadrant;
    }

    /**
     * @function SuperMap.Bounds.prototype.wrapDateLine
     * @description å°å½å bounds ç§»å¨å°æå¤§è¾¹çèå´åé¨ï¼æè°çåé¨æ¯ç¸äº¤æèåé¨ï¼ã
     * @example
     * var bounds = new SuperMap.Bounds(380,-40,400,-20);
     * var maxExtent = new SuperMap.Bounds(-180,-90,100,80);
     * //æ°çbounds
     * var newBounds = bounds.wrapDateLine(maxExtent);
     * @param {SuperMap.Bounds} maxExtent - æå¤§çè¾¹çèå´ï¼ä¸è¬æ¯å¨çèå´ï¼ã
     * @param {Object} options - å¯ééé¡¹åæ°ã 
     * @param {float} [options.leftTolerance=0] - left åè®¸çè¯¯å·®ã 
     * @param {float} [options.rightTolerance=0] - right åè®¸çè¯¯å·®ã
     * @returns {SuperMap.Bounds} åéå½åè¾¹çãå¦æå½åè¾¹çå®å¨å¨æå¤§èå´ä¹å¤æ­¤å½æ°åè¿åä¸ä¸ªä¸åå¼çè¾¹çï¼
     *                            è¥è½å¨æå¤§è¾¹ççå·¦è¾¹ï¼åç»å½åçboundså¼å ä¸æå¤§èå´çå®½åº¦ï¼å³åå³ç§»å¨ï¼
     *                            è¥è½å¨å³è¾¹ï¼ååå·¦ç§»å¨ï¼å³ç»å½åçboundså¼å ä¸è´çæå¤§èå´çå®½åº¦ã
     */
    wrapDateLine(maxExtent, options) {
        options = options || {};

        var leftTolerance = options.leftTolerance || 0;
        var rightTolerance = options.rightTolerance || 0;

        var newBounds = this.clone();

        if (maxExtent) {
            var width = maxExtent.getWidth();
            //å¦æ newBounds å¨ maxExtent çå·¦è¾¹ï¼é£ä¹ä¸ç´åå³ç§»å¨ï¼ç´å°ç¸äº¤æèåå«ä¸ºæ­¢ï¼æ¯æ¬¡ç§»å¨width
            //shift right?
            while (newBounds.left < maxExtent.left &&
            newBounds.right - rightTolerance <= maxExtent.left) {
                newBounds = newBounds.add(width, 0);
            }
            //å¦æ newBounds å¨ maxExtent çå³è¾¹ï¼é£ä¹ä¸ç´åå·¦ç§»å¨ï¼ç´å°ç¸äº¤æèåå«ä¸ºæ­¢ï¼æ¯æ¬¡ç§»å¨width
            //shift left?
            while (newBounds.left + leftTolerance >= maxExtent.right &&
            newBounds.right > maxExtent.right) {
                newBounds = newBounds.add(-width, 0);
            }
            //å¦æåå³è¾¹ç¸äº¤ï¼å·¦è¾¹åå¨åé¨ï¼é£ä¹åæ¬¡åå·¦è¾¹ç§»å¨ä¸æ¬¡
            // crosses right only? force left
            var newLeft = newBounds.left + leftTolerance;
            if (newLeft < maxExtent.right && newLeft > maxExtent.left &&
                newBounds.right - rightTolerance > maxExtent.right) {
                newBounds = newBounds.add(-width, 0);
            }
        }

        return newBounds;
    }

    /**
     * @function SuperMap.Bounds.prototype.toServerJSONObject
     * @description è½¬æ¢æå¯¹åºç JSON æ ¼å¼å¯¹è±¡ã
     * @example
     * var bounds = new SuperMap.Bounds(-180,-90,100,80);
     * var obj = bounds.toServerJSONObject();
     * @returns {Object} è¿å JSON æ ¼å¼ç Object å¯¹è±¡ã
     */
    toServerJSONObject() {
        var jsonObject = {
            rightTop: {x: this.right, y: this.top},
            leftBottom: {x: this.left, y: this.bottom},
            left: this.left,
            right: this.right,
            top: this.top,
            bottom: this.bottom
        }
        return jsonObject;
    }

    /**
     *
     * @function SuperMap.Bounds.prototype.destroy
     * @description éæ¯æ­¤å¯¹è±¡ã
     * éæ¯åæ­¤å¯¹è±¡çææå±æ§ä¸º nullï¼èä¸æ¯åå§å¼ã
     * @example
     * var bounds = new SuperMap.Bounds(-180,-90,100,80);
     * bounds.destroy();
     */
    destroy() {
        this.left = null;
        this.right = null;
        this.top = null;
        this.bottom = null;
        this.centerLonLat = null;
    }

    /**
     * @function SuperMap.Bounds.fromString
     * @description éè¿å­ç¬¦ä¸²åæ°åå»ºæ°ç bounds çæé å½æ°ã
     * @example
     * var bounds = SuperMap.Bounds.fromString("-180,-90,100,80");
     * @param {string} str - è¾¹çå­ç¬¦ä¸²ï¼ç¨éå·éå¼ï¼e.g. <i>"5,42,10,45"</i>ï¼ã
     * @param {boolean} [reverseAxisOrder=false] - æ¯å¦åè½¬è½´é¡ºåºã
     * å¦æè®¾ä¸ºtrueï¼ååè½¬é¡ºåºï¼bottom,left,top,rightï¼ï¼å¦åææ­£å¸¸è½´é¡ºåºï¼left,bottom,right,topï¼ã
     * @returns {SuperMap.Bounds} è¿åç»å®çå­ç¬¦ä¸²åå»ºçæ°çè¾¹çå¯¹è±¡ã
     */
    static fromString(str, reverseAxisOrder) {
        var bounds = str.split(",");
        return Bounds_Bounds.fromArray(bounds, reverseAxisOrder);
    }

    /**
     * @function SuperMap.Bounds.fromArray
     * @description éè¿è¾¹çæ¡æ°ç»åå»º Boundsã
     * @example
     * var bounds = SuperMap.Bounds.fromArray([-180,-90,100,80]);
     * @param {Array.<float>} bbox - è¾¹çå¼æ°ç»ãï¼e.g. <i>[5,42,10,45]</i>ï¼ã
     * @param {boolean} [reverseAxisOrder=false] - æ¯å¦æ¯åè½¬è½´é¡ºåºãå¦æè®¾ä¸ºtrueï¼ååè½¬é¡ºåºï¼bottom,left,top,rightï¼ï¼å¦åææ­£å¸¸è½´é¡ºåºï¼left,bottom,right,topï¼ã
     * @returns {SuperMap.Bounds} è¿åæ ¹æ®ä¼ å¥çæ°ç»åå»ºçæ°çè¾¹çå¯¹è±¡ã
     */
    static fromArray(bbox, reverseAxisOrder) {
        return reverseAxisOrder === true ?
            new Bounds_Bounds(bbox[1], bbox[0], bbox[3], bbox[2]) :
            new Bounds_Bounds(bbox[0], bbox[1], bbox[2], bbox[3]);
    }

    /**
     * @function SuperMap.Bounds.fromSize
     * @description éè¿ä¼ å¥çè¾¹çå¤§å°æ¥åå»ºæ°çè¾¹çã
     * @example
     * var bounds = SuperMap.Bounds.fromSize(new SuperMap.Size(20,10));
     * @param {SuperMap.Size} size - ä¼ å¥çè¾¹çå¤§å°ã
     * @returns {SuperMap.Bounds} è¿åæ ¹æ®ä¼ å¥çè¾¹çå¤§å°çåå»ºæ°çè¾¹çã
     */
    static fromSize(size) {
        return new Bounds_Bounds(0,
            size.h,
            size.w,
            0);
    }

    /**
     * @function SuperMap.Bounds.oppositeQuadrant
     * @description åè½¬è±¡éã"t"å"b" äº¤æ¢ï¼"r"å"l"äº¤æ¢, å¦ï¼"tl"åä¸º"br"ã
     * @param {string} quadrant - ä»£è¡¨è±¡éçå­ç¬¦ä¸²ï¼å¦ï¼"tl"ã
     * @returns {string} åè½¬åçè±¡éã
     */
    static oppositeQuadrant(quadrant) {
        var opp = "";

        opp += (quadrant.charAt(0) === 't') ? 'b' : 't';
        opp += (quadrant.charAt(1) === 'l') ? 'r' : 'l';

        return opp;
    }

}

SuperMap.Bounds = Bounds_Bounds;

// CONCATENATED MODULE: ./src/common/commontypes/Geometry.js
/* CopyrightÂ© 2000 - 2019 SuperMap Software Co.Ltd. All rights reserved.
 * This program are made available under the terms of the Apache License, Version 2.0
 * which accompanies this distribution and is available at http://www.apache.org/licenses/LICENSE-2.0.html.*/

// import {WKT} from '../format/WKT';
// import {Vector} from './Vector';


/**
 * @class SuperMap.Geometry
 * @category BaseTypes Geometry
 * @classdesc å ä½å¯¹è±¡ç±»ï¼æè¿°å°çå¯¹è±¡çå ä½å¾å½¢ã
 */
class Geometry_Geometry {


    constructor() {
        this.CLASS_NAME = "SuperMap.Geometry";
        /**
         * @member {string} SuperMap.Geometry.prototype.id
         * @description  æ­¤å ä½å¯¹è±¡çå¯ä¸æ ç¤ºç¬¦ã
         *
         */
        this.id = Util.createUniqueID(this.CLASS_NAME + "_");

        /**
         * @member {SuperMap.Geometry} SuperMap.Geometry.prototype.parent
         * @description This is set when a Geometry is added as component
         * of another geometry
         */
        this.parent = null;

        /**
         * @member {SuperMap.Bounds} SuperMap.Geometry.prototype.bounds
         * @description å ä½å¯¹è±¡çèå´ã
         *
         */
        this.bounds = null;

        /**
         * @member {interger} SuperMap.Geometry.prototype.SRID
         * @description æå½±åæ åæ°ãéè¿è¯¥åæ°ï¼æå¡å¨å¤æ­ Geometry å¯¹è±¡çåæ åèç³»æ¯å¦ä¸æ°æ®éç¸åï¼å¦æä¸åï¼åå¨æ°æ®å¥åºåè¿è¡æå½±åæ¢ã
         * @example
         *   var geometry= new SuperMap.Geometry();
         *   geometry. SRID=4326;
         *
         */
        this.SRID = null;
    }


    /**
     * @function SuperMap.Geometry.prototype.destroy
     * @description è§£æ Geometry ç±»ï¼éæ¾èµæºã
     */
    destroy() {
        this.id = null;
        this.bounds = null;
        this.SRID = null;
    }


    /**
     * @function SuperMap.Geometry.prototype.clone
     * @description åå»ºåéçå ä½å¾å½¢ãåéçå ä½å¾å½¢ä¸è®¾ç½®éæ åçå±æ§ã
     * @returns {SuperMap.Geometry} åéçå ä½å¾å½¢ã
     */
    clone() {
        return new Geometry_Geometry();
    }


    /**
     * @function SuperMap.Geometry.prototype.setBounds
     * @description è®¾ç½®æ­¤å ä½å¯¹è±¡ç boundsã
     * @param {SuperMap.Bounds} bounds - èå´ã
     */
    setBounds(bounds) {
        if (bounds) {
            this.bounds = bounds.clone();
        }
    }


    /**
     * @function SuperMap.Geometry.prototype.clearBounds
     * @description æ¸é¤å ä½å¯¹è±¡ç boundsã
     * å¦æè¯¥å¯¹è±¡æç¶ç±»ï¼ä¹ä¼æ¸é¤ç¶ç±»å ä½å¯¹è±¡ç boundsã
     */
    clearBounds() {
        this.bounds = null;
        if (this.parent) {
            this.parent.clearBounds();
        }
    }


    /**
     * @function SuperMap.Geometry.prototype.extendBounds
     * @description Extend the existing bounds to include the new bounds.
     * If geometry's bounds is not yet set, then set a new Bounds.
     *
     * @param {SuperMap.Bounds} newBounds - èå´ã
     */
    extendBounds(newBounds) {
        var bounds = this.getBounds();
        if (!bounds) {
            this.setBounds(newBounds);
        } else {
            this.bounds.extend(newBounds);
        }
    }


    /**
     * @function SuperMap.Geometry.prototype.getBounds
     * @description è·å¾å ä½å¾å½¢çè¾¹çãå¦ææ²¡æè®¾ç½®è¾¹çï¼å¯éè¿è®¡ç®è·å¾ã
     * @returns {SuperMap.Bounds} è¿åçå ä½å¯¹è±¡çè¾¹çã
     */
    getBounds() {
        if (this.bounds == null) {
            this.calculateBounds();
        }
        return this.bounds;
    }


    /**
     * @function SuperMap.Geometry.prototype.calculateBounds
     * @description éæ°è®¡ç®å ä½å¾å½¢çè¾¹çï¼éè¦å¨å­ç±»ä¸­å®ç°æ­¤æ¹æ³ï¼ã
     */
    calculateBounds() {
        //
        // This should be overridden by subclasses.
        //
    }

    /**
     * @function SuperMap.Geometry.prototype.getVertices
     * @description è¿åå ä½å¾å½¢çææé¡¶ç¹çåè¡¨ï¼éè¦å¨å­ç±»ä¸­å®ç°æ­¤æ¹æ³ï¼ã
     * @param {boolean} [nodes] - å¦ææ¯ trueï¼çº¿ååªè¿åçº¿çæ«ç«¯ç¹ï¼å¦æ falseï¼ä»ä»è¿åé¡¶ç¹ï¼å¦ææ²¡æè®¾ç½®ï¼åè¿åé¡¶ç¹ã
     * @returns {Array} å ä½å¾å½¢çé¡¶ç¹åè¡¨ã
     */
    getVertices(nodes) { // eslint-disable-line no-unused-vars
    }

    /**
     * @function SuperMap.Geometry.prototype.getArea
     * @description è®¡ç®å ä½å¯¹è±¡çé¢ç§¯ ï¼æ­¤æ¹æ³éè¦å¨å­ç±»ä¸­å®ä¹ã
     * @returns {float} The area of the collection by summing its parts
     */
    getArea() {
        //to be overridden by geometries that actually have an area
        //
        return 0.0;
    }


    // /**
    //  * @function SuperMap.Geometry.prototype.toString
    //  * @description è¿ågeometryå¯¹è±¡çå­ç¬¦ä¸²è¡¨è¿°ï¼éè¦å¼å¥{@link SuperMap.Format.WKT}ãæ­¤æ¹æ³åªè½å¨å­ç±»å®ç°ï¼å¨ç¶ç±»ä½¿ç¨ä¼æ¥éã
    //  * @returns {string} geometryå¯¹è±¡çå­ç¬¦ä¸²è¡¨è¿°(Well-Known Text)
    //  */
    // toString() {
    // var string;
    // if (WKT) {
    //     var wkt = new WKT();
    //     string = wkt.write(new Vector(this));
    // } else {
    //     string = Object.prototype.toString.call(this);
    // }
    // return string;
    // }
}

SuperMap.Geometry = Geometry_Geometry;

// CONCATENATED MODULE: ./src/common/commontypes/geometry/Collection.js
/* CopyrightÂ© 2000 - 2019 SuperMap Software Co.Ltd. All rights reserved.
 * This program are made available under the terms of the Apache License, Version 2.0
 * which accompanies this distribution and is available at http://www.apache.org/licenses/LICENSE-2.0.html.*/





/**
 * @class SuperMap.Geometry.Collection
 * @classdesc å ä½å¯¹è±¡éåç±»ï¼å­å¨å¨æ¬å°ç components å±æ§ä¸­ï¼å¯ä½ä¸ºåæ°ä¼ éç»æé å½æ°ï¼ã<br>
 *            éçæ°çå ä½å¾å½¢æ·»å å°éåä¸­ï¼å°ä¸è½è¢«åéï¼å½ç§»å¨å ä½å¾å½¢æ¶ï¼éè¦æå®åç§ç©ã<br>
 *            getArea å getLength å½æ°åªè½éè¿éåå­å¨å ä½å¯¹è±¡ç components æ°ç»ï¼æ»è®¡ææå ä½å¾å½¢çé¢ç§¯åé¿åº¦ã
 * @category BaseTypes Geometry
 * @extends {SuperMap.Geometry}
 * @param {Array.<SuperMap.Geometry>} components - å ä½å¯¹è±¡æ°ç»ã
 * @example
 * var point1 = new SuperMap.Geometry.Point(10,20);
 * var point2 = new SuperMap.Geometry.Point(30,40);
 * var col = new SuperMap.Geometry.Collection([point1,point2]);
 */
class Collection_Collection extends Geometry_Geometry {


    constructor(components) {
        super();

        /**
         * @description å­å¨å ä½å¯¹è±¡çæ°ç»ã
         * @member {Array.<SuperMap.Geometry>} SuperMap.Geometry.Collection.prototype.components
         */
        this.components = [];

        /**
         * @member {Array.<string>} SuperMap.Geometry.Collection.prototype.componentTypes
         * @description components å­å¨ççå ä½å¯¹è±¡ææ¯æçå ä½ç±»åæ°ç»ï¼ä¸ºç©ºè¡¨ç¤ºç±»åä¸åéå¶ã
         */
        this.componentTypes = null;
        if (components != null) {
            this.addComponents(components);
        }
        this.CLASS_NAME = "SuperMap.Geometry.Collection";
        this.geometryType = "Collection";
    }

    /**
     * @function SuperMap.Geometry.Collection.prototype.destroy
     * @description éæ¯å ä½å¾å½¢ã
     */
    destroy() {
        this.components.length = 0;
        this.components = null;
        super.destroy();
    }

    /**
     * @function SuperMap.Geometry.Collection.prototype.clone
     * @description åéå½åå ä½å¯¹è±¡ã
     * @returns {SuperMap.Geometry.Collection} åéçå ä½å¯¹è±¡éåã
     */
    clone() {
        var geometry = new Collection_Collection();
        for (var i = 0, len = this.components.length; i < len; i++) {
            geometry.addComponent(this.components[i].clone());
        }

        // catch any randomly tagged-on properties
        Util.applyDefaults(geometry, this);

        return geometry;
    }

    /**
     * @function SuperMap.Geometry.Collection.prototype.getComponentsString
     * @description è·å components å­ç¬¦ä¸²ã
     * @returns {string} components å­ç¬¦ä¸²ã
     */
    getComponentsString() {
        var strings = [];
        for (var i = 0, len = this.components.length; i < len; i++) {
            strings.push(this.components[i].toShortString());
        }
        return strings.join(",");
    }

    /**
     * @function SuperMap.Geometry.Collection.prototype.calculateBounds
     * @description éè¿éåæ°ç»éæ°è®¡ç®è¾¹çï¼å¨éåæ¯ä¸å­é¡¹ä¸­æ¶è°ç¨ extend æ¹æ³ã
     */
    calculateBounds() {
        this.bounds = null;
        var bounds = new Bounds_Bounds();
        var components = this.components;
        if (components) {
            for (var i = 0, len = components.length; i < len; i++) {
                bounds.extend(components[i].getBounds());
            }
        }
        // to preserve old behavior, we only set bounds if non-null
        // in the future, we could add bounds.isEmpty()
        if (bounds.left != null && bounds.bottom != null &&
            bounds.right != null && bounds.top != null) {
            this.setBounds(bounds);
        }
    }

    /**
     * @function SuperMap.Geometry.Collection.prototype.addComponents
     * @description ç»å ä½å¾å½¢å¯¹è±¡æ·»å åç´ ã
     * @param {Array.<SuperMap.Geometry>} components - å ä½å¯¹è±¡ç»ä»¶ã
     * @example
     * var collection = new SuperMap.Geometry.Collection();
     * collection.addComponents(new SuerpMap.Geometry.Point(10,10));
     */
    addComponents(components) {
        if (!(Util.isArray(components))) {
            components = [components];
        }
        for (var i = 0, len = components.length; i < len; i++) {
            this.addComponent(components[i]);
        }
    }

    /**
     * @function SuperMap.Geometry.Collection.prototype.addComponent
     * @description æ·»å ä¸ä¸ªå ä½å¯¹è±¡å°éåä¸­ãå¦æè®¾ç½®äº componentTypes ç±»åï¼åæ·»å çå ä½å¯¹è±¡å¿é¡»æ¯ componentTypes ä¸­çç±»åã
     * @param {SuperMap.Geometry} component - å¾æ·»å çå ä½å¯¹è±¡ã
     * @param {int} [index] - å ä½å¯¹è±¡æå¥çä½ç½®ã
     * @returns {boolean} æ¯å¦æ·»å æåã
     */
    addComponent(component, index) {
        var added = false;
        if (component) {
            if (this.componentTypes == null ||
                (Util.indexOf(this.componentTypes,
                    component.CLASS_NAME) > -1)) {

                if (index != null && (index < this.components.length)) {
                    var components1 = this.components.slice(0, index);
                    var components2 = this.components.slice(index,
                        this.components.length);
                    components1.push(component);
                    this.components = components1.concat(components2);
                } else {
                    this.components.push(component);
                }
                component.parent = this;
                this.clearBounds();
                added = true;
            }
        }
        return added;
    }

    /**
     * @function SuperMap.Geometry.Collection.prototype.removeComponents
     * @description æ¸é¤å ä½å¯¹è±¡ã
     * @param {Array.<SuperMap.Geometry>} components - éè¦æ¸é¤çå ä½å¯¹è±¡ã
     * @returns {boolean} åç´ æ¯å¦è¢«å é¤ã
     */
    removeComponents(components) {
        var removed = false;

        if (!(Util.isArray(components))) {
            components = [components];
        }
        for (var i = components.length - 1; i >= 0; --i) {
            removed = this.removeComponent(components[i]) || removed;
        }
        return removed;
    }

    /**
     * @function SuperMap.Geometry.Collection.prototype.removeComponent
     * @description ä»éåä¸­ç§»é¤ä¸ä¸ªå ä½å¯¹è±¡ã
     * @param {SuperMap.Geometry} component - è¦ç§»é¤çå ä½å¯¹è±¡ã
     * @returns {boolean} å ä½å¯¹è±¡æ¯å¦ç§»é¤æåã
     */
    removeComponent(component) {
        Util.removeItem(this.components, component);

        // clearBounds() so that it gets recalculated on the next call
        // to this.getBounds();
        this.clearBounds();
        return true;
    }

    /**
     * @function SuperMap.Geometry.Collection.prototype.getArea
     * @description è®¡ç®å ä½å¯¹è±¡çé¢ç§¯ãæ³¨æï¼è¿ä¸ªæ¹æ³å¨ {@link SuperMap.Geometry.Polygon} ç±»ä¸­éè¦éåã
     * @returns {number} å ä½å¾å½¢çé¢ç§¯ï¼æ¯å ä½å¯¹è±¡ä¸­ææç»æé¨åçé¢ç§¯ä¹åã
     */
    getArea() {
        var area = 0.0;
        for (var i = 0, len = this.components.length; i < len; i++) {
            area += this.components[i].getArea();
        }
        return area;
    }

    /**
     * @function SuperMap.Geometry.Collection.prototype.equals
     * @description å¤æ­ä¸¤ä¸ªå ä½å¾å½¢æ¯å¦ç¸ç­ãå¦æææç components å·æç¸åçåæ ï¼åè®¤ä¸ºæ¯ç¸ç­çã
     * @param {SuperMap.Geometry} geometry - éè¦å¤æ­çå ä½å¾å½¢ã
     * @returns {boolean} è¾å¥çå ä½å¾å½¢ä¸å½åå ä½å¾å½¢æ¯å¦ç¸ç­ã
     */
    equals(geometry) {
        var equivalent = true;
        if (!geometry || !geometry.CLASS_NAME ||
            (this.CLASS_NAME !== geometry.CLASS_NAME)) {
            equivalent = false;
        } else if (!(Util.isArray(geometry.components)) ||
            (geometry.components.length !== this.components.length)) {
            equivalent = false;
        } else {
            for (var i = 0, len = this.components.length; i < len; ++i) {
                if (!this.components[i].equals(geometry.components[i])) {
                    equivalent = false;
                    break;
                }
            }
        }
        return equivalent;
    }


    /**
     * @function SuperMap.Geometry.Collection.prototype.getVertices
     * @description è¿åå ä½å¯¹è±¡çææç»ç¹çåè¡¨ã
     * @param {boolean} [nodes] - å¯¹äºçº¿æ¥è¯´ï¼ä»ä»è¿åä½ä¸ºç«¯ç¹çé¡¶ç¹ï¼å¦æè®¾ä¸º falseï¼åè¿åéç«¯ç¹çé¡¶ç¹å¦ææ²¡æè®¾ç½®æ­¤åæ°ï¼åè¿åææé¡¶ç¹ã
     * @returns {Array} å ä½å¯¹è±¡çé¡¶ç¹åè¡¨ã
     */
    getVertices(nodes) {
        var vertices = [];
        for (var i = 0, len = this.components.length; i < len; ++i) {
            Array.prototype.push.apply(
                vertices, this.components[i].getVertices(nodes)
            );
        }
        return vertices;
    }

}

SuperMap.Geometry.Collection = Collection_Collection;
// CONCATENATED MODULE: ./src/common/commontypes/geometry/Point.js
/* CopyrightÂ© 2000 - 2019 SuperMap Software Co.Ltd. All rights reserved.
 * This program are made available under the terms of the Apache License, Version 2.0
 * which accompanies this distribution and is available at http://www.apache.org/licenses/LICENSE-2.0.html.*/





/**
 * @class SuperMap.Geometry.Point
 * @classdesc ç¹å ä½å¯¹è±¡ç±»ã
 * @category BaseTypes Geometry
 * @extends {SuperMap.Geometry}
 * @param {float} x - x åæ ã
 * @param {float} y - y åæ ã
 * @param {string} [type = 'Point'] - ç¨æ¥å­å¨ç¹çç±»åã
 * @param {float} [tag] - ç¨æ¥å­å¨é¢å¤çå±æ§ï¼æ¯å¦å·®å¼åæä¸­ç Z å¼ã
 * @example
 * var point = new SuperMap.Geometry.Point(-111.04, 45.68);
 */
class Point_Point extends Geometry_Geometry {


    constructor(x, y, type, tag) {
        super(x, y, type, tag);
        /**
         * @member {float} SuperMap.Geometry.Point.prototype.x
         * @description æ¨ªåæ ã
         */
        this.x = parseFloat(x);

        /**
         * @member {float} SuperMap.Geometry.Point.prototype.y
         * @description çºµåæ ã
         */
        this.y = parseFloat(y);

        /**
         * @member {string} SuperMap.Geometry.Point.prototype.tag
         * @description  ç¨æ¥å­å¨é¢å¤çå±æ§ï¼æ¯å¦å·®å¼åæä¸­ç Z å¼ã
         */
        this.tag = (tag || tag == 0) ? parseFloat(tag) : null;

        /**
         * @member {string} SuperMap.Geometry.Point.prototype.tag
         * @description  ç¨æ¥å­å¨ç¹çç±»å
         */
        this.type = type || "Point";
        this.CLASS_NAME = "SuperMap.Geometry.Point";
        this.geometryType = "Point";
    }

    /**
     * @function SuperMap.Geometry.Point.prototype.clone
     * @description åéç¹å¯¹è±¡ã
     * @returns {SuperMap.Geometry.Point} åéåçç¹å¯¹è±¡ã
     */
    clone(obj) {
        if (obj == null) {
            obj = new Point_Point(this.x, this.y);
        }

        // catch any randomly tagged-on properties
        Util.applyDefaults(obj, this);

        return obj;
    }

    /**
     * @function SuperMap.Geometry.Point.prototype.calculateBounds
     * @description è®¡ç®ç¹å¯¹è±¡çèå´ã
     */
    calculateBounds() {
        this.bounds = new Bounds_Bounds(this.x, this.y,
            this.x, this.y);
    }

    /**
     * @function SuperMap.Geometry.Point.prototype.equals
     * @description å¤æ­ä¸¤ä¸ªç¹å¯¹è±¡æ¯å¦ç¸ç­ãå¦æä¸¤ä¸ªç¹å¯¹è±¡å·æç¸åçåæ ï¼åè®¤ä¸ºæ¯ç¸ç­çã
     * @example
     * var point= new SuperMap.Geometry.Point(0,0);
     * var point1={x:0,y:0};
     * var result= point.equals(point1);
     * @param {SuperMap.Geometry.Point} geom - éè¦å¤æ­çç¹å¯¹è±¡ã
     * @returns {boolean} ä¸¤ä¸ªç¹å¯¹è±¡æ¯å¦ç¸ç­ï¼true ä¸ºç¸ç­ï¼false ä¸ºä¸ç­ï¼ã
     */
    equals(geom) {
        var equals = false;
        if (geom != null) {
            equals = ((this.x === geom.x && this.y === geom.y) ||
                (isNaN(this.x) && isNaN(this.y) && isNaN(geom.x) && isNaN(geom.y)));
        }
        return equals;
    }


    /**
     * @function SuperMap.Geometry.Point.prototype.move
     * @description æ²¿ç xãy è½´çæ­£æ¹åä¸æç§ç»å®çä½ç§»ç§»å¨ç¹å¯¹è±¡ï¼move ä¸ä»æ¹åäºå ä½å¯¹è±¡çä½ç½®å¹¶ä¸æ¸çäºè¾¹çç¼å­ã
     * @param {float} x - x è½´æ­£æ¹åä¸çåç§»éã
     * @param {float} y - y è½´æ­£æ¹åä¸åç§»éã
     */
    move(x, y) {
        this.x = this.x + x;
        this.y = this.y + y;
        this.clearBounds();
    }

    /**
     * @function SuperMap.Geometry.Point.prototype.toShortString
     * @returns {string} å­ç¬¦ä¸²ä»£è¡¨ç¹å¯¹è±¡ã(ex. <i>"5, 42"</i>)
     */
    toShortString() {
        return (this.x + ", " + this.y);
    }

    /**
     * @function SuperMap.Geometry.Point.prototype.destroy
     * @description éæ¾ç¹å¯¹è±¡çèµæºã
     */
    destroy() {
        this.x = null;
        this.y = null;
        this.tag = null;
        super.destroy();
    }

    /**
     * @function SuperMap.Geometry.Point.prototype.getVertices
     * @description è¿åç¹å¯¹è±¡çææé¡¶ç¹çåè¡¨ã
     * @param {boolean} [nodes] - å¯¹äºç¹å¯¹è±¡æ­¤åæ°ä¸èµ·ä½ç¨ï¼ç´æ¥è¿åç¹ã
     * @returns {Array} å ä½å¾å½¢çé¡¶ç¹åè¡¨ã
     */
    getVertices(nodes) { // eslint-disable-line no-unused-vars
        return [this];
    }


}

SuperMap.Geometry.Point = Point_Point;

// CONCATENATED MODULE: ./src/common/commontypes/geometry/MultiPoint.js
/* CopyrightÂ© 2000 - 2019 SuperMap Software Co.Ltd. All rights reserved.
 * This program are made available under the terms of the Apache License, Version 2.0
 * which accompanies this distribution and is available at http://www.apache.org/licenses/LICENSE-2.0.html.*/



/**
 * @class SuperMap.Geometry.MultiPoint
 * @classdesc å ä½å¯¹è±¡å¤ç¹ç±»ã
 * @category BaseTypes Geometry
 * @extends {SuperMap.Geometry.Collection}
 * @param {Array.<SuperMap.Geometry.Point>} components - ç¹å¯¹è±¡æ°ç»ã
 * @example
 * var point1 = new SuperMap.Geometry.Point(5,6);
 * var poine2 = new SuperMap.Geometry.Point(7,8);
 * var multiPoint = new SuperMap.Geometry.MultiPoint([point1,point2]);
 */
class MultiPoint_MultiPoint extends Collection_Collection {


    constructor(components) {
        super(components);
        /**
         * @member {Array.<string>} [SuperMap.Geometry.MultiPoint.prototype.componentTypes=["SuperMap.Geometry.Point"]]
         * @description components å­å¨ççå ä½å¯¹è±¡ææ¯æçå ä½ç±»åæ°ç»ã
         * @readonly
         */
        this.componentTypes = ["SuperMap.Geometry.Point"];
        this.CLASS_NAME = "SuperMap.Geometry.MultiPoint";
        this.geometryType = "MultiPoint";
    }

    /**
     * @function SuperMap.Geometry.MultiPoint.prototype.addPoint
     * @description æ·»å ç¹ï¼å°è£äº {@link SuperMap.Geometry.Collection|SuperMap.Geometry.Collection.addComponent} æ¹æ³ã
     * @param {SuperMap.Geometry.Point} point - æ·»å çç¹ã
     * @param {integer} [index] - ä¸æ ã
     */
    addPoint(point, index) {
        this.addComponent(point, index);
    }


    /**
     * @function SuperMap.Geometry.MultiPoint.prototype.removePoint
     * @description ç§»é¤ç¹ï¼å°è£äº {@link SuperMap.Geometry.Collection|SuperMap.Geometry.Collection.removeComponent} æ¹æ³ã
     * @param {SuperMap.Geometry.Point} point - ç§»é¤çç¹å¯¹è±¡ã
     */
    removePoint(point) {
        this.removeComponent(point);
    }


}

SuperMap.Geometry.MultiPoint = MultiPoint_MultiPoint;
// CONCATENATED MODULE: ./src/common/commontypes/geometry/Curve.js
/* CopyrightÂ© 2000 - 2019 SuperMap Software Co.Ltd. All rights reserved.
 * This program are made available under the terms of the Apache License, Version 2.0
 * which accompanies this distribution and is available at http://www.apache.org/licenses/LICENSE-2.0.html.*/



/**
 * @class SuperMap.Geometry.Curve
 * @classdesc å ä½å¯¹è±¡æ²çº¿ç±»ã
 * @category BaseTypes Geometry
 * @extends {SuperMap.Geometry.MultiPoint}
 * @param {Array.<SuperMap.Geometry.Point>} components - å ä½å¯¹è±¡æ°ç»ã
 * @example
 * var point1 = new SuperMap.Geometry.Point(10,20);
 * var point2 = new SuperMap.Geometry.Point(30,40);
 * var curve = new SuperMap.Geometry.Curve([point1,point2]);
 */
class Curve_Curve extends MultiPoint_MultiPoint {

    constructor(components) {
        super(components);
        /**
         * @member {Array.<string>} [SuperMap.Geometry.Curve.prototype.componentType=["SuperMap.Geometry.Point", "SuperMap.PointWithMeasure"]]
         * @description components å­å¨ççå ä½å¯¹è±¡ææ¯æçå ä½ç±»åæ°ç»ã
         * @readonly
         */
        this.componentTypes = ["SuperMap.Geometry.Point", "SuperMap.PointWithMeasure"];
        this.CLASS_NAME = "SuperMap.Geometry.Curve";
        this.geometryType = "Curve";
        
    }


}

SuperMap.Geometry.Curve = Curve_Curve;
// CONCATENATED MODULE: ./src/common/commontypes/geometry/LineString.js
/* CopyrightÂ© 2000 - 2019 SuperMap Software Co.Ltd. All rights reserved.
 * This program are made available under the terms of the Apache License, Version 2.0
 * which accompanies this distribution and is available at http://www.apache.org/licenses/LICENSE-2.0.html.*/




/**
 * @class SuperMap.Geometry.LineString
 * @classdesc å ä½å¯¹è±¡çº¿ä¸²ç±»ã
 * @category BaseTypes Geometry
 * @param {Array.<SuperMap.Geometry.Point>} points - ç¨æ¥çæçº¿ä¸²çç¹æ°ç»ã
 * @extends {SuperMap.Geometry.Curve}
 * @example
 * var points = [new SuperMap.Geometry.Point(4933.319287022352, -3337.3849141502124),
 *     new SuperMap.Geometry.Point(4960.9674060199022, -3349.3316322355736),
 *     new SuperMap.Geometry.Point(5006.0235999418364, -3358.8890067038628),
 *     new SuperMap.Geometry.Point(5075.3145648369318, -3378.0037556404409),
 *     new SuperMap.Geometry.Point(5305.19551436013, -3376.9669111768926)],
 * var roadLine = new SuperMap.Geometry.LineString(points)ï¼
 */
class LineString_LineString extends Curve_Curve {

    constructor(points) {
        super(points);
        this.CLASS_NAME = "SuperMap.Geometry.LineString";
        this.geometryType = "LineString";
    }

    /**
     * @function SuperMap.Geometry.LineString.prototype.removeComponent
     * @description åªæå¨çº¿ä¸²ä¸æä¸ä¸ªææ´å¤çç¹çæ¶åï¼æä¼åè®¸ç§»é¤ç¹ï¼å¦åç»æå°ä¼æ¯åä¸çç¹ï¼ã
     * @param {SuperMap.Geometry.Point} point - å°è¢«å é¤çç¹ã
     * @returns {boolean} å é¤çç¹ã
     */
    removeComponent(point) { // eslint-disable-line no-unused-vars
        var removed = this.components && (this.components.length > 2);
        if (removed) {
            super.removeComponent.apply(this, arguments);
        }
        return removed;
    }

    /**
     * @function SuperMap.Geometry.LineString.prototype.getSortedSegments
     * @returns {Array} An array of segment objects.  Segment objects have properties
     *     x1, y1, x2, and y2.  The start point is represented by x1 and y1.
     *     The end point is represented by x2 and y2.  Start and end are
     *     ordered so that x1 < x2.
     */
    getSortedSegments() {
        var numSeg = this.components.length - 1;
        var segments = new Array(numSeg), point1, point2;
        for (var i = 0; i < numSeg; ++i) {
            point1 = this.components[i];
            point2 = this.components[i + 1];
            if (point1.x < point2.x) {
                segments[i] = {
                    x1: point1.x,
                    y1: point1.y,
                    x2: point2.x,
                    y2: point2.y
                };
            } else {
                segments[i] = {
                    x1: point2.x,
                    y1: point2.y,
                    x2: point1.x,
                    y2: point1.y
                };
            }
        }

        // more efficient to define this somewhere static
        function byX1(seg1, seg2) {
            return seg1.x1 - seg2.x1;
        }

        return segments.sort(byX1);
    }

    /**
     * @function SuperMap.Geometry.LineString.prototype.getVertices
     * @description è¿åå ä½å¾å½¢çææé¡¶ç¹çåè¡¨ã
     * @param {boolean} [nodes] - å¯¹äºçº¿æ¥è¯´ï¼ä»ä»è¿åä½ä¸ºç«¯ç¹çé¡¶ç¹ï¼å¦æè®¾ä¸º falseï¼åè¿åéç«¯ç¹çé¡¶ç¹ãå¦ææ²¡æè®¾ç½®æ­¤åæ°ï¼åè¿åææé¡¶ç¹ã
     * @returns {Array} å ä½å¾å½¢çé¡¶ç¹åè¡¨ã
     */
    getVertices(nodes) {
        var vertices;
        if (nodes === true) {
            vertices = [
                this.components[0],
                this.components[this.components.length - 1]
            ];
        } else if (nodes === false) {
            vertices = this.components.slice(1, this.components.length - 1);
        } else {
            vertices = this.components.slice();
        }
        return vertices;
    }

    /**
     * @function SuperMap.Geometry.LineString.calculateCircle
     * @description ä¸ç¹ç»åå¼§ã
     * @param {Array.<SuperMap.Geometry.Point>} points - ä¼ å¥çå¾è®¡ç®çåå§ç¹ä¸²ã
     * @returns {Array.<SuperMap.Geometry.Point>} è®¡ç®åºç¸åºçåå¼§æ§å¶ç¹ã
     * @example
     * var points = [];
     * points.push(new SuperMap.Geometry.Point(-50,30));
     * points.push(new SuperMap.Geometry.Point(-30,50));
     * points.push(new SuperMap.Geometry.Point(2,60));
     * var circle = SuperMap.Geometry.LineString.calculateCircle(points);
     */
    static calculateCircle(points) {
        if (points.length < 3) {
            return points
        }
        var centerPoint = {},
            p1 = points[0],
            p2 = points[1],
            p3 = points[2];
        var R = 0,
            dStep = 0,
            direc = true,
            dRotation = 0,
            dRotationBegin = 0,
            dRotationAngle = 0,
            nSegmentCount = 72,
            circlePoints = [];

        var KTan13 = (p3.y - p1.y) / (p3.x - p1.x);
        var B13 = p3.y - KTan13 * p3.x;
        if ((((p3.x != p1.x) && (p3.y != p1.y)) && (p2.y == KTan13 * p2.x + B13)) ||
            ((p3.x == p1.x) && (p2.x == p1.x)) || ((p3.y == p1.y) && (p2.y == p1.y)) ||
            ((p3.x == p1.x) && (p3.y == p1.y)) || ((p3.x == p2.x) && (p3.y == p2.y)) || ((p1.x == p2.x) && (p1.y == p2.y))) {
            circlePoints.push(p1);
            circlePoints.push(p2);
            circlePoints.push(p3);
        } else {
            var D = ((p2.x * p2.x + p2.y * p2.y) - (p1.x * p1.x + p1.y * p1.y)) * (2 * (p3.y - p1.y)) - ((p3.x * p3.x + p3.y * p3.y) -
                (p1.x * p1.x + p1.y * p1.y)) * (2 * (p2.y - p1.y));
            var E = (2 * (p2.x - p1.x)) * ((p3.x * p3.x + p3.y * p3.y) - (p1.x * p1.x + p1.y * p1.y)) -
                (2 * (p3.x - p1.x)) * ((p2.x * p2.x + p2.y * p2.y) - (p1.x * p1.x + p1.y * p1.y));
            var F = 4 * ((p2.x - p1.x) * (p3.y - p1.y) - (p3.x - p1.x) * (p2.y - p1.y));
            centerPoint.x = D / F;
            centerPoint.y = E / F;
            R = Math.sqrt((p1.x - centerPoint.x) * (p1.x - centerPoint.x) + (p1.y - centerPoint.y) * (p1.y - centerPoint.y));

            var dis = (p1.x - p3.x) * (p1.x - p3.x) + (p1.y - p3.y) * (p1.y - p3.y);
            var cons = (2 * R * R - dis) / (2 * R * R);
            cons = cons >= 1 ? 1 : cons;
            cons = cons <= -1 ? -1 : cons;
            dRotationAngle = Math.acos(cons) * 180 / Math.PI;

            if (p3.x == p1.x) {
                dRotationAngle = ((centerPoint.x > p1.x && p2.x > p1.x) || (centerPoint.x < p1.x && p2.x < p1.x)) ? (360 - dRotationAngle) : dRotationAngle;
            } else {
                dRotationAngle = ((centerPoint.y > (KTan13 * centerPoint.x + B13) && p2.y > (KTan13 * p2.x + B13)) ||
                    (centerPoint.y < (KTan13 * centerPoint.x + B13) && p2.y < (KTan13 * p2.x + B13))) ? (360 - dRotationAngle) : dRotationAngle;
            }
            dStep = dRotationAngle / 72;

            if (p3.y != p1.y) {
                if (p3.x == p1.x) {
                    if (p3.y > p1.y) {
                        if (p2.x < p1.x) {
                            direc = false;
                        }
                    } else {
                        if (p2.x > p1.x) {
                            direc = false;
                        }
                    }
                } else if (p3.x < p1.x) {
                    if (p2.y < KTan13 * p2.x + B13) {
                        direc = false;
                    }
                } else {
                    if (p2.y > KTan13 * p2.x + B13) {
                        direc = false;
                    }
                }
            } else {
                if (p3.x > p1.x) {
                    if (p2.y > p1.y) {
                        direc = false;
                    }
                } else {
                    if (p2.y < p1.y) {
                        direc = false;
                    }
                }
            }

            var K10 = (p1.y - centerPoint.y) / (p1.x - centerPoint.x);
            var atan10 = K10 >= 0 ? Math.atan(K10) * 180 / Math.PI : Math.abs(Math.atan(K10) * 180 / Math.PI) + 90;

            var CY = Math.abs(centerPoint.y);
            if ((p1.y == CY) && (CY == p3.y)) {
                if (p1.x < p3.x) {
                    atan10 = atan10 + 180;
                }
            }

            var newPY = p1.y - centerPoint.y;
            circlePoints.push(p1);
            for (var i = 1; i < nSegmentCount; i++) {
                dRotation = dStep * i;
                dRotationBegin = atan10;

                if (direc) {
                    if (newPY >= 0) {
                        if (K10 >= 0) {
                            dRotationBegin = dRotationBegin + dRotation;
                        } else {
                            dRotationBegin = (180 - (dRotationBegin - 90)) + dRotation;
                        }
                    } else {
                        if (K10 > 0) {
                            dRotationBegin = (dRotationBegin - 180) + dRotation;
                        } else {
                            dRotationBegin = (90 - dRotationBegin) + dRotation;
                        }
                    }
                } else {
                    if (newPY >= 0) {
                        if (K10 >= 0) {
                            dRotationBegin = dRotationBegin - dRotation;
                        } else {
                            dRotationBegin = (180 - (dRotationBegin - 90)) - dRotation;
                        }
                    } else {
                        if (K10 >= 0) {
                            dRotationBegin = (dRotationBegin - 180) - dRotation;
                        } else {
                            dRotationBegin = (90 - dRotationBegin) - dRotation;
                        }
                    }
                }

                dRotationBegin = dRotationBegin * Math.PI / 180;
                var x = centerPoint.x + R * Math.cos(dRotationBegin);
                var y = centerPoint.y + R * Math.sin(dRotationBegin);
                circlePoints.push(new Point_Point(x, y));
            }
            circlePoints.push(p3);
        }
        return circlePoints;
    }

    /**
     * @function SuperMap.Geometry.LineString.createLineEPS
     * @description æ ¹æ®ç¹çç±»åç»åºä¸åç±»åçæ²çº¿ã
     * ç¹çç±»åæä¸ç§ï¼LTypeArcï¼LTypeCurveï¼NONEã
     * @param {Array.<SuperMap.Geometry.Point>} points - ä¼ å¥çå¾è®¡ç®çåå§ç¹ä¸²ã
     * @returns {Array.<SuperMap.Geometry.Point>} è®¡ç®åºç¸åºç lineEPS æ§å¶ç¹ã
     * @example
     * var points = [];
     * points.push(new SuperMap.Geometry.Point(-50,30));
     * points.push(new SuperMap.Geometry.Point(-30,50,"LTypeArc"));
     * points.push(new SuperMap.Geometry.Point(2,60));
     * points.push(new SuperMap.Geometry.Point(8,20));
     * var lineEPS = SuperMap.Geometry.LineString.createLineEPS(points);
     */
    static createLineEPS(points) {
        var list = [],
            len = points.length;
        if (len < 2) {
            return points;
        }
        for (var i = 0; i < len;) {
            var type = points[i].type;
            if (type == 'LTypeArc') {
                var listObj = LineString_LineString.createLineArc(list, i, len, points);
                list = listObj[0];
                i = listObj[1];
            } else {
                list.push(points[i]);
                i++;
            }
        }
        return list;
    }

    static createLineArc(list, i, len, points) {
        if (i == 0) {
            let bezierPtsObj = LineString_LineString.addPointEPS(points, i, len, 'LTypeArc');
            Array.prototype.push.apply(list, bezierPtsObj[0]);
            i = bezierPtsObj[1] + 1;
        } else if (i == len - 1) {
            var bezierP = [points[i - 1], points[i]],
                bezierPts = LineString_LineString.calculateCircle(bezierP);
            Array.prototype.push.apply(list, bezierPts);
            i++;
        } else {
            let bezierPtsObj = LineString_LineString.addPointEPS(points, i, len, 'LTypeArc');
            list.pop();
            Array.prototype.push.apply(list, bezierPtsObj[0]);
            i = bezierPtsObj[1] + 1;
        }
        return [list, i];
    }

    static addPointEPS(points, i, len, type) {
        var bezierP = [], j = i + 1;
        if (i == 0) {
            Array.prototype.push.apply(bezierP, [points[i], points[i + 1]]);
        } else if (i == len - 1) {
            Array.prototype.push.apply(bezierP, [points[i - 1], points[i]]);
        } else {
            Array.prototype.push.apply(bezierP, [points[i - 1], points[i], points[i + 1]]);
        }
        var bezierPts;
        if (type == 'LTypeCurve') {
            bezierPts = LineString_LineString.calculatePointsFBZN(bezierP);
        } else if (type == 'LTypeArc') {
            bezierPts = LineString_LineString.calculateCircle(bezierP);
        }
        return [bezierPts, j];
    }
}

SuperMap.Geometry.LineString = LineString_LineString;

 
// CONCATENATED MODULE: ./src/common/commontypes/geometry/MultiLineString.js
/* CopyrightÂ© 2000 - 2019 SuperMap Software Co.Ltd. All rights reserved.
 * This program are made available under the terms of the Apache License, Version 2.0
 * which accompanies this distribution and is available at http://www.apache.org/licenses/LICENSE-2.0.html.*/





/**
 * @class SuperMap.Geometry.MultiLineString
 * @classdesc å ä½å¯¹è±¡å¤çº¿ç±»ã
 * @category BaseTypes Geometry
 * @extends {SuperMap.Geometry.Collection}
 * @param {Array.<SuperMap.Geometry.LineString>} components - LineString æ°ç»ã
 * @example
 * var multi = new SuperMap.Geometry.MultiLineString([
 *      new SuperMap.Geometry.LineString([
 *          new SuperMap.Geometry.Point(1, 0),
 *          new SuperMap.Geometry.Point(0, 1)
 *      ])
 *  ]);
 */
class MultiLineString_MultiLineString extends Collection_Collection {


    constructor(components) {
        super(components);
        /**
         * @member {Array.<string>} [SuperMap.Geometry.MultiLineString.prototype.componentTypes=["SuperMap.Geometry.LineString"]]
         * @description components å­å¨ççå ä½å¯¹è±¡ææ¯æçå ä½ç±»åæ°ç»ã
         * @readonly
         */
        this.componentTypes = ["SuperMap.Geometry.LineString"];
        this.CLASS_NAME = "SuperMap.Geometry.MultiLineString";
        this.geometryType = "MultiLineString";
    }


}

SuperMap.Geometry.MultiLineString = MultiLineString_MultiLineString;
// CONCATENATED MODULE: ./src/common/commontypes/geometry/LinearRing.js
/* CopyrightÂ© 2000 - 2019 SuperMap Software Co.Ltd. All rights reserved.
 * This program are made available under the terms of the Apache License, Version 2.0
 * which accompanies this distribution and is available at http://www.apache.org/licenses/LICENSE-2.0.html.*/



/**
 * @class  SuperMap.Geometry.LinearRing
 * @classdesc å ä½å¯¹è±¡çº¿ç¯ç±»ï¼æ¯ä¸ä¸ªç¹æ®çå°é­ççº¿ä¸²ï¼å¨æ¯æ¬¡ addPoint/removePoint ä¹åä¼éè¿æ·»å ä¸ä¸ªç¹ï¼æ­¤ç¹æ¯å¤å¶çç¬¬ä¸ä¸ªç¹å¾å°çï¼
 * ä½ä¸ºæåçä¸ä¸ªç¹æ¥èªå¨å³é­çº¿ç¯ã
 * @category BaseTypes Geometry
 * @extends {SuperMap.Geometry.LineString}
 * @param {Array.<SuperMap.Geometry.Point>} points - ç»æçº¿æ§ç¯çç¹ã
 * @example
 * var points = [new SuperMap.Geometry.Point(4933.319287022352, -3337.3849141502124),
 *      new SuperMap.Geometry.Point(4960.9674060199022, -3349.3316322355736),
 *      new SuperMap.Geometry.Point(5006.0235999418364, -3358.8890067038628),
 *      new SuperMap.Geometry.Point(5075.3145648369318, -3378.0037556404409),
 *      new SuperMap.Geometry.Point(5305.19551436013, -3376.9669111768926)],
 * var linearRing = new SuperMap.Geometry.LinearRing(points);
 */
class LinearRing_LinearRing extends LineString_LineString {


    constructor(points) {
        super(points);
        /**
         * @member {Array.<string>} [SuperMap.Geometry.LinearRing.prototype.componentTypes=["SuperMap.Geometry.Point"]]
         * @description components å­å¨ççå ä½å¯¹è±¡ææ¯æçå ä½ç±»åæ°ç»,ä¸ºç©ºè¡¨ç¤ºç±»åä¸åéå¶ã
         * @readonly
         */
        this.componentTypes = ["SuperMap.Geometry.Point"];
        this.CLASS_NAME = "SuperMap.Geometry.LinearRing";
        this.geometryType = "LinearRing";
    }

    /**
     * @function SuperMap.Geometry.LinearRing.prototype.addComponent
     * @description æ·»å ä¸ä¸ªç¹å°å ä½å¾å½¢æ°ç»ä¸­ï¼å¦æè¿ä¸ªç¹å°è¦è¢«æ·»å å°ç»ä»¶æ°ç»çæ«ç«¯ï¼å¹¶ä¸ä¸æ°ç»ä¸­å·²ç»å­å¨çæåä¸ä¸ªç¹ç¸åï¼
     * éå¤çç¹æ¯ä¸è½è¢«æ·»å çãè¿å°å½±åæªå³é­ç¯çå³é­ã
     * è¿ä¸ªæ¹æ³å¯ä»¥éè¿å°éç©ºç´¢å¼ï¼ç»ä»¶æ°ç»çä¸æ ï¼ä½ä¸ºç¬¬äºä¸ªåæ°éåã
     * @param {SuperMap.Geometry.Point} point - ç¹å¯¹è±¡ã
     * @param {integer} [index] - æå¥ç»ä»¶æ°ç»çä¸æ ã
     * @returns {boolean} ç¹å¯¹è±¡æ¯å¦æ·»å æåã
     */
    addComponent(point, index) {
        var added = false;

        //remove last point
        var lastPoint = this.components.pop();

        // given an index, add the point
        // without an index only add non-duplicate points
        if (index != null || !point.equals(lastPoint)) {
            added = super.addComponent.apply(this, arguments);
        }

        //append copy of first point
        var firstPoint = this.components[0];
        super.addComponent.apply(this, [firstPoint]);

        return added;
    }

    /**
     * @function SuperMap.Geometry.LinearRing.prototype.removeComponent
     * @description ä»å ä½ç»ä»¶ä¸­å é¤ä¸ä¸ªç¹ã
     * @param {SuperMap.Geometry.Point} point - ç¹å¯¹è±¡ã
     * @returns {boolean} ç¹å¯¹è±¡æ¯å¦å é¤ã
     */
    removeComponent(point) { // eslint-disable-line no-unused-vars
        var removed = this.components && (this.components.length > 3);
        if (removed) {
            //remove last point
            this.components.pop();

            //remove our point
            super.removeComponent.apply(this, arguments);
            //append copy of first point
            var firstPoint = this.components[0];
            super.addComponent.apply(this, [firstPoint]);
        }
        return removed;
    }

    /**
     * @function SuperMap.Geometry.LinearRing.prototype.getArea
     * @description è·å¾å½åå ä½å¯¹è±¡åºåå¤§å°ï¼å¦ææ¯æ²¿é¡ºæ¶éæ¹åçç¯åæ¯æ­£å¼ï¼å¦åä¸ºè´å¼ã
     * @returns {float} ç¯çé¢ç§¯ã
     */
    getArea() {
        var area = 0.0;
        if (this.components && (this.components.length > 2)) {
            var sum = 0.0;
            for (var i = 0, len = this.components.length; i < len - 1; i++) {
                var b = this.components[i];
                var c = this.components[i + 1];
                sum += (b.x + c.x) * (c.y - b.y);
            }
            area = -sum / 2.0;
        }
        return area;
    }

    /**
     * @function SuperMap.Geometry.LinearRing.prototype.getVertices
     * @description è¿åå ä½å¾å½¢çææç¹çåè¡¨ã
     * @param {boolean} [nodes] - å¯¹äºçº¿æ¥è¯´ï¼ä»ä»è¿åä½ä¸ºç«¯ç¹çé¡¶ç¹ï¼å¦æè®¾ä¸º false ï¼åè¿åéç«¯ç¹çé¡¶ç¹ï¼å¦ææ²¡æè®¾ç½®æ­¤åæ°ï¼åè¿åææé¡¶ç¹ã
     * @returns {Array} å ä½å¯¹è±¡ææç¹çåè¡¨ã
     */
    getVertices(nodes) {
        return (nodes === true) ? [] : this.components.slice(0, this.components.length - 1);
    }


}

SuperMap.Geometry.LinearRing = LinearRing_LinearRing;
// CONCATENATED MODULE: ./src/common/commontypes/geometry/Polygon.js
/* CopyrightÂ© 2000 - 2019 SuperMap Software Co.Ltd. All rights reserved.
 * This program are made available under the terms of the Apache License, Version 2.0
 * which accompanies this distribution and is available at http://www.apache.org/licenses/LICENSE-2.0.html.*/






/**
 * @class SuperMap.Geometry.Polygon
 * @classdesc  å¤è¾¹å½¢å ä½å¯¹è±¡ç±»ã
 * @category BaseTypes Geometry
 * @extends {SuperMap.Geometry.Collection}
 * @param {Array.<SuperMap.Geometry.LinearRing>} components - ç¨æ¥çæå¤è¾¹å½¢ççº¿ç¯æ°ç»ã
 * @example
 * var points =[new SuperMap.Geometry.Point(0,4010338),
 *      new SuperMap.Geometry.Point(1063524,4010338),
 *      new SuperMap.Geometry.Point(1063524,3150322),
 *      new SuperMap.Geometry.Point(0,3150322)
 *  ],
 *  var linearRings = new SuperMap.Geometry.LinearRing(points),
 *  var  region = new SuperMap.Geometry.Polygon([linearRings]);
 */
class Polygon_Polygon extends Collection_Collection {


    constructor(components) {
        super(components);
        /**
         * @member {Array.<string>} [SuperMap.Geometry.Polygon.prototype.componentTypes=["SuperMap.Geometry.LinearRing"]]
         * @description components å­å¨ççå ä½å¯¹è±¡ææ¯æçå ä½ç±»åæ°ç»ã
         * @readonly
         */
        this.componentTypes = ["SuperMap.Geometry.LinearRing"];
        this.CLASS_NAME = "SuperMap.Geometry.Polygon";
        this.geometryType = "Polygon";
    }

    /**
     * @function SuperMap.Geometry.Polygon.prototype.getArea
     * @description è·å¾åºåé¢ç§¯ï¼ä»åºåçå¤é¨å£å¾åå»è®¡æ­¤åºååé¨å£å¾ç®æå¾çé¢ç§¯ã
     * @returns {float} å ä½å¯¹è±¡çé¢ç§¯ã
     */
    getArea() {
        var area = 0.0;
        if (this.components && (this.components.length > 0)) {
            area += Math.abs(this.components[0].getArea());
            for (var i = 1, len = this.components.length; i < len; i++) {
                area -= Math.abs(this.components[i].getArea());
            }
        }
        return area;
    }


}

SuperMap.Geometry.Polygon = Polygon_Polygon;
// CONCATENATED MODULE: ./src/common/commontypes/geometry/MultiPolygon.js
/* CopyrightÂ© 2000 - 2019 SuperMap Software Co.Ltd. All rights reserved.
 * This program are made available under the terms of the Apache License, Version 2.0
 * which accompanies this distribution and is available at http://www.apache.org/licenses/LICENSE-2.0.html.*/



/**
 * @class SuperMap.Geometry.MultiPolygon
 * @classdesc å ä½å¯¹è±¡å¤å¤è¾¹å½¢ç±»ã
 * @category BaseTypes Geometry
 * @extends {SuperMap.Geometry.Collection}
 * @param  {Array.<SuperMap.Geometry.Polygon>} components - å½¢æ MultiPolygon çå¤è¾¹å½¢æ°ç»ã
 * @example
 * var points1 = [new SuperMap.Geometry.Point(10,10),new SuperMap.Geometry.Point(0,0)];
 * var points2 = [new SuperMap.Geometry.Point(10,10),new SuperMap.Geometry.Point(0,0),new SuperMap.Geometry.Point(3,3),new SuperMap.Geometry.Point(10,10)];
 *
 * var linearRing1 = new SuperMap.Geometry.LinearRing(points1);
 * var linearRing2 = new SuperMap.Geometry.LinearRing(points2);
 *
 * var polygon1 = new SuperMap.Geometry.Polygon([linearRing1]);
 * var polygon2 = new SuperMap.Geometry.Polygon([linearRing2]);
 *
 * var multiPolygon1 = new SuperMap.Geometry.MultiPolygon([polygon1,polygon2]);
 */
class MultiPolygon_MultiPolygon extends Collection_Collection {


    constructor(components) {
        super(components);
        /**
         * @member {Array.<string>} [SuperMap.Geometry.MultiPolygon.prototype.componentTypes=["SuperMap.Geometry.Polygon"]]
         * @description components å­å¨ççå ä½å¯¹è±¡ææ¯æçå ä½ç±»åæ°ç»ã
         * @readonly
         */
        this.componentTypes = ["SuperMap.Geometry.Polygon"];
        this.CLASS_NAME = "SuperMap.Geometry.MultiPolygon";
        this.geometryType = "MultiPolygon";
    }


}

SuperMap.Geometry.MultiPolygon = MultiPolygon_MultiPolygon;
// CONCATENATED MODULE: ./src/common/iServer/ServerColor.js
/* CopyrightÂ© 2000 - 2019 SuperMap Software Co.Ltd. All rights reserved.
 * This program are made available under the terms of the Apache License, Version 2.0
 * which accompanies this distribution and is available at http://www.apache.org/licenses/LICENSE-2.0.html.*/


/**
 * @class SuperMap.ServerColor
 * @category iServer Map Theme
 * @classdesc é¢è²ç±»ãè¯¥ç±»ä½¿ç¨ä¸åè²ï¼ RGB ï¼æ¥è¡¨è¾¾é¢è²ã
 * @param {Object} options - åæ°ã
 * @param {number} [options.red=255] - è·åæè®¾ç½®çº¢è²å¼ã
 * @param {number} [options.green=0] - è·åæè®¾ç½®ç»¿è²å¼ã
 * @param {number} [options.blue=0] - è·åæè®¾ç½®èè²å¼ã
 */
class ServerColor {

    constructor(red, green, blue) {

        /**
         * @member {number} [SuperMap.ServerColor.prototype.red=255]
         * @description è·åæè®¾ç½®çº¢è²å¼ã
         */
        this.red = (!red && red != 0)?255:red;

        /**
         * @member {number} [SuperMap.ServerColor.prototype.green=0]
         * @description è·åæè®¾ç½®ç»¿è²å¼ã
         */
        this.green = green||0;

        /**
         * @member {number} [SuperMap.ServerColor.prototype.blue=0]
         * @description è·åæè®¾ç½®èè²å¼ã
         */
        this.blue = blue||0;

        this.CLASS_NAME = "SuperMap.ServerColor";
    }

    /**
     * @function SuperMap.ServerColor.prototype.destroy
     * @description éæ¾èµæºï¼å°å¼ç¨èµæºçå±æ§ç½®ç©ºã
     */
    destroy() {
        var me = this;
        me.red = null;
        me.green = null;
        me.blue = null;
    }


    /**
     * @function SuperMap.ServerColor.formJson
     * @description å° JSON å¯¹è±¡è½¬åä¸º ServerColor å¯¹è±¡ã
     * @param {Object} jsonObject - è¦è½¬æ¢ç JSON å¯¹è±¡ã
     * @returns {SuperMap.ServerColor} è½¬ååç ServerColor å¯¹è±¡ã
     */
    static fromJson(jsonObject) {
        if (!jsonObject) {
            return;
        }
        var color = new ServerColor();
        var red = 255;
        if (jsonObject.red !== null) {
            red = Number(jsonObject.red);
        }
        color.red = red;

        var green = 0;
        if (jsonObject.green !== null) {
            green = Number(jsonObject.green);
        }
        color.green = green;

        var blue = 0;
        if (jsonObject.blue !== null) {
            blue = Number(jsonObject.blue);
        }
        color.blue = blue;
        return color;
    }

}

SuperMap.ServerColor = ServerColor;


// CONCATENATED MODULE: ./src/common/iServer/ServerStyle.js
/* CopyrightÂ© 2000 - 2019 SuperMap Software Co.Ltd. All rights reserved.
 * This program are made available under the terms of the Apache License, Version 2.0
 * which accompanies this distribution and is available at http://www.apache.org/licenses/LICENSE-2.0.html.*/




/**
 * @class SuperMap.ServerStyle
 * @category  iServer Map Theme
 * @classdesc æå¡ç«¯ç¢éè¦ç´ é£æ ¼ç±»ã
 * @description è¯¥ç±»ç¨äºå®ä¹ç¹ç¶ç¬¦å·ãçº¿ç¶ç¬¦å·ãå¡«åç¬¦å·é£æ ¼åå¶ç¸å³å±æ§ã
 * @param {Object} options - åæ°ã
 * @param {SuperMap.FillGradientMode} options.fillGradientMode - æ¸åå¡«åé£æ ¼çæ¸åç±»åã
 * @param {SuperMap.ServerColor} [options.fillBackColor=[255,255,255]] - å¡«åèæ¯é¢è²ã
 * @param {boolean} [options.fillBackOpaque=false] - èæ¯æ¯å¦ä¸éæã
 * @param {SuperMap.ServerColor} [options.fillForeColor=[255,0,0]] - å¡«åé¢è²ã
 * @param {number} [options.fillGradientAngle=0] - æ¸åå¡«åçæè½¬è§åº¦ã
 * @param {number} [options.fillGradientOffsetRatioX=0] - æ¸åå¡«åä¸­å¿ç¹ç¸å¯¹äºå¡«ååºåèå´ä¸­å¿ç¹çæ°´å¹³åç§»ç¾åæ¯ã
 * @param {number} [options.fillGradientOffsetRatioY=0] - å¡«åä¸­å¿ç¹ç¸å¯¹äºå¡«ååºåèå´ä¸­å¿ç¹çåç´åç§»ç¾åæ¯ã
 * @param {number} [options.fillOpaqueRate=100] - å¡«åä¸éæåº¦ã
 * @param {number} [options.fillSymbolID=0] - å¡«åç¬¦å·çç¼ç ã
 * @param {SuperMap.ServerColor} [options.lineColor] - ç¢éè¦ç´ çè¾¹çº¿é¢è²ãé»è®¤ lineColor = new ServerColor(0, 0, 0)ã
 * @param {number} [options.lineSymbolID=0] - çº¿ç¶ç¬¦å·çç¼ç ã
 * @param {number} [options.lineWidth=1] - è¾¹çº¿çå®½åº¦ã
 * @param {number} [options.markerAngle=0] - ç¹ç¶ç¬¦å·çæè½¬è§åº¦ã
 * @param {number} [options.markerSize=1] - ç¹ç¶ç¬¦å·çå¤§å°ã
 * @param {number} [options.markerSymbolID=-1] - ç¹ç¶ç¬¦å·çç¼ç ã
 */
class ServerStyle_ServerStyle {

    constructor(options) {
        /**
         * @member {SuperMap.ServerColor} SuperMap.ServerStyle.prototype.fillBackColor
         * @description å¡«åèæ¯é¢è²ãå½å¡«åæ¨¡å¼ä¸ºæ¸åå¡«åæ¶ï¼è¯¥é¢è²ä¸ºå¡«åç»æ­¢è²ã
         */
        this.fillBackColor = new ServerColor(255, 255, 255);

        /**
         * @member {boolean} [SuperMap.ServerStyle.prototype.fillBackOpaque=false]
         * @description èæ¯æ¯å¦ä¸éæãfalse è¡¨ç¤ºéæã
         */
        this.fillBackOpaque = false;

        /**
         * @member {SuperMap.ServerColor} SuperMap.ServerStyle.prototype.fillForeColor
         * @description å¡«åé¢è²ãå½å¡«åæ¨¡å¼ä¸ºæ¸åå¡«åæ¶ï¼è¯¥é¢è²ä¸ºå¡«åèµ·å§é¢è²ã
         */
        this.fillForeColor = new ServerColor(255, 0, 0);

        /**
         * @member {SuperMap.FillGradientMode} SuperMap.ServerStyle.prototype.fillGradientMode
         * @description æ¸åå¡«åé£æ ¼çæ¸åç±»åã
         */
        this.fillGradientMode = null;

        /**
         * @member {number} SuperMap.ServerStyle.prototype.fillGradientAngle -
         * @description æ¸åå¡«åçæè½¬è§åº¦ãåä½ä¸ºåº¦ï¼ç²¾ç¡®å° 0.1 åº¦ï¼éæ¶éæ¹åä¸ºæ­£æ¹åã
         */
        this.fillGradientAngle = 0;

        /**
         * @member {number} SuperMap.ServerStyle.prototype.fillGradientOffsetRatioX
         * @description æ¸åå¡«åä¸­å¿ç¹ç¸å¯¹äºå¡«ååºåèå´ä¸­å¿ç¹çæ°´å¹³åç§»ç¾åæ¯ãå®ä»¬çå³ç³»å¦ä¸ï¼è®¾å¡«ååºåèå´ä¸­å¿ç¹çåæ ä¸ºï¼x0, y0ï¼ï¼
         *              å¡«åä¸­å¿ç¹çåæ ä¸ºï¼x, yï¼ï¼å¡«ååºåèå´çå®½åº¦ä¸º aï¼æ°´å¹³åç§»ç¾åæ¯ä¸º dxï¼å x=x0 + a*dx/100ã
         */
        this.fillGradientOffsetRatioX = 0;

        /**
         * @member {number} SuperMap.ServerStyle.prototype.fillGradientOffsetRatioY
         * @description å¡«åä¸­å¿ç¹ç¸å¯¹äºå¡«ååºåèå´ä¸­å¿ç¹çåç´åç§»ç¾åæ¯ãå®ä»¬çå³ç³»å¦ä¸ï¼<br>
         *              è®¾å¡«ååºåèå´ä¸­å¿ç¹çåæ ä¸ºï¼x0, y0ï¼ï¼å¡«åä¸­å¿ç¹çåæ ä¸ºï¼x, yï¼ï¼å¡«ååºåèå´çé«åº¦ä¸º bï¼åç´åç§»ç¾åæ¯ä¸º dyï¼å y=y0 + b*dx/100ã
         */
        this.fillGradientOffsetRatioY = 0;

        /**
         * @member {number} [SuperMap.ServerStyle.prototype.fillOpaqueRate=100]
         * @description å¡«åä¸éæåº¦ãåæ³å¼ä¸º 0 - 100 çæ°å¼ãå¶ä¸­ä¸º 0 è¡¨ç¤ºå®å¨éæï¼
         *              100 è¡¨ç¤ºå®å¨ä¸éæãèµå¼å°äº 0 æ¶æç§ 0 å¤çï¼å¤§äº 100 æ¶æç§ 100 å¤çã
         */
        this.fillOpaqueRate = 100;

        /**
         * @member {number} SuperMap.ServerStyle.prototype.fillSymbolID
         * @description å¡«åç¬¦å·çç¼ç ãæ­¤ç¼ç ç¨äºå¯ä¸æ è¯åæ®éå¡«åé£æ ¼çå¡«åç¬¦å·ã
         *              å³äºå¡«åç¬¦å·çæ ·å¼ä¸å¯¹åºç ID å·è¯·å¨ SuperMap æ¡é¢è½¯ä»¶ä¸­æ¥æ¾ã
         */
        this.fillSymbolID = 0;

        /**
         * @member {SuperMap.ServerColor} SuperMap.ServerStyle.prototype.lineColor
         * @description ç¢éè¦ç´ çè¾¹çº¿é¢è²ãå¦æç­çº§ç¬¦å·æ¯ç¹ç¬¦å·ï¼ç¹ç¬¦å·çé¢è²ç± lineColor æ§å¶ã
         */
        this.lineColor = new ServerColor(0, 0, 0);

        /**
         * @member {number} [SuperMap.ServerStyle.prototype.lineSymbolID=0]
         * @description çº¿ç¶ç¬¦å·çç¼ç ãæ­¤ç¼ç ç¨äºå¯ä¸æ è¯åæ®éå¡«åé£æ ¼çå¡«åç¬¦å·ã
         *              å³äºçº¿ç¶ç¬¦å·çæ ·å¼ä¸å¯¹åºç ID å·è¯·å¨ SuperMap æ¡é¢è½¯ä»¶ä¸­æ¥æ¾ã
         */
        this.lineSymbolID = 0;

        /**
         * @member {number} [SuperMap.ServerStyle.prototype.lineWidth=1.0]
         * @description è¾¹çº¿çå®½åº¦ãåä½ä¸ºæ¯«ç±³ï¼ç²¾åº¦å° 0.1ã
         */
        this.lineWidth = 1;

        /**
         * @member {number} [SuperMap.ServerStyle.prototype.markerAngle=0]
         * @description ç¹ç¶ç¬¦å·çæè½¬è§åº¦ãä»¥åº¦ä¸ºåä½ï¼ç²¾ç¡®å° 0.1 åº¦ï¼éæ¶éæ¹åä¸ºæ­£æ¹åã
         */
        this.markerAngle = 0;

        /**
         * @member {number} [SuperMap.ServerStyle.prototype.markerSize=1.0]
         * @description ç¹ç¶ç¬¦å·çå¤§å°ãåä½ä¸ºæ¯«ç±³ï¼ç²¾åº¦ä¸º 0.1ãå½è¯¥å±æ§è®¾ç½®ä¸º0æ¶ï¼éç¨ç¬¦å·é»è®¤å¤§å° 1.0 æ¾ç¤ºã
         *              å½è¯¥å±æ§è®¾ç½®ä¸ºéæ³å¼æ¶ï¼äº¤ç±æå¡å¨é»è®¤å¤çã
         */
        this.markerSize = 1;

        /**
         * @member {number} [SuperMap.ServerStyle.prototype.markerSymbolID=-1]
         * @description ç¹ç¶ç¬¦å·çç¼ç ãæ­¤ç¼ç ç¨äºå¯ä¸æ è¯åç¹ç¶ç¬¦å·ã
         *              å³äºçº¿ç¶ç¬¦å·çæ ·å¼ä¸å¯¹åºç ID å·è¯·å¨ SuperMap æ¡é¢è½¯ä»¶ä¸­æ¥æ¾ã
         */
        this.markerSymbolID = -1;
        if (options) {
            Util.extend(this, options);
        }

        this.CLASS_NAME = "SuperMap.ServerStyle";
    }

    /**
     * @function SuperMap.ServerStyle.prototype.destroy
     * @description éæ¾èµæºï¼å°å¼ç¨èµæºçå±æ§ç½®ç©ºã
     */
    destroy() {
        var me = this;
        if (me.fillBackColor) {
            me.fillBackColor.destroy();
            me.fillBackColor = null;
        }
        me.fillBackOpaque = null;

        if (me.fillForeColor) {
            me.fillForeColor.destroy();
            me.fillForeColor = null;
        }
        me.fillGradientMode = null;
        me.fillGradientAngle = null;
        me.fillGradientOffsetRatioX = null;
        me.fillGradientOffsetRatioY = null;
        me.fillOpaqueRate = null;
        me.fillSymbolID = null;
        if (me.lineColor) {
            me.lineColor.destroy();
            me.lineColor = null;
        }
        me.lineSymbolID = null;
        me.lineWidth = null;
        me.markerAngle = null;
        me.markerSize = null;
        me.markerSymbolID = null;
    }

    /**
     * @function SuperMap.ServerStyle.prototype.toServerJSONObject
     * @description è½¬æ¢æå¯¹åºç JSON æ ¼å¼å¯¹è±¡ã
     * @returns {Object} å¯¹åºç JSON æ ¼å¼å¯¹è±¡.
     */
    toServerJSONObject() {
        var styleObj = {};
        styleObj = Util.copyAttributes(styleObj, this);
        //ææ¶åå¿½ç¥serverColorå¾Jsonçè½¬æ¢
        return styleObj;
    }

    /**
     * @function SuperMap.ServerStyle.fromJson
     * @description å°JSONå¯¹è±¡è½¬æ¢ä¸º SuperMap.ServerStyle å¯¹è±¡ã
     * @param jsonObject - {Object} è¦è½¬æ¢ç JSON å¯¹è±¡ã
     * @returns {SuperMap.ServerStyle} è½¬ååç SuperMap.ServerStyle å¯¹è±¡ã
     */
    static fromJson(jsonObject) {
        if (!jsonObject) {
            return;
        }
        return new ServerStyle_ServerStyle({
            fillBackColor: ServerColor.fromJson(jsonObject.fillBackColor),
            fillBackOpaque: jsonObject.fillBackOpaque,
            fillForeColor: ServerColor.fromJson(jsonObject.fillForeColor),
            fillGradientMode: jsonObject.fillGradientMode,
            fillGradientAngle: jsonObject.fillGradientAngle,
            fillGradientOffsetRatioX: jsonObject.fillGradientOffsetRatioX,
            fillGradientOffsetRatioY: jsonObject.fillGradientOffsetRatioY,
            fillOpaqueRate: jsonObject.fillOpaqueRate,
            fillSymbolID: jsonObject.fillSymbolID,
            lineColor: ServerColor.fromJson(jsonObject.lineColor),
            lineSymbolID: jsonObject.lineSymbolID,
            lineWidth: jsonObject.lineWidth,
            markerAngle: jsonObject.markerAngle,
            markerSize: jsonObject.markerSize,
            markerSymbolID: jsonObject.markerSymbolID
        });
    }

}


SuperMap.ServerStyle = ServerStyle_ServerStyle;

// CONCATENATED MODULE: ./src/common/iServer/PointWithMeasure.js
/* CopyrightÂ© 2000 - 2019 SuperMap Software Co.Ltd. All rights reserved.
 * This program are made available under the terms of the Apache License, Version 2.0
 * which accompanies this distribution and is available at http://www.apache.org/licenses/LICENSE-2.0.html.*/




/**
 * @class SuperMap.PointWithMeasure
 * @category  iServer SpatialAnalyst
 * @classdesc è·¯ç±ç¹ç±»ãè·¯ç±ç¹æ¯æå·æçº¿æ§åº¦éå¼ (Measure) çäºç»´å°çåæ ç¹ã
 * @param {Object} options - åæ°ã
 * @param {number} options.measure - åº¦éå¼ï¼å³è·¯ç±å¯¹è±¡å±æ§å¼ Mã
 * @param {number} options.x - è·åå½åç¹å¯¹è±¡å¨å°çåæ ç³»ä¸ç X åæ å¼ã
 * @param {number} options.y - è·åå½åç¹å¯¹è±¡å¨å°çåæ ç³»ä¸ç Y åæ å¼ã
 * @extends {SuperMap.Geometry.Point}
 */
class PointWithMeasure_PointWithMeasure extends Point_Point {

    constructor(options) {
        super(options);

        /**
         * @member {number} SuperMap.PointWithMeasure.prototype.measure
         * @description åº¦éå¼ï¼å³è·¯ç±å¯¹è±¡å±æ§å¼ Mã
         */
        this.measure = null;

        if (options) {
            Util.extend(this, options);
        }

        this.CLASS_NAME = "SuperMap.PointWithMeasure";
    }

    /**
     * @function SuperMap.PointWithMeasure.prototype.equals
     * @description å¤æ­ä¸¤ä¸ªè·¯ç±ç¹å¯¹è±¡æ¯å¦ç¸ç­ãå¦æä¸¤ä¸ªè·¯ç±ç¹å¯¹è±¡å·æç¸åçåæ ä»¥ååº¦éå¼ï¼åè®¤ä¸ºæ¯ç¸ç­çã
     * @param {SuperMap.PointWithMeasure} geom - éè¦å¤æ­çè·¯ç±ç¹å¯¹è±¡ã
     * @returns {boolean} ä¸¤ä¸ªè·¯ç±ç¹å¯¹è±¡æ¯å¦ç¸ç­ï¼true ä¸ºç¸ç­ï¼false ä¸ºä¸ç­ï¼ã
     */
    equals(geom) {
        var equals = false;
        if (geom != null) {
            var isValueEquals = this.x === geom.x && this.y === geom.y && this.measure === geom.measure;
            var isNaNValue = isNaN(this.x) && isNaN(this.y) && isNaN(this.measure);
            var isNaNGeometry = isNaN(geom.x) && isNaN(geom.y) && isNaN(geom.measure);
            equals = ( isValueEquals || ( isNaNValue && isNaNGeometry ));
        }
        return equals;
    }


    /**
     * @function SuperMap.PointWithMeasure.prototype.toJson
     * @description è½¬æ¢ä¸º JSON å¯¹è±¡ã
     * */
     toJson() {
        var result = "{";
        if (this.measure != null && this.measure != undefined) {
            result += "\"measure\":" + this.measure + ",";
        }
        result += "\"x\":" + this.x + ",";
        result += "\"y\":" + this.y;
        result += "}";
        return result;
    }


     /**
     * @function SuperMap.PointWithMeasure.prototype.destroy
     * @description éæ¾èµæºï¼å°å¼ç¨èµæºçå±æ§ç½®ç©ºã
     */
    destroy() {
        var me = this;
        me.measure = null;
        me.x = null;
        me.y = null;
    }

    /**
     * @function SuperMap.PointWithMeasure.fromJson
     * @description å° JSON å¯¹è±¡è½¬æ¢ä¸º{@link SuperMap.PointWithMeasure} å¯¹è±¡ã
     * @param {Object} jsonObject - JSON å¯¹è±¡è¡¨ç¤ºçè·¯ç±ç¹ã
     * @returns {SuperMap.PointWithMeasure} è½¬ååç PointWithMeasure å¯¹è±¡ã
     */
    static fromJson(jsonObject) {
        if (!jsonObject) {
            return;
        }
        return new PointWithMeasure_PointWithMeasure({
            x: jsonObject.x,
            y: jsonObject.y,
            measure: jsonObject.measure
        });
    }

}

SuperMap.PointWithMeasure = PointWithMeasure_PointWithMeasure;

// CONCATENATED MODULE: ./src/common/iServer/Route.js
/* CopyrightÂ© 2000 - 2019 SuperMap Software Co.Ltd. All rights reserved.
 * This program are made available under the terms of the Apache License, Version 2.0
 * which accompanies this distribution and is available at http://www.apache.org/licenses/LICENSE-2.0.html.*/







/**
 * @class SuperMap.Route
 * @category  iServer SpatialAnalyst
 * @classdesc è·¯ç±å¯¹è±¡ç±»ãè·¯ç±å¯¹è±¡ä¸ºä¸ç³»åæåºçå¸¦æå±æ§å¼ M ç xï¼y åæ å¯¹ï¼å¶ä¸­ M å¼ä¸ºè¯¥ç»ç¹çè·ç¦»å±æ§ï¼å°å·²ç¥ç¹çè·ç¦»ï¼ã
 * @param {Array.<SuperMap.Geometry>} points - å½¢æè·¯ç±å¯¹è±¡ççº¿æ°ç»ã
 * @param {Object} options - åæ°ã
 * @param {number} options.id - è·¯ç±å¯¹è±¡å¨æ°æ®åºä¸­ç idã
 * @param {number} options.length - è·¯ç±å¯¹è±¡çé¿åº¦ãåä½ä¸æ°æ®éçåä½ç¸åã
 * @param {number} [options.maxM] - æå¤§çº¿æ§åº¦éå¼ï¼å³ææç»ç¹å°èµ·å§ç¹çéç®è·ç¦»ä¸­æå¤§å¼ã
 * @param {number} [options.minM] - æå°çº¿æ§åº¦éå¼ï¼å³ææç»ç¹å°èµ·å§ç¹çéç®è·ç¦»ä¸­æå°å¼ã
 * @param {string} [options.type] - æ°æ®ç±»åï¼å¦ï¼"LINEM"ã
 * @extends {SuperMap.Geometry.Collection}
 */
class Route_Route extends Collection_Collection {

    constructor(points, options) {
        super(points, options);

        /**
         * @member {number} SuperMap.Route.prototype.id
         * @description è·¯ç±å¯¹è±¡å¨æ°æ®åºä¸­ç IDã
         */
        this.id = null;

        /**
         * @member {number} SuperMap.Route.prototype.center
         * @description è·¯ç±å¯¹è±¡çä¸­å¿ç¹ã
         */
        this.center = null;

        /**
         * @member {string} SuperMap.Route.prototype.style
         * @description è·¯ç±å¯¹è±¡çæ ·å¼ã
         */
        this.style = null;

        /**
         * @member {number} SuperMap.Route.prototype.length
         * @description è·¯ç±å¯¹è±¡çé¿åº¦ãåä½ä¸æ°æ®éçåä½ç¸åã
         */
        this.length = null;

        /**
         *  @member {number} SuperMap.Route.prototype.maxM
         *  @description æå¤§çº¿æ§åº¦éå¼ï¼å³ææç»ç¹å°èµ·å§ç¹çéç®è·ç¦»ä¸­æå¤§å¼ã
         */
        this.maxM = null;

        /**
         * @member {number} SuperMap.Route.prototype.minM
         * @description æå°çº¿æ§åº¦éå¼ï¼å³ææç»ç¹å°èµ·å§ç¹çéç®è·ç¦»ä¸­æå°å¼ã
         */
        this.minM = null;

        /**
         * @member {Array.<number>} SuperMap.Route.prototype.parts
         * @description æå¡ç«¯å ä½å¯¹è±¡ä¸­åä¸ªå­å¯¹è±¡æåå«çèç¹ä¸ªæ°ã
         */
        this.parts = null;

        /**
         * @member {Array.<Object>} SuperMap.Route.prototype.points
         * @description è·¯ç±å¯¹è±¡çææè·¯ç±ç¹ã
         * @example
         * (start code)
         * [
         *  {
         *      "measure": 0,
         *      "y": -4377.027184298267,
         *      "x": 4020.0045221720466
         *  },
         *  {
         *      "measure": 37.33288381391519,
         *      "y": -4381.569363260499,
         *      "x": 4057.0600591960642
         *  }
         * ]
         * (end)
         */
        this.points = null;

        /**
         * @member {string} SuperMap.Route.prototype.type
         * @description æå¡ç«¯å ä½å¯¹è±¡ç±»åã
         */
        this.type = null;

        /**
         * @member {Array.<string>} [SuperMap.Route.prototype.componentTypes=SuperMap.Geometry.LineString]
         * @description components å­å¨ççå ä½å¯¹è±¡ææ¯æçå ä½ç±»åæ°ç»ã
         */
        this.componentTypes = ["SuperMap.Geometry.LinearRing", "SuperMap.Geometry.LineString"];

        if (options) {
            Util.extend(this, options);
        }

        this.CLASS_NAME = "SuperMap.Route";
        this.geometryType = "LINEM";
    }

    /**
     *
     * @function SuperMap.Route.prototype.toJson
     * @description è½¬æ¢ä¸º JSON å¯¹è±¡ã
     * @returns {Object} JSON å¯¹è±¡ã
     */
    toJson() {
        var result = "{";
        if (this.id != null && this.id != undefined) {
            result += "\"id\":" + this.id + ",";
        }
        if (this.center != null && this.center != undefined) {
            result += "\"center\":" + this.center + ",";
        }
        if (this.style != null && this.style != undefined) {
            result += "\"style\":" + this.style + ",";
        }
        if (this.length != null && this.length != undefined) {
            result += "\"length\":" + this.length + ",";
        }
        if (this.maxM != null && this.maxM != undefined) {
            result += "\"maxM\":" + this.maxM + ",";
        }
        if (this.minM != null && this.minM != undefined) {
            result += "\"minM\":" + this.minM + ",";
        }
        if (this.type != null && this.type != undefined) {
            result += "\"type\":\"" + this.type + "\",";
        }
        if (this.parts != null && this.parts != undefined) {
            result += "\"parts\":[" + this.parts[0];

            for (var i = 1; i < this.parts.length; i++) {
                result += "," + this.parts[i];
            }
            result += "],";
        }
        if (this.components != null && this.components.length > 0) {
            result += "\"points\":[";
            for (var j = 0, len = this.components.length; j < len; j++) {
                for (var k = 0, len2 = this.components[j].components.length; k < len2; k++) {
                    result += this.components[j].components[k].toJson() + ",";
                }
            }
            result = result.replace(/,$/g, '');
            result += "]";
        }
        result = result.replace(/,$/g, '');
        result += "}";
        return result;
    }


    /**
     * @function SuperMap.Route.prototype.destroy
     * @override
     */
    destroy() {
        var me = this;
        me.id = null;
        me.center = null;
        me.style = null;
        me.length = null;
        me.maxM = null;
        me.minM = null;
        me.type = null;
        me.parts = null;
        me.components.length = 0;
        me.components = null;
        me.componentTypes = null;
    }


    /**
     * @function SuperMap.Route.fromJson
     * @description å° JSON å¯¹è±¡è½¬æ¢ä¸º SuperMap.Route å¯¹è±¡ã
     * @param {Object} [jsonObject] - JSON å¯¹è±¡è¡¨ç¤ºçè·¯ç±å¯¹è±¡ã
     * @returns {SuperMap.Route} è½¬ååç Route å¯¹è±¡ã
     */
    static fromJson(jsonObject) {
        if (!jsonObject) {
            return;
        }

        var geoParts = jsonObject.parts || [],
            geoPoints = jsonObject.points || [],
            len = geoParts.length,
            lineList = [];
        if (len > 0) {
            for (var i = 0, pointIndex = 0, pointList = []; i < len; i++) {
                for (var j = 0; j < geoParts[i]; j++) {
                    pointList.push(PointWithMeasure_PointWithMeasure.fromJson(geoPoints[pointIndex + j]));
                }
                pointIndex += geoParts[i];
                //å¤æ­çº¿æ¯å¦é­åï¼å¦æé­åï¼åè¿åLinearRingï¼å¦åè¿åLineString
                if (pointList[0].equals(pointList[geoParts[i] - 1])) {
                    lineList.push(new LinearRing_LinearRing(pointList));
                } else {
                    lineList.push(new LineString_LineString(pointList));
                }
                pointList = [];
            }

        } else {
            return null;
        }

        return new Route_Route(lineList, {
            id: jsonObject.id,
            center: jsonObject.center,
            style: jsonObject.style,
            length: jsonObject.length,
            maxM: jsonObject.maxM,
            minM: jsonObject.minM,
            type: jsonObject.type,
            parts: jsonObject.parts
        });
    }

}

SuperMap.Route = Route_Route;
// CONCATENATED MODULE: ./src/common/iServer/ServerGeometry.js
/* CopyrightÂ© 2000 - 2019 SuperMap Software Co.Ltd. All rights reserved.
 * This program are made available under the terms of the Apache License, Version 2.0
 * which accompanies this distribution and is available at http://www.apache.org/licenses/LICENSE-2.0.html.*/













/**
 * @class SuperMap.ServerGeometry
 * @category  iServer  
 * @classdesc æå¡ç«¯å ä½å¯¹è±¡ç±»ãè¯¥ç±»æè¿°å ä½å¯¹è±¡ï¼ç¢éï¼çç¹å¾æ°æ®ï¼åæ ç¹å¯¹ãå ä½å¯¹è±¡çç±»åç­ï¼ãåºäºæå¡ç«¯çç©ºé´åæãç©ºé´å³ç³»è¿ç®ãæ¥è¯¢ç­ GIS æå¡åè½ä½¿ç¨æå¡ç«¯å ä½å¯¹è±¡ã
 * @param {Object} options - åæ°ã
 * @param {string} options.id - æå¡ç«¯å ä½å¯¹è±¡å¯ä¸æ è¯ç¬¦ã
 * @param {Array.<number>} options.parts - æå¡ç«¯å ä½å¯¹è±¡ä¸­åä¸ªå­å¯¹è±¡æåå«çèç¹ä¸ªæ°ã
 * @param {Array.<SuperMap.Geometry.Point>} options.points - ç»æå ä½å¯¹è±¡çèç¹çåæ å¯¹æ°ç»ã
 * @param {SuperMap.GeometryType} options.type - å ä½å¯¹è±¡çç±»åã
 * @param {SuperMap.ServerStyle} [options.style] - æå¡ç«¯å ä½å¯¹è±¡çé£æ ¼ã
 */
class ServerGeometry_ServerGeometry {

    constructor(options) {

        /**
         * @member {string} SuperMap.ServerGeometry.prototype.id
         * @description æå¡ç«¯å ä½å¯¹è±¡å¯ä¸æ è¯ç¬¦ã
         */
        this.id = 0;
        
        /**
         * @member {SuperMap.ServerStyle} [SuperMap.ServerGeometry.prototype.style]
         * @description æå¡ç«¯å ä½å¯¹è±¡çé£æ ¼ï¼ServerStyleï¼ã
         */
        this.style = null;

        /**
         * @member {Array.<number>} SuperMap.ServerGeometry.prototype.parts
         * @description æå¡ç«¯å ä½å¯¹è±¡ä¸­åä¸ªå­å¯¹è±¡æåå«çèç¹ä¸ªæ°ã<br>
         * 1.å ä½å¯¹è±¡ä»ç»æä¸å¯ä»¥åä¸ºç®åå ä½å¯¹è±¡åå¤æå ä½å¯¹è±¡ã
         * ç®åå ä½å¯¹è±¡ä¸å¤æå ä½å¯¹è±¡çåºå«ï¼ç®åçå ä½å¯¹è±¡ä¸è¬ä¸ºåä¸å¯¹è±¡ï¼
         * èå¤æçå ä½å¯¹è±¡ç±å¤ä¸ªç®åå¯¹è±¡ç»ææç»è¿ä¸å®çç©ºé´è¿ç®ä¹åäº§çï¼
         * å¦ï¼ç©å½¢ä¸ºç®åçåºåå¯¹è±¡ï¼èä¸­ç©ºçç©å½¢ä¸ºå¤æçåºåå¯¹è±¡ã<br>
         * 2.éå¸¸æåµï¼ä¸ä¸ªç®åå ä½å¯¹è±¡çå­å¯¹è±¡å°±æ¯å®æ¬èº«ï¼
         * å æ­¤å¯¹äºç®åå¯¹è±¡æ¥è¯´çè¯¥å­æ®µä¸ºé¿åº¦ä¸º1çæ´åæ°ç»ï¼
         * è¯¥å­æ®µçå¼å°±æ¯è¿ä¸ªç®åå¯¹è±¡èç¹çä¸ªæ°ã
         * å¦æä¸ä¸ªå ä½å¯¹è±¡æ¯ç±å ä¸ªç®åå¯¹è±¡ç»åèæçï¼
         * ä¾å¦ï¼ä¸ä¸ªå²ç¶å ä½å¯¹è±¡ç± 3 ä¸ªç®åçå¤è¾¹å½¢ç»æèæï¼
         * é£ä¹è¿ä¸ªå²ç¶çå ä½å¯¹è±¡ç Parts å­æ®µå¼å°±æ¯ä¸ä¸ªé¿åº¦ä¸º 3 çæ´åæ°ç»ï¼
         * æ°ç»ä¸­æ¯ä¸ªæåçå¼åå«ä»£è¡¨è¿ä¸ä¸ªå¤è¾¹å½¢æåå«çèç¹ä¸ªæ°ã
         */
        this.parts = null;

        /**
         * @member {Array.<SuperMap.Geometry.Point>} SuperMap.ServerGeometry.prototype.points
         * @description ç»æå ä½å¯¹è±¡çèç¹çåæ å¯¹æ°ç»ã<br>
         * 1.ææå ä½å¯¹è±¡ï¼ç¹ãçº¿ãé¢ï¼é½æ¯ç±ä¸äºç®åçç¹åæ ç»æçï¼
         * è¯¥å­æ®µå­æ¾äºç»æå ä½å¯¹è±¡çç¹åæ çæ°ç»ã
         * å¯¹äºç®åçé¢å¯¹è±¡ï¼ä»çèµ·ç¹åç»ç¹çåæ ç¹ç¸åã<br>
         * 2.å¯¹äºå¤æçå ä½å¯¹è±¡ï¼æ ¹æ® Parts å±æ§æ¥ç¡®å®æ¯ä¸ä¸ªç»æå¤æå ä½å¯¹è±¡çç®åå¯¹è±¡æå¯¹åºçèç¹çä¸ªæ°ï¼
         * ä»èç¡®å® Points å­æ®µä¸­åæ å¯¹çåéå½å±é®é¢ã
         */
        this.points = null;

        /**
         * @member {SuperMap.GeometryType} SuperMap.ServerGeometry.prototype.type
         * @description å ä½å¯¹è±¡çç±»åï¼GeometryTypeï¼ã
         */
        this.type = null;

        /**
         * @member {Object} SuperMap.ServerGeometry.prototype.prjCoordSys
         * @description æå½±åæ åæ°ï¼ç°ä»å¨ç¼å²åºåæä¸­ææã
         */
        this.prjCoordSys = null;
        if (options) {
            Util.extend(this, options);
        }

        this.CLASS_NAME = "SuperMap.ServerGeometry";
    }

    /**
     * @function SuperMap.ServerGeometry.prototype.destroy
     * @description éæ¾èµæºï¼å°å¼ç¨èµæºçå±æ§ç½®ç©ºã
     */
    destroy() {
        var me = this;
        me.id = null;
        me.style = null;
        me.parts = null;
        me.partTopo = null;
        me.points = null;
        me.type = null;
        me.prjCoordSys = null;
    }

    /**
     * @function SuperMap.ServerGeometry.prototype.toGeometry
     * @description å°æå¡ç«¯å ä½å¯¹è±¡ ServerGeometry è½¬æ¢ä¸ºå®¢æ·ç«¯å ä½å¯¹è±¡ Geometryã
     * @returns {SuperMap.Geometry} è½¬æ¢åçå®¢æ·ç«¯å ä½å¯¹è±¡ã
     */
    toGeometry() {
        var me = this,
            geoType = me.type;
        switch (geoType.toUpperCase()) {
            case GeometryType.POINT:
                return me.toGeoPoint();
            case GeometryType.LINE:
                return me.toGeoLine();
            case GeometryType.LINEM:
                return me.toGeoLinem();
            case GeometryType.REGION:
                return me.toGeoRegion();
            case GeometryType.POINTEPS:
                return me.toGeoPoint();
            case GeometryType.LINEEPS:
                return me.toGeoLineEPS();
            case GeometryType.REGIONEPS:
                return me.toGeoRegionEPS();
        }
    }

    /**
     * @function SuperMap.ServerGeometry.prototype.toGeoPoint
     * @description å°æå¡ç«¯çç¹å ä½å¯¹è±¡è½¬æ¢ä¸ºå®¢æ·ç«¯å ä½å¯¹è±¡ãåæ¬ PointãMultiPointã
     * @returns {SuperMap.Geometry} è½¬æ¢åçå®¢æ·ç«¯å ä½å¯¹è±¡ã
     */
    toGeoPoint() {
        var me = this,
            geoParts = me.parts || [],
            geoPoints = me.points || [],
            len = geoParts.length;
        if (len > 0) {
            if (len === 1) {
                return new Point_Point(geoPoints[0].x, geoPoints[0].y);
            } else {
                var pointList = [];
                for (let i = 0; i < len; i++) {
                    pointList.push(new Point_Point(geoPoints[i].x, geoPoints[i].y));
                }
                return new MultiPoint_MultiPoint(pointList);
            }
        } else {
            return null;
        }
    }

    /**
     * @function SuperMap.ServerGeometry.prototype.toGeoLine
     * @description å°æå¡ç«¯ççº¿å ä½å¯¹è±¡è½¬æ¢ä¸ºå®¢æ·ç«¯å ä½å¯¹è±¡ãåæ¬ LinearRingãLineStringãMultiLineStringã
     * @returns {SuperMap.Geometry} è½¬æ¢åçå®¢æ·ç«¯å ä½å¯¹è±¡ã
     */
    toGeoLine() {
        var me = this,
            geoParts = me.parts || [],
            geoPoints = me.points || [],
            len = geoParts.length;
        if (len > 0) {
            if (len === 1) {
                let pointList = [];
                for (let i = 0; i < geoParts[0]; i++) {
                    pointList.push(new Point_Point(geoPoints[i].x, geoPoints[i].y));
                }
                //å¤æ­çº¿æ¯å¦é­åï¼å¦æé­åï¼åè¿åLinearRingï¼å¦åè¿åLineString
                if (pointList[0].equals(pointList[geoParts[0] - 1])) {
                    return new LinearRing_LinearRing(pointList);
                } else {
                    return new LineString_LineString(pointList);
                }
            } else {
                let lineList = [];
                for (let i = 0; i < len; i++) {
                    let pointList = [];
                    for (let j = 0; j < geoParts[i]; j++) {
                        pointList.push(new Point_Point(geoPoints[j].x, geoPoints[j].y));
                    }
                    lineList.push(new LineString_LineString(pointList));
                    geoPoints.splice(0, geoParts[i]);
                }
                return new MultiLineString_MultiLineString(lineList);
            }
        } else {
            return null;
        }
    }

    /**
     * @function SuperMap.ServerGeometry.prototype.toGeoLineEPS
     * @description å°æå¡ç«¯ççº¿å ä½å¯¹è±¡è½¬æ¢ä¸ºå®¢æ·ç«¯å ä½å¯¹è±¡ãåæ¬ LinearRingãLineStringãMultiLineStringã
     * @returns {SuperMap.Geometry} è½¬æ¢åçå®¢æ·ç«¯å ä½å¯¹è±¡ã
     */
    toGeoLineEPS() {
        var me = this,
            geoParts = me.parts || [],
            geoPoints = me.points || [],
            i,
            j,
            pointList,
            lineList,
            lineEPS,
            len = geoParts.length;
        if (len > 0) {
            if (len === 1) {
                for (i = 0, pointList = []; i < geoParts[0]; i++) {
                    pointList.push(new Point_Point(geoPoints[i].x, geoPoints[i].y, geoPoints[i].type));
                }
                //å¤æ­çº¿æ¯å¦é­åï¼å¦æé­åï¼åè¿åLinearRingï¼å¦åè¿åLineString
                if (pointList[0].equals(pointList[geoParts[0] - 1])) {
                    lineEPS = LineString_LineString.createLineEPS(pointList);
                    return new LinearRing_LinearRing(lineEPS);
                } else {
                    lineEPS = LineString_LineString.createLineEPS(pointList);
                    return new LineString_LineString(lineEPS);
                }
            } else {
                for (i = 0, lineList = []; i < len; i++) {
                    for (j = 0, pointList = []; j < geoParts[i]; j++) {
                        pointList.push(new Point_Point(geoPoints[j].x, geoPoints[j].y));
                    }
                    lineEPS = LineString_LineString.createLineEPS(pointList);
                    lineList.push(new LineString_LineString(lineEPS));
                    geoPoints.splice(0, geoParts[i]);
                }
                return new MultiLineString_MultiLineString(lineList);
            }
        } else {
            return null;
        }
    }

    /**
     * @function SuperMap.ServerGeometry.prototype.toGeoLine
     * @description å°æå¡ç«¯çè·¯ç±çº¿å ä½å¯¹è±¡è½¬æ¢ä¸ºå®¢æ·ç«¯å ä½å¯¹è±¡ãåæ¬ LinearRingãLineStringãMultiLineStringã
     * @returns {SuperMap.Geometry} è½¬æ¢åçå®¢æ·ç«¯å ä½å¯¹è±¡ã
     */
    toGeoLinem() {
        var me = this;
        return Route_Route.fromJson(me);
    }

    /**
     * @function SuperMap.ServerGeometry.prototype.toGeoRegion
     * @description å°æå¡ç«¯çé¢å ä½å¯¹è±¡è½¬æ¢ä¸ºå®¢æ·ç«¯å ä½å¯¹è±¡ãç±»åä¸º Polygonã
     * @returns {SuperMap.Geometry} è½¬æ¢åçå®¢æ·ç«¯å ä½å¯¹è±¡ã
     */
    toGeoRegion() {
        var me = this,
            geoParts = me.parts || [],
            geoTopo = me.partTopo || [],
            geoPoints = me.points || [],
            len = geoParts.length;
        if (len <= 0) {
            return null;
        }
        var polygonArray = [];
        var pointList = [];
        if (len == 1) {
            for (let i = 0; i < geoPoints.length; i++) {
                pointList.push(
                    new Point_Point(geoPoints[i].x, geoPoints[i].y))
            }
            polygonArray.push(
                new Polygon_Polygon(
                    [new LinearRing_LinearRing(pointList)]
                )
            );
            return new MultiPolygon_MultiPolygon(polygonArray);
        }
        //å¤çå¤æé¢
        var CCWArray = [];
        var areaArray = [];
        var polygonArrayTemp = [];
        var polygonBounds = [];
        //polyonå²æ´æ è¯æ°ç»ï¼åå§é½æ¯å²ã
        var CCWIdent = [];
        for (let i = 0, pointIndex = 0; i < len; i++) {
            for (let j = 0; j < geoParts[i]; j++) {
                pointList.push(
                    new Point_Point(geoPoints[pointIndex + j].x, geoPoints[pointIndex + j].y)
                );
            }
            pointIndex += geoParts[i];
            var polygon = new Polygon_Polygon(
                [new LinearRing_LinearRing(pointList)]
            );
            pointList = [];
            polygonArrayTemp.push(polygon);
            if (geoTopo.length === 0){
                polygonBounds.push(polygon.getBounds());
            }
            CCWIdent.push(1);
            areaArray.push(polygon.getArea());
        }
        //æ ¹æ®é¢ç§¯æåº
        ServerGeometry_ServerGeometry.bubbleSort(areaArray, polygonArrayTemp, geoTopo, polygonBounds);
        //iServer 9Dæ°å¢å­æ®µ
        if (geoTopo.length === 0) {
            //å²æ´åºå±å¤æ­ååï¼å°ææçå­å¯¹è±¡æç§é¢ç§¯æåºï¼é¢ç§¯æå¤§çç´æ¥å¤å®ä¸ºå²ï¼1ï¼ï¼ä»é¢ç§¯æ¬¡å¤§çå¼å§å¤çï¼
            // å¦æåç°è¯¥å¯¹è±¡å¨æä¸ªé¢ç§¯å¤§äºå®çå¯¹è±¡ä¹ä¸­ï¼å³è¢«åå«ï¼ï¼åæ ¹æ®åå«å®çå¯¹è±¡çæ è¯ï¼1 or -1ï¼ï¼æå®å¶æ è¯ï¼-1 or 1ï¼ï¼
            // ä¾æ¬¡å¤çå®ææå¯¹è±¡ï¼å°±å¾å°äºä¸ä¸ªæ è¯æ°ç»ï¼1è¡¨ç¤ºå²ï¼-1è¡¨ç¤ºæ´
            //ç®æ polygonç´¢å¼åè¡¨ -1æ ç¤ºæ²¡æè¢«ä»»ä½polygonåå«ï¼
            var targetArray = [];
            for (let i = 1; i < polygonArrayTemp.length; i++) {
                for (let j = i - 1; j >= 0; j--) {
                    targetArray[i] = -1;
                    if (polygonBounds[j].containsBounds(polygonBounds[i])) {
                        CCWIdent[i] = CCWIdent[j] * -1;
                        if (CCWIdent[i] < 0) {
                            targetArray[i] = j;
                        }
                        break;
                    }
                }
            }
            for (let i = 0; i < polygonArrayTemp.length; i++) {
                if (CCWIdent[i] > 0) {
                    polygonArray.push(polygonArrayTemp[i]);
                } else {
                    polygonArray[targetArray[i]].components = polygonArray[targetArray[i]].components.concat(polygonArrayTemp[i].components);
                    //å ä½
                    polygonArray.push('');
                }
            }
        } else {
            //æ ¹æ®é¢ç§¯æåº
            //ServerGeometry.bubbleSort(areaArray, polygonArrayTemp,geoTopo);
            polygonArray = new Array();
            for (let i = 0; i < polygonArrayTemp.length; i++) {
                if (geoTopo[i] && geoTopo[i] == -1) {
                    CCWArray = CCWArray.concat(polygonArrayTemp[i].components);
                } else {
                    if (CCWArray.length > 0 && polygonArray.length > 0) {
                        polygonArray[polygonArray.length - 1].components = polygonArray[polygonArray.length - 1].components.concat(CCWArray);
                        CCWArray = [];
                    }
                    polygonArray.push(
                        polygonArrayTemp[i]
                    );
                }
                if (i == len - 1) {
                    var polyLength = polygonArray.length;
                    if (polyLength) {
                        polygonArray[polyLength - 1].components = polygonArray[polyLength - 1].components.concat(CCWArray);
                    } else {
                        for (let k = 0, length = CCWArray.length; k < length; k++) {
                            polygonArray.push(
                                new Polygon_Polygon(CCWArray)
                            );
                        }
                    }
                }
            }
        }
        return new MultiPolygon_MultiPolygon(polygonArray);
    }

    /**
     * @function SuperMap.ServerGeometry.prototype.toGeoRegionEPS
     * @description å°æå¡ç«¯çé¢å ä½å¯¹è±¡è½¬æ¢ä¸ºå®¢æ·ç«¯å ä½å¯¹è±¡ãç±»åä¸º Polygonã
     * @returns {SuperMap.Geometry} è½¬æ¢åçå®¢æ·ç«¯å ä½å¯¹è±¡ã
     */
    toGeoRegionEPS() {
        var me = this,
            geoParts = me.parts || [],
            geoTopo = me.partTopo || [],
            geoPoints = me.points || [],
            len = geoParts.length;

        if (len <= 0) {
            return null;
        }
        var polygonArray = [];
        var pointList = [];
        var lineEPS;
        if (len == 1) {
            for (var i = 0; i < geoPoints.length; i++) {
                pointList.push(
                    new Point_Point(geoPoints[i].x, geoPoints[i].y))
            }

            lineEPS = LineString_LineString.createLineEPS(pointList);
            polygonArray.push(
                new Polygon_Polygon(
                    [new LinearRing_LinearRing(lineEPS)]
                )
            );
            return new MultiPolygon_MultiPolygon(polygonArray);
        }
        //å¤çå¤æé¢
        var CCWArray = [];
        var areaArray = [];
        var polygonArrayTemp = [];
        var polygonBounds = [];
        //polyonå²æ´æ è¯æ°ç»ï¼åå§é½æ¯å²ã
        var CCWIdent = [];
        for (let i = 0, pointIndex = 0; i < len; i++) {
            for (let j = 0; j < geoParts[i]; j++) {
                pointList.push(
                    new Point_Point(geoPoints[pointIndex + j].x, geoPoints[pointIndex + j].y)
                );
            }
            pointIndex += geoParts[i];

            lineEPS = LineString_LineString.createLineEPS(pointList);
            var polygon = new Polygon_Polygon(
                [new LinearRing_LinearRing(lineEPS)]
            );
            pointList = [];
            polygonArrayTemp.push(polygon);
            if (geoTopo.length === 0){
                polygonBounds.push(polygon.getBounds());
            }
            CCWIdent.push(1);
            areaArray.push(polygon.getArea());
        }
        //æ ¹æ®é¢ç§¯æåº
        ServerGeometry_ServerGeometry.bubbleSort(areaArray, polygonArrayTemp, geoTopo, polygonBounds);
        //iServer 9Dæ°å¢å­æ®µ
        if (geoTopo.length === 0) {
            //å²æ´åºå±å¤æ­ååï¼å°ææçå­å¯¹è±¡æç§é¢ç§¯æåºï¼é¢ç§¯æå¤§çç´æ¥å¤å®ä¸ºå²ï¼1ï¼ï¼ä»é¢ç§¯æ¬¡å¤§çå¼å§å¤çï¼
            // å¦æåç°è¯¥å¯¹è±¡å¨æä¸ªé¢ç§¯å¤§äºå®çå¯¹è±¡ä¹ä¸­ï¼å³è¢«åå«ï¼ï¼åæ ¹æ®åå«å®çå¯¹è±¡çæ è¯ï¼1 or -1ï¼ï¼æå®å¶æ è¯ï¼-1 or 1ï¼ï¼
            // ä¾æ¬¡å¤çå®ææå¯¹è±¡ï¼å°±å¾å°äºä¸ä¸ªæ è¯æ°ç»ï¼1è¡¨ç¤ºå²ï¼-1è¡¨ç¤ºæ´
            //ç®æ polygonç´¢å¼åè¡¨ -1æ ç¤ºæ²¡æè¢«ä»»ä½polygonåå«ï¼
            var targetArray = [];
            for (let i = 1; i < polygonArrayTemp.length; i++) {
                for (let j = i - 1; j >= 0; j--) {
                    targetArray[i] = -1;
                    if (polygonBounds[j].containsBounds(polygonBounds[i])) {
                        CCWIdent[i] = CCWIdent[j] * -1;
                        if (CCWIdent[i] < 0) {
                            targetArray[i] = j;
                        }
                        break;
                    }
                }
            }
            for (let i = 0; i < polygonArrayTemp.length; i++) {
                if (CCWIdent[i] > 0) {
                    polygonArray.push(polygonArrayTemp[i]);
                } else {
                    polygonArray[targetArray[i]].components = polygonArray[targetArray[i]].components.concat(polygonArrayTemp[i].components);
                    //å ä½
                    polygonArray.push('');
                }
            }
        } else {
            //æ ¹æ®é¢ç§¯æåº
            polygonArray = new Array();
            for (let i = 0; i < polygonArrayTemp.length; i++) {
                if (geoTopo[i] && geoTopo[i] == -1) {
                    CCWArray = CCWArray.concat(polygonArrayTemp[i].components);
                } else {
                    if (CCWArray.length > 0 && polygonArray.length > 0) {
                        polygonArray[polygonArray.length - 1].components = polygonArray[polygonArray.length - 1].components.concat(CCWArray);
                        CCWArray = [];
                    }
                    polygonArray.push(
                        polygonArrayTemp[i]
                    );
                }
                if (i == len - 1) {
                    var polyLength = polygonArray.length;
                    if (polyLength) {
                        polygonArray[polyLength - 1].components = polygonArray[polyLength - 1].components.concat(CCWArray);
                    } else {
                        for (let k = 0, length = CCWArray.length; k < length; k++) {
                            polygonArray.push(
                                new Polygon_Polygon(CCWArray)
                            );
                        }
                    }
                }
            }
        }
        return new MultiPolygon_MultiPolygon(polygonArray);
    }

    /**
     * @function SuperMap.ServerGeometry.prototype.fromJson
     * @description å° JSON å¯¹è±¡è¡¨ç¤ºæå¡ç«¯å ä½å¯¹è±¡è½¬æ¢ä¸º ServerGeometryã
     * @param {Object} jsonObject - è¦è½¬æ¢ç JSON å¯¹è±¡ã
     * @returns {SuperMap.ServerGeometry} è½¬æ¢åç ServerGeometry å¯¹è±¡ã
     */
    static fromJson(jsonObject) {
        if (!jsonObject) {
            return;
        }
        return new ServerGeometry_ServerGeometry({
            id: jsonObject.id,
            style: ServerStyle_ServerStyle.fromJson(jsonObject.style),
            parts: jsonObject.parts,
            partTopo: jsonObject.partTopo,
            points: jsonObject.points,
            center: jsonObject.center,
            length: jsonObject.length,
            maxM: jsonObject.maxM,
            minM: jsonObject.minM,
            type: jsonObject.type
        });

    }

    /**
     * @function SuperMap.ServerGeometry.prototype.fromGeometry
     * @description å°å®¢æ·ç«¯ Geometry è½¬æ¢ææå¡ç«¯ ServerGeometryã
     * @param {SuperMap.Geometry} geometry - è¦è½¬æ¢çå®¢æ·ç«¯ Geometry å¯¹è±¡ã
     * @returns {SuperMap.ServerGeometry} è½¬æ¢åç ServerGeometry å¯¹è±¡ã
     */
    static fromGeometry(geometry) {
        if (!geometry) {
            return;
        }
        var id = 0,
            parts = [],
            points = [],
            type = null,
            icomponents = geometry.components,
            className = geometry.CLASS_NAME,
            prjCoordSys = {"epsgCode": geometry.SRID};

        if (!isNaN(geometry.id)) {
            id = geometry.id;
        }
        //åç¹çæ¹æ³ï¼æ²¡æ³ï¼ä¸ºäºæ¯ææå¿æ ç»ï¼ææ¶é´å°±å¾å¨æ¹
        if (className != "SuperMap.Geometry.LinearRing" && className != "SuperMap.Geometry.LineString" && (geometry instanceof MultiPoint_MultiPoint || geometry instanceof MultiLineString_MultiLineString)) {
            let ilen = icomponents.length;
            for (let i = 0; i < ilen; i++) {
                let partPointsCount = icomponents[i].getVertices().length;
                parts.push(partPointsCount);
                for (let j = 0; j < partPointsCount; j++) {
                    points.push(new Point_Point(icomponents[i].getVertices()[j].x, icomponents[i].getVertices()[j].y));
                }
            }
            //è¿éclassNameä¸æ¯å¤ç¹å°±å¨é¨æ¯ç®çº¿
            type = (className == "SuperMap.Geometry.MultiPoint") ? GeometryType.POINT : GeometryType.LINE;
        } else if (geometry instanceof MultiPolygon_MultiPolygon) {
            let ilen = icomponents.length;
            for (let i = 0; i < ilen; i++) {
                let polygon = icomponents[i],
                    linearRingOfPolygon = polygon.components,
                    linearRingOfPolygonLen = linearRingOfPolygon.length;
                for (let j = 0; j < linearRingOfPolygonLen; j++) {
                    let partPointsCount = linearRingOfPolygon[j].getVertices().length + 1;
                    parts.push(partPointsCount);
                    for (let k = 0; k < partPointsCount - 1; k++) {
                        points.push(new Point_Point(linearRingOfPolygon[j].getVertices()[k].x, linearRingOfPolygon[j].getVertices()[k].y));
                    }
                    points.push(new Point_Point(linearRingOfPolygon[j].getVertices()[0].x, linearRingOfPolygon[j].getVertices()[0].y));
                }
            }
            type = GeometryType.REGION;
        } else if (geometry instanceof Polygon_Polygon) {
            let ilen = icomponents.length;
            for (let i = 0; i < ilen; i++) {
                let partPointsCount = icomponents[i].getVertices().length + 1;
                parts.push(partPointsCount);
                for (let j = 0; j < partPointsCount - 1; j++) {
                    points.push(new Point_Point(icomponents[i].getVertices()[j].x, icomponents[i].getVertices()[j].y));
                }
                points.push(new Point_Point(icomponents[i].getVertices()[0].x, icomponents[i].getVertices()[0].y));
            }
            type = GeometryType.REGION;
        } else {
            let geometryVerticesCount = geometry.getVertices().length;
            for (let j = 0; j < geometryVerticesCount; j++) {
                points.push(new Point_Point(geometry.getVertices()[j].x, geometry.getVertices()[j].y));
            }
            if (geometry instanceof LinearRing_LinearRing) {
                points.push(new Point_Point(geometry.getVertices()[0].x, geometry.getVertices()[0].y));
                geometryVerticesCount++;
            }
            parts.push(geometryVerticesCount);
            type = (geometry instanceof Point_Point) ? GeometryType.POINT : GeometryType.LINE;
        }

        return new ServerGeometry_ServerGeometry({
            id: id,
            style: null,
            parts: parts,
            points: points,
            type: type,
            prjCoordSys: prjCoordSys
        });
    }

    /**
     * @function SuperMap.ServerGeometry.prototype.IsClockWise
     * @description å¤æ­ linearRing ä¸­çç¹çé¡ºåºãè¿åå¼å¤§äº 0ï¼éæ¶éï¼å°äº 0ï¼é¡ºæ¶éã
     * @param {SuperMap.Geometry} geometry - è¦è½¬æ¢çå®¢æ·ç«¯ Geometry å¯¹è±¡ã
     * @returns {number} è¿åå¼å¤§äº 0ï¼éæ¶éï¼å°äº 0ï¼é¡ºæ¶éã
     */
    static IsClockWise(points) {
        var length = points.length;
        if (length < 3) {
            return 0.0;
        }
        var s = points[0].y * (points[length - 1].x - points[1].x);
        points.push(points[0]);
        for (var i = 1; i < length; i++) {
            s += points[i].y * (points[i - 1].x - points[i + 1].x);
        }
        return s * 0.5;
    }

    static bubbleSort(areaArray, pointList, geoTopo,polygonBounds) {
        for (var i = 0; i < areaArray.length; i++) {
            for (var j = 0; j < areaArray.length; j++) {
                if (areaArray[i] > areaArray[j]) {
                    var d = areaArray[j];
                    areaArray[j] = areaArray[i];
                    areaArray[i] = d;
                    var b = pointList[j];
                    pointList[j] = pointList[i];
                    pointList[i] = b;
                    if (geoTopo && geoTopo.length > 0) {
                        var c = geoTopo[j];
                        geoTopo[j] = geoTopo[i];
                        geoTopo[i] = c;
                    }
                    if (polygonBounds && polygonBounds.length > 0) {
                        var f = polygonBounds[j];
                        polygonBounds[j] = polygonBounds[i];
                        polygonBounds[i] = f;
                    }
                }
            }
        }
    }

}

SuperMap.ServerGeometry = ServerGeometry_ServerGeometry;
// CONCATENATED MODULE: ./src/common/format/GeoJSON.js
/* CopyrightÂ© 2000 - 2019 SuperMap Software Co.Ltd. All rights reserved.
 * This program are made available under the terms of the Apache License, Version 2.0
 * which accompanies this distribution and is available at http://www.apache.org/licenses/LICENSE-2.0.html.*/















/**
 * @class SuperMap.Format.GeoJSON
 * @classdesc  GeoJSON çè¯»ååãä½¿ç¨ {@link SuperMap.Format.GeoJSON} æé å¨åå»ºä¸ä¸ª GeoJSON è§£æå¨ã
 * @category BaseTypes Format
 * @param {Object} [options] - åæ°ã
 * @param {string} [options.indent="    "] - ç¨äºæ ¼å¼åè¾åºï¼indent å­ç¬¦ä¸²ä¼å¨æ¯æ¬¡ç¼©è¿çæ¶åä½¿ç¨ä¸æ¬¡ã
 * @param {string} [options.space=" "] - ç¨äºæ ¼å¼åè¾åºï¼space å­ç¬¦ä¸²ä¼å¨åå¼å¯¹ç ":" åè¾¹æ·»å ã
 * @param {string} [options.newline="\n"] - ç¨äºæ ¼å¼åè¾åº, newline å­ç¬¦ä¸²ä¼ç¨å¨æ¯ä¸ä¸ªåå¼å¯¹ææ°ç»é¡¹æ«å°¾ã
 * @param {number} [options.level=0] - ç¨äºæ ¼å¼åè¾åº, è¡¨ç¤ºçæ¯ç¼©è¿çº§å«ã
 * @param {boolean} [options.pretty=false] - æ¯å¦å¨åºååçæ¶åä½¿ç¨é¢å¤çç©ºæ ¼æ§å¶ç»æãå¨ write æ¹æ³ä¸­ä½¿ç¨ã
 * @param {boolean} [options.nativeJSON] - éè¦è¢«æ³¨åççå¬å¨å¯¹è±¡ã
 * @param {boolean} [options.ignoreExtraDims=true] - å¿½ç¥ç»´åº¦è¶è¿ 2 çå ä½è¦ç´ ã
 * @extends {SuperMap.Format.JSON}
 */
class GeoJSON_GeoJSON extends JSON_JSONFormat {


    constructor(options) {
        super(options);
        /**
         * @member {boolean} [SuperMap.Format.GeoJSON.prototype.ignoreExtraDims=true]
         * @description å¿½ç¥ç»´åº¦è¶è¿ 2 çå ä½è¦ç´ ã
         */
        this.ignoreExtraDims = true;

        this.CLASS_NAME = "SuperMap.Format.GeoJSON";
        /**
         * @member {Object} SuperMap.Format.GeoJSON.prototype.parseCoords 
         * @private
         * @description ä¸ä¸ªå±æ§åå¯¹åºç GeoJSON å¯¹è±¡çå ä½ç±»åçå¯¹è±¡ãæ¯ä¸ªå±æ§å¶å®é½æ¯ä¸ä¸ªå®éä¸åè§£æç¨çæ¹æ³ã
         */
        this.parseCoords = {
            /**
             * @function SuperMap.Format.GeoJSON.parseCoords.point
             * @description å°ä¸ç»åæ è½¬æä¸ä¸ª {@link SuperMap.Geometry} å¯¹è±¡ã
             * @param {Object} array - GeoJSON çæ®µä¸­çä¸ç»åæ ã
             * @returns {SuperMap.Geometry} ä¸ä¸ªå ä½å¯¹è±¡ã
             */
            "point": function (array) {
                if (this.ignoreExtraDims == false &&
                    array.length != 2) {
                    throw "Only 2D points are supported: " + array;
                }
                return new Point_Point(array[0], array[1]);
            },

            /**
             * @function SuperMap.Format.GeoJSON.parseCoords.multipoint
             * @description å°åæ ç»æ°ç»è½¬åæä¸ºä¸ä¸ª {@link SuperMap.Geometry} å¯¹è±¡ã
             * @param {Object} array - GeoJSON çæ®µä¸­çåæ ç»æ°ç»ã
             * @returns {SuperMap.Geometry} ä¸ä¸ªå ä½å¯¹è±¡ã
             */
            "multipoint": function (array) {
                var points = [];
                var p = null;
                for (var i = 0, len = array.length; i < len; ++i) {
                    try {
                        p = this.parseCoords["point"].apply(this, [array[i]]);
                    } catch (err) {
                        throw err;
                    }
                    points.push(p);
                }
                return new MultiPoint_MultiPoint(points);
            },

            /**
             * @function SuperMap.Format.GeoJSON.parseCoords.linestring
             * @description å°åæ ç»æ°ç»è½¬åæä¸ºä¸ä¸ª {@link SuperMap.Geometry} å¯¹è±¡ã
             * @param {Object} array - GeoJSON çæ®µä¸­çåæ ç»æ°ç»ã
             * @returns {SuperMap.Geometry} ä¸ä¸ªå ä½å¯¹è±¡ã
             */
            "linestring": function (array) {
                var points = [];
                var p = null;
                for (var i = 0, len = array.length; i < len; ++i) {
                    try {
                        p = this.parseCoords["point"].apply(this, [array[i]]);
                    } catch (err) {
                        throw err;
                    }
                    points.push(p);
                }
                return new LineString_LineString(points);
            },

            /**
             * @function SuperMap.Format.GeoJSON.parseCoords.multilinestring
             * @description å°åæ ç»æ°ç»è½¬åæä¸ºä¸ä¸ª {@link SuperMap.Geometry} å¯¹è±¡ã
             * @param {Object} array - GeoJSON çæ®µä¸­çåæ ç»æ°ç»ã
             * @returns {SuperMap.Geometry} ä¸ä¸ªå ä½å¯¹è±¡ã
             */
            "multilinestring": function (array) {
                var lines = [];
                var l = null;
                for (var i = 0, len = array.length; i < len; ++i) {
                    try {
                        l = this.parseCoords["linestring"].apply(this, [array[i]]);
                    } catch (err) {
                        throw err;
                    }
                    lines.push(l);
                }
                return new MultiLineString_MultiLineString(lines);
            },

            /**
             * @function SuperMap.Format.GeoJSON.parseCoords.polygon
             * @description å°åæ ç»æ°ç»è½¬åæä¸ºä¸ä¸ª {@link SuperMap.Geometry} å¯¹è±¡ã
             * @returns {SuperMap.Geometry} ä¸ä¸ªå ä½å¯¹è±¡ã
             */
            "polygon": function (array) {
                var rings = [];
                var r, l;
                for (var i = 0, len = array.length; i < len; ++i) {
                    try {
                        l = this.parseCoords["linestring"].apply(this, [array[i]]);
                    } catch (err) {
                        throw err;
                    }
                    r = new LinearRing_LinearRing(l.components);
                    rings.push(r);
                }
                return new Polygon_Polygon(rings);
            },

            /**
             * @function SuperMap.Format.GeoJSON.parseCoords.multipolygon
             * @description å°åæ ç»æ°ç»è½¬åæä¸ºä¸ä¸ª {@link SuperMap.Geometry} å¯¹è±¡ã
             * @param {Object} array - GeoJSON çæ®µä¸­çåæ ç»æ°ç»ã
             * @returns {SuperMap.Geometry} ä¸ä¸ªå ä½å¯¹è±¡ã
             */
            "multipolygon": function (array) {
                var polys = [];
                var p = null;
                for (var i = 0, len = array.length; i < len; ++i) {
                    try {
                        p = this.parseCoords["polygon"].apply(this, [array[i]]);
                    } catch (err) {
                        throw err;
                    }
                    polys.push(p);
                }
                return new MultiPolygon_MultiPolygon(polys);
            },

            /**
             * @function SuperMap.Format.GeoJSON.parseCoords.box
             * @description å°åæ ç»æ°ç»è½¬åæä¸ºä¸ä¸ª {@link SuperMap.Geometry} å¯¹è±¡ã
             * @param {Object} array - GeoJSON çæ®µä¸­çåæ ç»æ°ç»ã
             * @returns {SuperMap.Geometry} ä¸ä¸ªå ä½å¯¹è±¡ã
             */
            "box": function (array) {
                if (array.length != 2) {
                    throw "GeoJSON box coordinates must have 2 elements";
                }
                return new Polygon_Polygon([
                    new LinearRing_LinearRing([
                        new Point_Point(array[0][0], array[0][1]),
                        new Point_Point(array[1][0], array[0][1]),
                        new Point_Point(array[1][0], array[1][1]),
                        new Point_Point(array[0][0], array[1][1]),
                        new Point_Point(array[0][0], array[0][1])
                    ])
                ]);
            }

        };
        /**
         * @member {Object} SuperMap.Format.GeoJSON.prototype.extract
         * @private
         * @description ä¸ä¸ªå±æ§åå¯¹åºçGeoJSONç±»åçå¯¹è±¡ãå¶å¼ä¸ºç¸åºçå®éçè§£ææ¹æ³ã
         */
        this.extract = {
            /**
             * @function SuperMap.Format.GeoJSON.extract.feature
             * @description è¿åä¸ä¸ªè¡¨ç¤ºåä¸ªè¦ç´ å¯¹è±¡ç GeoJSON çä¸é¨åã
             * @param {SuperMap.ServerFeature} feature - iServer è¦ç´ å¯¹è±¡ã
             * @returns {Object} ä¸ä¸ªè¡¨ç¤ºç¹çå¯¹è±¡ã
             */
            'feature': function (feature) {
                var geom = this.extract.geometry.apply(this, [feature.geometry]);
                var json = {
                    "type": "Feature",
                    "properties": this.createAttributes(feature),
                    "geometry": geom
                };

                if (feature.geometry && feature.geometry.type === 'TEXT') {
                    json.properties.texts = feature.geometry.texts;
                    json.properties.textStyle = feature.geometry.textStyle;
                }
                if (feature.fid) {
                    json.id = feature.fid;
                }
                if (feature.ID) {
                    json.id = feature.ID;
                }
                return json;
            },


            /**
             * @function SuperMap.Format.GeoJSON.extract.geometry
             * @description è¿åä¸ä¸ªè¡¨ç¤ºåä¸ªå ä½å¯¹è±¡ç GeoJSON çä¸é¨åã
             * @param {Object} geometry - iServer å ä½å¯¹è±¡ã
             * @returns {Object} ä¸ä¸ªè¡¨ç¤ºå ä½ä½çå¯¹è±¡ã
             */
            'geometry': function (geometry) {
                if (geometry == null) {
                    return null;
                }
                if (!geometry.parts && geometry.points) {
                    geometry.parts = [geometry.points.length];
                }
                var geo = new ServerGeometry_ServerGeometry(geometry).toGeometry() || geometry;
                var geometryType = geo.geometryType || geo.type;
                var data;
                if (geometryType === "LinearRing") {
                    geometryType = "LineString";
                }
                if (geometryType === "LINEM") {
                    geometryType = "MultiLineString";
                }
                data = this.extract[geometryType.toLowerCase()].apply(this, [geo]);
                geometryType = geometryType === 'TEXT' ? 'Point' : geometryType;
                var json;
                if (geometryType === "Collection") {
                    json = {
                        "type": "GeometryCollection",
                        "geometries": data
                    };
                } else {
                    json = {
                        "type": geometryType,
                        "coordinates": data
                    };
                }
                return json;
            },


            /**
             * @function SuperMap.Format.GeoJSON.extract.point
             * @description ä»ä¸ä¸ªç¹å¯¹è±¡ä¸­è¿åä¸ä¸ªåæ ç»ã
             * @param {SuperMap.Geometry.Point} point - ä¸ä¸ªç¹å¯¹è±¡ã
             * @returns {Array} ä¸ä¸ªè¡¨ç¤ºä¸ä¸ªç¹çåæ ç»ã
             */
            'point': function (point) {
                var p = [point.x, point.y];
                for (var name in point) {
                    if (name !== "x" && name !== "y" && point[name] !== null && !isNaN(point[name])) {
                        p.push(point[name]);
                    }
                }
                return p;
            },

            /**
             * @function SuperMap.Format.GeoJSON.extract.point
             * @description ä»ä¸ä¸ªææ¬å¯¹è±¡ä¸­è¿åä¸ä¸ªåæ ç»ã
             * @param {Object} geo - ä¸ä¸ªææ¬å¯¹è±¡ã
             * @returns {Array} ä¸ä¸ªè¡¨ç¤ºä¸ä¸ªç¹çåæ ç»ã
             */
            'text': function (geo) {
                return [geo.points[0].x, geo.points[0].y];
            },

            /**
             * @function SuperMap.Format.GeoJSON.extract.multipoint
             * @description ä»ä¸ä¸ªå¤ç¹å¯¹è±¡ä¸­è¿ä¸ä¸ªåæ ç»æ°ç»ã
             * @param {SuperMap.Geometry.MultiPoint} multipoint - å¤ç¹å¯¹è±¡ã
             * @returns {Array} ä¸ä¸ªè¡¨ç¤ºå¤ç¹çåæ ç»æ°ç»ã
             */
            'multipoint': function (multipoint) {
                var array = [];
                for (var i = 0, len = multipoint.components.length; i < len; ++i) {
                    array.push(this.extract.point.apply(this, [multipoint.components[i]]));
                }
                return array;
            },

            /**
             * @function SuperMap.Format.GeoJSON.extract.linestring
             * @description ä»ä¸ä¸ªçº¿å¯¹è±¡ä¸­è¿åä¸ä¸ªåæ ç»æ°ç»ã
             * @param {SuperMap.Geometry.Linestring} linestring - çº¿å¯¹è±¡ã
             * @returns {Array} ä¸ä¸ªè¡¨ç¤ºçº¿å¯¹è±¡çåæ ç»æ°ç»ã
             */
            'linestring': function (linestring) {
                var array = [];
                for (var i = 0, len = linestring.components.length; i < len; ++i) {
                    array.push(this.extract.point.apply(this, [linestring.components[i]]));
                }
                return array;
            },

            /**
             * @function SuperMap.Format.GeoJSON.extract.multilinestring
             * @description ä»ä¸ä¸ªå¤çº¿å¯¹è±¡ä¸­è¿åä¸ä¸ªçº¿æ°ç»ã
             * @param {SuperMap.Geometry.MultiLinestring} multilinestring - å¤çº¿å¯¹è±¡ã
             *
             * @returns {Array} ä¸ä¸ªè¡¨ç¤ºå¤çº¿ççº¿æ°ç»ã
             */
            'multilinestring': function (multilinestring) {
                var array = [];
                for (var i = 0, len = multilinestring.components.length; i < len; ++i) {
                    array.push(this.extract.linestring.apply(this, [multilinestring.components[i]]));
                }
                return array;
            },

            /**
             * @function SuperMap.Format.GeoJSON.extract.polygon
             * @description ä»ä¸ä¸ªé¢å¯¹è±¡ä¸­è¿åä¸ç»çº¿ç¯ã
             * @param {SuperMap.Geometry.Polygon} polygon - é¢å¯¹è±¡ã
             * @returns {Array} ä¸ç»è¡¨ç¤ºé¢ççº¿ç¯ã
             */
            'polygon': function (polygon) {
                var array = [];
                for (var i = 0, len = polygon.components.length; i < len; ++i) {
                    array.push(this.extract.linestring.apply(this, [polygon.components[i]]));
                }
                return array;
            },

            /**
             * @function SuperMap.Format.GeoJSON.extract.multipolygon
             * @description ä»ä¸ä¸ªå¤é¢å¯¹è±¡ä¸­è¿åä¸ç»é¢ã
             * @param {SuperMap.Geometry.MultiPolygon} multipolygon - å¤é¢å¯¹è±¡ã
             * @returns {Array} ä¸ç»è¡¨ç¤ºå¤é¢çé¢ã
             */
            'multipolygon': function (multipolygon) {
                var array = [];
                for (var i = 0, len = multipolygon.components.length; i < len; ++i) {
                    array.push(this.extract.polygon.apply(this, [multipolygon.components[i]]));
                }
                return array;
            },

            /**
             * @function SuperMap.Format.GeoJSON.extract.collection
             * @description ä»ä¸ä¸ªå ä½è¦ç´ éåä¸­ä¸ç»å ä½è¦ç´ æ°ç»ã
             * @param {SuperMap.Geometry.Collection} collection - å ä½è¦ç´ éåã
             * @returns {Array} ä¸ç»è¡¨ç¤ºå ä½è¦ç´ éåçå ä½è¦ç´ æ°ç»ã
             */
            'collection': function (collection) {
                var len = collection.components.length;
                var array = new Array(len);
                for (var i = 0; i < len; ++i) {
                    array[i] = this.extract.geometry.apply(this, [collection.components[i]]);
                }
                return array;
            }
        };
    }

    /**
     * @function SuperMap.Format.GeoJSON.prototype.read
     * @description å° GeoJSON å¯¹è±¡æèGeoJSON å¯¹è±¡å­ç¬¦ä¸²è½¬æ¢ä¸º SuperMap Feature å¯¹è±¡ã
     * @param {GeoJSONObject} json - GeoJSON å¯¹è±¡ã
     * @param {string} [type='FeaureCollection'] - å¯éçå­ç¬¦ä¸²ï¼å®å³å®äºè¾åºçæ ¼å¼ãæ¯æçå¼æï¼"Geometry","Feature"ï¼å "FeatureCollection"ï¼å¦ææ­¤å¼ä¸ºnullã
     * @param {Function} filter - å¯¹è±¡ä¸­æ¯ä¸ªå±æ¬¡æ¯ä¸ªé®å¼å¯¹é½ä¼è°ç¨æ­¤å½æ°å¾åºä¸ä¸ªç»æãæ¯ä¸ªå¼é½ä¼è¢« filter å½æ°çç»æææ¿æ¢æãè¿ä¸ªå½æ°å¯è¢«ç¨æ¥å°æäºå¯¹è±¡è½¬åææä¸ªç±»ç¸åºçå¯¹è±¡ï¼æèå°æ¥æå­ç¬¦ä¸²è½¬åæDateå¯¹è±¡ã
     * @returns {Object}  è¿åå¼ä¾èµäº type åæ°çå¼ã
     *     -å¦æ type ç­äº "FeatureCollection"ï¼è¿åå¼å°ä¼æ¯ {@link SuperMap.Feature.Vector} æ°ç»ã
     *     -å¦æ type ä¸º "Geometry",è¾å¥ç JSON å¯¹è±¡å¿é¡»è¡¨ç¤ºä¸ä¸ªå¯ä¸çå ä½ä½ï¼ç¶åè¿åå¼å°±ä¼æ¯ {@link SuperMap.Feature.Geometry}ã
     *     -å¦æ type ä¸º "Feature"ï¼è¾å¥ç JSON å¯¹è±¡ä¹å¿é¡»è¡¨ç¤ºçä¸ä¸ªè¦ç´ ï¼è¿æ ·è¿åå¼æä¼æ¯ {@link SuperMap.Feature.Vector}ã
     */

    read(json, type, filter) {
        type = (type) ? type : "FeatureCollection";
        var results = null;
        var obj = null;
        if (typeof json == "string") {
            obj = super.read(json, filter);
        } else {
            obj = json;
        }
        if (!obj) {
            //SuperMap.Console.error("Bad JSON: " + json);
        } else if (typeof (obj.type) != "string") {
            //SuperMap.Console.error("Bad GeoJSON - no type: " + json);
        } else if (this.isValidType(obj, type)) {
            switch (type) {
                case "Geometry":
                    try {
                        results = this.parseGeometry(obj);
                    } catch (err) {
                        //SuperMap.Console.error(err);
                    }
                    break;
                case "Feature":
                    try {
                        results = this.parseFeature(obj);
                        results.type = "Feature";
                    } catch (err) {
                        //SuperMap.Console.error(err);
                    }
                    break;
                case "FeatureCollection":
                    // for type FeatureCollection, we allow input to be any type
                    results = [];
                    switch (obj.type) {
                        case "Feature":
                            try {
                                results.push(this.parseFeature(obj));
                            } catch (err) {
                                results = null;
                                //SuperMap.Console.error(err);
                            }
                            break;
                        case "FeatureCollection":
                            for (var i = 0, len = obj.features.length; i < len; ++i) {
                                try {
                                    results.push(this.parseFeature(obj.features[i]));
                                } catch (err) {
                                    results = null;
                                    // SuperMap.Console.error(err);
                                }
                            }
                            break;
                        default:
                            try {
                                var geom = this.parseGeometry(obj);
                                results.push(new Vector_Vector(geom));
                            } catch (err) {
                                results = null;
                                //SuperMap.Console.error(err);
                            }
                    }
                    break;
                default:
                    break;
            }
        }
        return results;
    }

    /**
     * @function SuperMap.Format.GeoJSON.prototype.write
     * @description iServer Geometry JSON å¯¹è±¡ è½¬ GeoJSONå¯¹è±¡å­ç¬¦ä¸²ã
     * @param {Object} obj - iServer Geometry JSON å¯¹è±¡ã
     * @param {boolean} [pretty=false] - æ¯å¦ä½¿ç¨æ¢è¡åç¼©è¿æ¥æ§å¶è¾åºã
     * @returns {GeoJSONObject} ä¸ä¸ª GeoJSON å­ç¬¦ä¸²ï¼å®è¡¨ç¤ºäºè¾å¥çå ä½å¯¹è±¡ï¼è¦ç´ å¯¹è±¡ï¼æèè¦ç´ å¯¹è±¡æ°ç»ã
     */
    write(obj, pretty) {
        return super.write(this.toGeoJSON(obj), pretty);
    }
    /**
     * @function SuperMap.Format.GeoJSON.prototype.fromGeoJSON
     * @version 9.1.1
     * @description å° GeoJSON å¯¹è±¡æèGeoJSON å¯¹è±¡å­ç¬¦ä¸²è½¬æ¢ä¸ºiServer Feature JSONã
     * @param {GeoJSONObject} json - GeoJSON å¯¹è±¡ã
     * @param {string} [type='FeaureCollection'] - å¯éçå­ç¬¦ä¸²ï¼å®å³å®äºè¾åºçæ ¼å¼ãæ¯æçå¼æï¼"Geometry","Feature"ï¼å "FeatureCollection"ï¼å¦ææ­¤å¼ä¸ºnullã
     * @param {Function} filter - å¯¹è±¡ä¸­æ¯ä¸ªå±æ¬¡æ¯ä¸ªé®å¼å¯¹é½ä¼è°ç¨æ­¤å½æ°å¾åºä¸ä¸ªç»æãæ¯ä¸ªå¼é½ä¼è¢« filter å½æ°çç»æææ¿æ¢æãè¿ä¸ªå½æ°å¯è¢«ç¨æ¥å°æäºå¯¹è±¡è½¬åææä¸ªç±»ç¸åºçå¯¹è±¡ï¼æèå°æ¥æå­ç¬¦ä¸²è½¬åæDateå¯¹è±¡ã
     * @returns {Object}  iServer Feature JSONã
     */
    fromGeoJSON(json, type, filter) {
        let feature = this.read(json, type, filter);
        if (!Util.isArray(feature)) {
            return this._toiSevrerFeature(feature);
        }
        return feature.map((element) => {
            return this._toiSevrerFeature(element);
        })
    }

    /**
     * @function SuperMap.Format.GeoJSON.prototype.toGeoJSON
     * @version 9.1.1
     * @description å° iServer Feature JSON å¯¹è±¡è½¬æ¢ä¸º GeoJSON å¯¹è±¡ã
     * @param {Object} obj - iServer Feature JSONã
     * @returns {GeoJSONObject}  GeoJSON å¯¹è±¡ã
     */
    toGeoJSON(obj) {
        var geojson = {
            "type": null
        };
        if (Util.isArray(obj)) {
            geojson.type = "FeatureCollection";
            var numFeatures = obj.length;
            geojson.features = new Array(numFeatures);
            for (var i = 0; i < numFeatures; ++i) {
                var element = obj[i];
                if (isGeometry(element)) {
                    let feature = {};
                    feature.geometry = element;
                    geojson.features[i] = this.extract.feature.apply(this, [feature]);
                } else {
                    geojson.features[i] = this.extract.feature.apply(this, [element]);
                }
            }
        } else if (isGeometry(obj)) {
            let feature = {};
            feature.geometry = obj;
            geojson = this.extract.feature.apply(this, [feature]);
        } else {
            geojson = this.extract.feature.apply(this, [obj]);
        }

        function isGeometry(input) {
            return input.hasOwnProperty("parts") && input.hasOwnProperty("points");
        }

        return geojson;

    }
    /**
     *  @function SuperMap.Format.GeoJSON.prototype.isValidType
     *  @description æ£æ¥ä¸ä¸ª GeoJSON å¯¹è±¡æ¯å¦åç»å®çç±»åç¸ç¬¦çåæ³çå¯¹è±¡ã
     *  @returns {boolean} GeoJSON æ¯å¦æ¯ç»å®ç±»åçåæ³å¯¹è±¡ã
     *  @private
     */
    isValidType(obj, type) {
        var valid = false;
        switch (type) {
            case "Geometry":
                if (Util.indexOf(
                    ["Point", "MultiPoint", "LineString", "MultiLineString",
                        "Polygon", "MultiPolygon", "Box", "GeometryCollection"
                    ],
                    obj.type) == -1) {
                    // unsupported geometry type
                    //SuperMap.Console.error("Unsupported geometry type: " +
                    // obj.type);
                } else {
                    valid = true;
                }
                break;
            case "FeatureCollection":
                // allow for any type to be converted to a feature collection
                valid = true;
                break;
            default:
                // for Feature types must match
                if (obj.type == type) {
                    valid = true;
                } else {
                    //SuperMap.Console.error("Cannot convert types from " +
                    //obj.type + " to " + type);
                }
        }
        return valid;
    }

    /**
     * @function SuperMap.Format.GeoJSON.prototype.parseFeature
     * @description å°ä¸ä¸ª GeoJSON ä¸­ç feature è½¬åæ {@link SuperMap.Feature.Vector}> å¯¹è±¡ã
     * @private
     * @param {GeoJSONObject} obj - ä» GeoJSON å¯¹è±¡ä¸­åå»ºä¸ä¸ªå¯¹è±¡ã
     * @returns {SuperMap.Feature.Vector} ä¸ä¸ªè¦ç´ ã
     */
    parseFeature(obj) {
        var feature, geometry, attributes, bbox;
        attributes = (obj.properties) ? obj.properties : {};
        bbox = (obj.geometry && obj.geometry.bbox) || obj.bbox;
        try {
            geometry = this.parseGeometry(obj.geometry);
        } catch (err) {
            // deal with bad geometries
            throw err;
        }
        feature = new Vector_Vector(geometry, attributes);
        if (bbox) {
            feature.bounds = Bounds_Bounds.fromArray(bbox);
        }
        if (obj.id) {
            feature.fid = obj.id;
        }
        return feature;
    }


    /**
     * @function SuperMap.Format.GeoJSON.prototype.parseGeometry
     * @description å°ä¸ä¸ª GeoJSON ä¸­çå ä½è¦ç´ è½¬åæ {@link SuperMap.Geometry} å¯¹è±¡ã
     * @param {GeoJSONObject} obj - ä» GeoJSON å¯¹è±¡ä¸­åå»ºä¸ä¸ªå¯¹è±¡ã
     * @returns {SuperMap.Geometry} ä¸ä¸ªå ä½è¦ç´ ã
     * @private
     */
    parseGeometry(obj) {
        if (obj == null) {
            return null;
        }
        var geometry;
        if (obj.type == "GeometryCollection") {
            if (!(Util.isArray(obj.geometries))) {
                throw "GeometryCollection must have geometries array: " + obj;
            }
            var numGeom = obj.geometries.length;
            var components = new Array(numGeom);
            for (var i = 0; i < numGeom; ++i) {
                components[i] = this.parseGeometry.apply(
                    this, [obj.geometries[i]]
                );
            }
            geometry = new Collection_Collection(components);
        } else {
            if (!(Util.isArray(obj.coordinates))) {
                throw "Geometry must have coordinates array: " + obj;
            }
            if (!this.parseCoords[obj.type.toLowerCase()]) {
                throw "Unsupported geometry type: " + obj.type;
            }
            try {
                geometry = this.parseCoords[obj.type.toLowerCase()].apply(
                    this, [obj.coordinates]
                );
            } catch (err) {
                // deal with bad coordinates
                throw err;
            }
        }
        return geometry;
    }


    /**
     * @function SuperMap.Format.GeoJSON.prototype.createCRSObject
     * @description ä»ä¸ä¸ªè¦ç´ å¯¹è±¡ä¸­åå»ºä¸ä¸ªåæ åèç³»å¯¹è±¡ã
     * @param {SuperMap.Feature.Vector} object - è¦ç´ å¯¹è±¡ã
     * @private
     * @returns {GeoJSONObject} ä¸ä¸ªå¯ä½ä¸º GeoJSON å¯¹è±¡ç CRS å±æ§ä½¿ç¨çå¯¹è±¡ã
     */
    createCRSObject(object) {
        var proj = object.layer.projection.toString();
        var crs = {};
        if (proj.match(/epsg:/i)) {
            var code = parseInt(proj.substring(proj.indexOf(":") + 1));
            if (code == 4326) {
                crs = {
                    "type": "name",
                    "properties": {
                        "name": "urn:ogc:def:crs:OGC:1.3:CRS84"
                    }
                };
            } else {
                crs = {
                    "type": "name",
                    "properties": {
                        "name": "EPSG:" + code
                    }
                };
            }
        }
        return crs;
    }
    _toiSevrerFeature(feature) {
        const attributes = feature.attributes;
        const attrNames = [];
        const attrValues = [];
        for (var attr in attributes) {
            attrNames.push(attr);
            attrValues.push(attributes[attr]);
        }
        const newFeature = {
            fieldNames: attrNames,
            fieldValues: attrValues,
            geometry: ServerGeometry_ServerGeometry.fromGeometry(feature.geometry)
        };
        newFeature.geometry.id = feature.fid;
        return newFeature;
    }
    createAttributes(feature) {
        if (!feature) {
            return null;
        }
        var attr = {};
        processFieldsAttributes(feature, attr);
        var exceptKeys = ["fieldNames", "fieldValues", "geometry"];
        for (var key in feature) {
            if (exceptKeys.indexOf(key) > -1) {
                continue;
            }
            attr[key] = feature[key];
        }

        function processFieldsAttributes(feature, attributes) {
            if (!(feature.hasOwnProperty("fieldNames") && feature.hasOwnProperty("fieldValues"))) {
                return;
            }
            var names = feature.fieldNames,
                values = feature.fieldValues;
            for (var i in names) {
                attributes[names[i]] = values[i];
            }
        }

        return attr;
    }
}

SuperMap.Format.GeoJSON = GeoJSON_GeoJSON;
// CONCATENATED MODULE: ./src/common/iServer/GetFeaturesServiceBase.js
/* CopyrightÂ© 2000 - 2019 SuperMap Software Co.Ltd. All rights reserved.
 * This program are made available under the terms of the Apache License, Version 2.0
 * which accompanies this distribution and is available at http://www.apache.org/licenses/LICENSE-2.0.html.*/






/**
 * @class SuperMap.GetFeaturesServiceBase
 * @category  iServer Data FeatureResults
 * @classdesc æ°æ®æå¡ä¸­æ°æ®éæ¥è¯¢æå¡åºç±»ãè·åç»ææ°æ®ç±»åä¸º Objectãåå« result å±æ§ï¼result çæ°æ®æ ¼å¼æ ¹æ® format åæ°å³å®ä¸º GeoJSON æè iServerJSONã
 * @extends SuperMap.CommonServiceBase
 * @param {string} url - æ°æ®æ¥è¯¢ç»æèµæºå°åãè¯·æ±æ°æ®æå¡ä¸­æ°æ®éæ¥è¯¢æå¡ï¼
 * URLåºä¸ºï¼http://{æå¡å¨å°å}:{æå¡ç«¯å£å·}/iserver/services/{æ°æ®æå¡å}/rest/data/
 * ä¾å¦ï¼"http://localhost:8090/iserver/services/data-jingjin/rest/data/"
 * @param {Object} options - åæ°ã 
 * @param {Object} options.eventListeners - äºä»¶çå¬å¨å¯¹è±¡ãæ processCompleted å±æ§å¯ä¼ å¥å¤çå®æåçåè°å½æ°ãprocessFailed å±æ§ä¼ å¥å¤çå¤±è´¥åçåè°å½æ°ã 
 * @param {SuperMap.ServerType} [options.serverType=SuperMap.ServerType.ISERVER] - æå¡å¨ç±»åï¼iServer|iPortal|Onlineã 
 * @param {SuperMap.DataFormat} [options.format=SuperMap.DataFormat.GEOJSON] - æ¥è¯¢ç»æè¿åæ ¼å¼ï¼ç®åæ¯æ iServerJSON å GeoJSON ä¸¤ç§æ ¼å¼ãåæ°æ ¼å¼ä¸º "ISERVER"ï¼"GEOJSON"ã
 * @example
 * var myService = new SuperMap.GetFeaturesServiceBase(url, {
 *     eventListeners: {
 *         "processCompleted": getFeatureCompleted,
 *         "processFailed": getFeatureError
 *     }
 * });
 */
class GetFeaturesServiceBase_GetFeaturesServiceBase extends CommonServiceBase_CommonServiceBase {

    constructor(url, options) {
        super(url, options);
        options = options || {};

        /**
         * @member {boolean} [SuperMap.GetFeaturesServiceBase.prototype.returnContent=true]
         * @description æ¯å¦ç«å³è¿åæ°åå»ºèµæºçè¡¨è¿°è¿æ¯è¿åæ°èµæºç URIã
         * å¦æä¸º trueï¼åç´æ¥è¿åæ°åå»ºèµæºï¼å³æ¥è¯¢ç»æçè¡¨è¿°ã
         * å¦æä¸º falseï¼åè¿åçæ¯æ¥è¯¢ç»æèµæºç URIã
         */
        this.returnContent = true;

        /**
         * @member {number} [SuperMap.GetFeaturesServiceBase.prototype.fromIndex=0]
         * @description æ¥è¯¢ç»æçæå°ç´¢å¼å·ãå¦æè¯¥å¼å¤§äºæ¥è¯¢ç»æçæå¤§ç´¢å¼å·ï¼åæ¥è¯¢ç»æä¸ºç©ºã
         */
        this.fromIndex = 0;

        /**
         * @member {number} [SuperMap.GetFeaturesServiceBase.prototype.toIndex=19]
         * @description æ¥è¯¢ç»æçæå¤§ç´¢å¼å·ã
         * å¦æè¯¥å¼å¤§äºæ¥è¯¢ç»æçæå¤§ç´¢å¼å·ï¼åä»¥æ¥è¯¢ç»æçæå¤§ç´¢å¼å·ä¸ºç»æ­¢ç´¢å¼å·ã
         */
        this.toIndex = 19;

        /**
         * @member {number} [SuperMap.GetFeaturesServiceBase.prototype.maxFeatures=1000]
         * @description è¿è¡ SQL æ¥è¯¢æ¶ï¼ç¨äºè®¾ç½®æå¡ç«¯è¿åæ¥è¯¢ç»ææ¡ç®æ°éã
         */
        this.maxFeatures = null;

        /**
         * @member {string} [SuperMap.GetFeaturesServiceBase.prototype.format=SuperMap.DataFormat.GEOJSON]
         * @description æ¥è¯¢ç»æè¿åæ ¼å¼ï¼ç®åæ¯æ iServerJSON å GeoJSON ä¸¤ç§æ ¼å¼ã
         * åæ°æ ¼å¼ä¸º "ISERVER"ï¼"GEOJSON"ã
         */
        this.format = DataFormat.GEOJSON;

        Util.extend(this, options);
        var me = this, end;
        if (options.format) {
            me.format = options.format.toUpperCase();
        }

        end = me.url.substr(me.url.length - 1, 1);
        // TODO å¾iServer featureResulèµæºGeoJSONè¡¨è¿°bugä¿®å¤å½ä½¿ç¨ä»¥ä¸æ³¨éæçé»è¾
        // if (me.format==="geojson" ) {
        //     me.url += (end == "/") ? "featureResults.geojson?" : "/featureResults.geojson?";
        // } else {
        //     me.url += (end == "/") ? "featureResults.json?" : "/featureResults.json?";
        // }
        me.url += (end == "/") ? "featureResults.json?" : "/featureResults.json?";

        this.CLASS_NAME = "SuperMap.GetFeaturesServiceBase";
    }

    /**
     * @function SuperMap.GetFeaturesServiceBase.prototype.destroy
     * @description éæ¾èµæºï¼å°å¼ç¨èµæºçå±æ§ç½®ç©ºã
     */
    destroy() {
        super.destroy();
        var me = this;
        me.returnContent = null;
        me.fromIndex = null;
        me.toIndex = null;
        me.maxFeatures = null;
        me.format = null;
    }

    /**
     * @function SuperMap.GetFeaturesServiceBase.prototype.processAsync
     * @description å°å®¢æ·ç«¯çæ¥è¯¢åæ°ä¼ éå°æå¡ç«¯ã
     * @param {Object} params - æ¥è¯¢åæ°ã
     */
    processAsync(params) {
        if (!params) {
            return;
        }
        var me = this,
            jsonParameters = null,
            firstPara = true;

        me.returnContent = params.returnContent;
        me.fromIndex = params.fromIndex;
        me.toIndex = params.toIndex;
        me.maxFeatures = params.maxFeatures;
        if (me.returnContent) {
            me.url += "returnContent=" + me.returnContent;
            firstPara = false;
        }
        var isValidNumber = me.fromIndex != null && me.toIndex != null && !isNaN(me.fromIndex) && !isNaN(me.toIndex);
        if (isValidNumber && me.fromIndex >= 0 && me.toIndex >= 0 && !firstPara) {
            me.url += "&fromIndex=" + me.fromIndex + "&toIndex=" + me.toIndex;
        }

        if (params.returnCountOnly) {
            me.url += "&returnCountOnly=" + params.returnContent;
        }
        jsonParameters = me.getJsonParameters(params);
        me.request({
            method: "POST",
            data: jsonParameters,
            scope: me,
            success: me.serviceProcessCompleted,
            failure: me.serviceProcessFailed
        });
    }

    /**
     * @function SuperMap.GetFeaturesServiceBase.prototype.getFeatureComplete
     * @description æ¥è¯¢å®æï¼æ§è¡æ­¤æ¹æ³ã
     * @param {Object} result - æå¡å¨è¿åçç»æå¯¹è±¡ã
     */
    serviceProcessCompleted(result) {
        var me = this;
        result = Util.transformResult(result);
        if (me.format === DataFormat.GEOJSON && result.features) {
            var geoJSONFormat = new GeoJSON_GeoJSON();
            result.features = geoJSONFormat.toGeoJSON(result.features);
        }
        me.events.triggerEvent("processCompleted", {result: result});
    }


}

SuperMap.GetFeaturesServiceBase = GetFeaturesServiceBase_GetFeaturesServiceBase;
// CONCATENATED MODULE: ./src/common/iServer/GetFeaturesBySQLService.js
/* CopyrightÂ© 2000 - 2019 SuperMap Software Co.Ltd. All rights reserved.
 * This program are made available under the terms of the Apache License, Version 2.0
 * which accompanies this distribution and is available at http://www.apache.org/licenses/LICENSE-2.0.html.*/




/**
 * @class SuperMap.GetFeaturesBySQLService
 * @constructs SuperMap.GetFeaturesBySQLService
 * @category iServer Data FeatureResults
 * @classdesc æ°æ®æå¡ä¸­æ°æ®é SQL æ¥è¯¢æå¡ç±»ãå¨ä¸ä¸ªæå¤ä¸ªæå®çå¾å±ä¸æ¥è¯¢ç¬¦å SQL æ¡ä»¶çç©ºé´å°ç©ä¿¡æ¯ã
 * @param {string} url - æ°æ®æ¥è¯¢ç»æèµæºå°åãè¯·æ±æ°æ®æå¡ä¸­æ°æ®éæ¥è¯¢æå¡ï¼
 *                       URL åºä¸ºï¼http://{æå¡å¨å°å}:{æå¡ç«¯å£å·}/iserver/services/{æ°æ®æå¡å}/rest/data/ï¼</br>
 *                       ä¾å¦ï¼"http://localhost:8090/iserver/services/data-jingjin/rest/data/"
 * @param {Object} options - åæ°ã</br>
 * @param {Object} options.eventListeners - äºä»¶çå¬å¨å¯¹è±¡ãæprocessCompletedå±æ§å¯ä¼ å¥å¤çå®æåçåè°å½æ°ãprocessFailedå±æ§ä¼ å¥å¤çå¤±è´¥åçåè°å½æ°ã
 * @param {SuperMap.ServerType} options.serverType - æå¡å¨ç±»åï¼iServer|iPortal|Onlineã
 * @param {SuperMap.DataFormat} options.format - æ¥è¯¢ç»æè¿åæ ¼å¼ï¼ç®åæ¯æiServerJSON åGeoJSONä¸¤ç§æ ¼å¼ãåæ°æ ¼å¼ä¸º"ISERVER","GEOJSON"ã
 * @extends {SuperMap.GetFeaturesServiceBase}
 * @example
 * var myGetFeaturesBySQLService = new SuperMap.GetFeaturesBySQLService(url, {
     *     eventListeners: {
     *         "processCompleted": GetFeaturesCompleted,
     *         "processFailed": GetFeaturesError
     *         }
     * });
 * function getFeaturesCompleted(object){//todo};
 * function getFeaturesError(object){//todo};
 *
 */
class GetFeaturesBySQLService_GetFeaturesBySQLService extends GetFeaturesServiceBase_GetFeaturesServiceBase {

    constructor(url, options) {
        super(url, options);
        this.CLASS_NAME = "SuperMap.GetFeaturesBySQLService";
    }

    /**
     * @function SuperMap.GetFeaturesBySQLService.prototype.destroy
     * @override
     */
    destroy() {
        super.destroy();
    }

    /*
     * @function SuperMap.GetFeaturesBySQLService.prototype.getJsonParameters
     * @description å°æ¥è¯¢åæ°è½¬åä¸º JSON å­ç¬¦ä¸²ã
     * å¨æ¬ç±»ä¸­éåæ­¤æ¹æ³ï¼å¯ä»¥å®ç°ä¸åç§ç±»çæ¥è¯¢ï¼ID, SQL, Buffer, Geometryç­ï¼ã
     * @param {SuperMap.GetFeaturesBySQLParameters} params - æ°æ®éSQLæ¥è¯¢åæ°ç±»ã
     * @returns {string} è½¬ååç JSON å­ç¬¦ä¸²ã
     */
    getJsonParameters(params) {
        return GetFeaturesBySQLParameters_GetFeaturesBySQLParameters.toJsonParameters(params);
    }


}

SuperMap.GetFeaturesBySQLService = GetFeaturesBySQLService_GetFeaturesBySQLService;
// CONCATENATED MODULE: ./src/common/iServer/QueryParameters.js
/* CopyrightÂ© 2000 - 2019 SuperMap Software Co.Ltd. All rights reserved.
 * This program are made available under the terms of the Apache License, Version 2.0
 * which accompanies this distribution and is available at http://www.apache.org/licenses/LICENSE-2.0.html.*/





/**
 * @class SuperMap.QueryParameters
 * @category  iServer Map QueryResults
 * @classdesc æ¥è¯¢åæ°åºç±»ãè·ç¦»æ¥è¯¢ãSQL æ¥è¯¢ãå ä½å°ç©æ¥è¯¢ç­åèªçåæ°åç»§æ¿æ­¤ç±»ã
 * @param {Object} options - åæ°ã
 * @param {Array.<SuperMap.FilterParameter>} options.queryParams - æ¥è¯¢è¿æ»¤æ¡ä»¶åæ°æ°ç»ã
 * @param {string} [options.customParams] - èªå®ä¹åæ°ï¼ä¾æ©å±ä½¿ç¨ã
 * @param {Object} [options.prjCoordSys] - èªå®ä¹åæ°ï¼ä¾ SuperMap Online æä¾çå¨ææå½±æ¥è¯¢æ©å±ä½¿ç¨ãå¦ {"epsgCode":3857}ã
 * @param {number} [options.expectCount=10000] - ææè¿åç»æè®°å½ä¸ªæ°ã
 * @param {SuperMap.GeometryType} [options.networkType=SuperMap.GeometryType.LINE] - ç½ç»æ°æ®éå¯¹åºçæ¥è¯¢ç±»åã
 * @param {SuperMap.QueryOption} [options.queryOption=SuperMap.ATTRIBUTEANDGEOMETRY] - æ¥è¯¢ç»æç±»åæä¸¾ç±»ã
 * @param {number} [options.startRecord=0] - æ¥è¯¢èµ·å§è®°å½å·ã
 * @param {number} [options.holdTime=10] - èµæºå¨æå¡ç«¯ä¿å­çæ¶é´,åä½ä¸ºåéã
 * @param {boolean} [options.returnCustomResult=false] - ä»ä¾ä¸ç»´ä½¿ç¨ã
 * @param {boolean} [options.returnFeatureWithFieldCaption = false] - è¿åçæ¥è¯¢ç»æè¦ç´ å­æ®µæ è¯æ¯å¦ä¸ºå­æ®µå«åãä¸º false æ¶ï¼è¿åçæ¯å­æ®µåï¼ä¸º true æ¶ï¼è¿åçæ¯å­æ®µå«åã
 */
class QueryParameters_QueryParameters {


    constructor(options) {
        if (!options) {
            return;
        }
        /**
         * @member {string} [SuperMap.QueryParameters.prototype.customParams]
         * @description èªå®ä¹åæ°ï¼ä¾æ©å±ä½¿ç¨ã
         */
        this.customParams = null;

        /**
         * @member {Object} [SuperMap.QueryParameters.prototype.prjCoordSys]
         * @description èªå®ä¹åæ°ï¼ä¾ SuperMap Online æä¾çå¨ææå½±æ¥è¯¢æ©å±ä½¿ç¨ãå¦ {"epsgCode":3857}
         */
        this.prjCoordSys = null;

        /**
         * @member {number} [SuperMap.QueryParameters.prototype.expectCount=100000]
         * @description ææè¿åç»æè®°å½ä¸ªæ°ï¼é»è®¤è¿å100000æ¡æ¥è¯¢è®°å½ï¼
         *              å¦æå®éä¸è¶³100000æ¡åè¿åå®éè®°å½æ¡æ°ã
         */
        this.expectCount = 100000;

        /**
         * @member {SuperMap.GeometryType} [SuperMap.QueryParameters.prototype.networkType=SuperMap.GeometryType.LINE]
         * @description ç½ç»æ°æ®éå¯¹åºçæ¥è¯¢ç±»åï¼åä¸ºç¹åçº¿ä¸¤ç§ç±»åã
         */
        this.networkType = GeometryType.LINE;

        /**
         * @member {SuperMap.QueryOption} [SuperMap.QueryParameters.prototype.queryOption=SuperMap.QueryOption.ATTRIBUTEANDGEOMETRY]
         * @description æ¥è¯¢ç»æç±»åæä¸¾ç±»ã
         *              è¯¥ç±»æè¿°æ¥è¯¢ç»æè¿åç±»åï¼åæ¬åªè¿åå±æ§ã
         *              åªè¿åå ä½å®ä½ä»¥åè¿åå±æ§åå ä½å®ä½ã
         */
        this.queryOption = QueryOption.ATTRIBUTEANDGEOMETRY;

        /**
         * @member {Array.<SuperMap.FilterParameter>} SuperMap.QueryParameters.prototype.queryParams
         * @description æ¥è¯¢è¿æ»¤æ¡ä»¶åæ°æ°ç»ã
         *              è¯¥ç±»ç¨äºè®¾ç½®æ¥è¯¢æ°æ®éçæ¥è¯¢è¿æ»¤åæ°ã
         */
        this.queryParams = null;

        /**
         * @member {number} [SuperMap.QueryParameters.prototype.startRecord=0]
         * @description æ¥è¯¢èµ·å§è®°å½å·ã
         */
        this.startRecord = 0;

        /**
         * @member {number} [SuperMap.QueryParameters.prototype.holdTime=10]
         * @description èµæºå¨æå¡ç«¯ä¿å­çæ¶é´ï¼åä½ä¸ºåéã
         */
        this.holdTime = 10;

        /**
         * @member {boolean} [SuperMap.QueryParameters.prototype.returnCustomResult=false]
         * @description ä»ä¾ä¸ç»´ä½¿ç¨ã
         */
        this.returnCustomResult = false;
        /**
         * @member {boolean} [SuperMap.QueryParameters.prototype.returnFeatureWithFieldCaption=false]
         * @description è¿åçæ¥è¯¢ç»æè¦ç´ å­æ®µæ è¯æ¯å¦ä¸ºå­æ®µå«åãä¸º false æ¶ï¼è¿åçæ¯å­æ®µåï¼ä¸º true æ¶ï¼è¿åçæ¯å­æ®µå«åã
         */
        this.returnFeatureWithFieldCaption = false;
        Util.extend(this, options);

        this.CLASS_NAME = "SuperMap.QueryParameters";
    }

    /**
     * @function SuperMap.QueryParameters.prototype.destroy
     * @description éæ¾èµæºï¼å°å¼ç¨èµæºçå±æ§ç½®ç©ºã
     */
    destroy() {
        var me = this;
        me.customParams = null;
        me.expectCount = null;
        me.networkType = null;
        me.queryOption = null;
        if (me.queryParams) {
            for (var i = 0, qps = me.queryParams, len = qps.length; i < len; i++) {
                qps[i].destroy();
            }
            me.queryParams = null;
        }
        me.startRecord = null;
        me.holdTime = null;
        me.returnCustomResult = null;
        me.prjCoordSys = null;
    }

}

SuperMap.QueryParameters = QueryParameters_QueryParameters;
// CONCATENATED MODULE: ./src/common/iServer/QueryBySQLParameters.js
/* CopyrightÂ© 2000 - 2019 SuperMap Software Co.Ltd. All rights reserved.
 * This program are made available under the terms of the Apache License, Version 2.0
 * which accompanies this distribution and is available at http://www.apache.org/licenses/LICENSE-2.0.html.*/




/**
 * @class SuperMap.QueryBySQLParameters
 * @category  iServer Map QueryResults
 * @classdesc SQL æ¥è¯¢åæ°ç±»ã
 *            è¯¥ç±»ç¨äºè®¾ç½® SQL æ¥è¯¢çç¸å³åæ°ã
 * @extends {SuperMap.QueryParameters}
 * @param {Object} options - åæ°ã
 * @param {Array.<SuperMap.FilterParameter>} options.queryParams - æ¥è¯¢è¿æ»¤æ¡ä»¶åæ°æ°ç»ã
 * @param {string} [options.customParams] - èªå®ä¹åæ°ï¼ä¾æ©å±ä½¿ç¨ã
 * @param {Object} [options.prjCoordSys] - èªå®ä¹åæ°ï¼ä¾ SuperMap Online æä¾çå¨ææå½±æ¥è¯¢æ©å±ä½¿ç¨ãå¦ {"epsgCode":3857}ã
 * @param {number} [options.expectCount=10000] - ææè¿åç»æè®°å½ä¸ªæ°ã
 * @param {SuperMap.GeometryType} [options.networkType=SuperMap.GeometryType.LINE] - ç½ç»æ°æ®éå¯¹åºçæ¥è¯¢ç±»åã
 * @param {SuperMap.QueryOption} [options.queryOption=SuperMap.ATTRIBUTEANDGEOMETRY] - æ¥è¯¢ç»æç±»åæä¸¾ç±»ã
 * @param {number} [options.startRecord=0] - æ¥è¯¢èµ·å§è®°å½å·ã
 * @param {number} [options.holdTime=10] - èµæºå¨æå¡ç«¯ä¿å­çæ¶é´ï¼åä½ä¸ºåéã
 * @param {boolean} [options.returnCustomResult=false] - ä»ä¾ä¸ç»´ä½¿ç¨ã
 * @param {boolean} [options.returnContent=true] - æ¯å¦ç«å³è¿åæ°åå»ºèµæºçè¡¨è¿°è¿æ¯è¿åæ°èµæºç URIã
 * @param {boolean} [options.returnFeatureWithFieldCaption = false] - è¿åçæ¥è¯¢ç»æè¦ç´ å­æ®µæ è¯æ¯å¦ä¸ºå­æ®µå«åãä¸º false æ¶ï¼è¿åçæ¯å­æ®µåï¼ä¸º true æ¶ï¼è¿åçæ¯å­æ®µå«åã
 */
class QueryBySQLParameters_QueryBySQLParameters extends QueryParameters_QueryParameters {

    constructor(options) {
        if (!options) {
            return;
        }
        super(options);
        /**
         * @member {boolean} [SuperMap.QueryBySQLParameters.prototype.returnContent=true]
         * @description æ¯å¦ç«å³è¿åæ°åå»ºèµæºçè¡¨è¿°è¿æ¯è¿åæ°èµæºç URIã
         *              å¦æä¸º trueï¼åç´æ¥è¿åæ°åå»ºèµæºï¼å³æ¥è¯¢ç»æçè¡¨è¿°ã
         *              ä¸º falseï¼åè¿åçæ¯æ¥è¯¢ç»æèµæºç URIã
         */
        this.returnContent = true;
        Util.extend(this, options);
        this.CLASS_NAME = "SuperMap.QueryBySQLParameters";
    }

    /**
     * @function SuperMap.QueryBySQLParameters.prototype.destroy
     * @description éæ¾èµæºï¼å°å¼ç¨èµæºçå±æ§ç½®ç©ºã
     */
    destroy() {
        super.destroy();
        var me = this;
        me.returnContent = null;
    }

}
SuperMap.QueryBySQLParameters = QueryBySQLParameters_QueryBySQLParameters;
// CONCATENATED MODULE: ./src/common/iServer/QueryService.js
/* CopyrightÂ© 2000 - 2019 SuperMap Software Co.Ltd. All rights reserved.
 * This program are made available under the terms of the Apache License, Version 2.0
 * which accompanies this distribution and is available at http://www.apache.org/licenses/LICENSE-2.0.html.*/







/**
 * @class SuperMap.QueryService
 * @category  iServer Map QueryResults
 * @classdesc æ¥è¯¢æå¡åºç±»ã
 * @extends {SuperMap.CommonServiceBase}
 * @param {string} url - æå¡å°åãè¯·æ±å°å¾æ¥è¯¢æå¡ç URL åºä¸ºï¼http://{æå¡å¨å°å}:{æå¡ç«¯å£å·}/iserver/services/{å°å¾æå¡å}/rest/maps/{å°å¾å}ï¼
 * @param {Object} options - åæ°ã
 * @param {Object} options.eventListeners - äºä»¶çå¬å¨å¯¹è±¡ãæprocessCompletedå±æ§å¯ä¼ å¥å¤çå®æåçåè°å½æ°ãprocessFailedå±æ§ä¼ å¥å¤çå¤±è´¥åçåè°å½æ°ã
 * @param {SuperMap.ServerType} options.serverType - æå¡å¨ç±»åï¼iServer|iPortal|Onlineã
 * @param {SuperMap.DataFormat} options.format - æ¥è¯¢ç»æè¿åæ ¼å¼ï¼ç®åæ¯æiServerJSON åGeoJSONä¸¤ç§æ ¼å¼ãåæ°æ ¼å¼ä¸º"ISERVER"ï¼"GEOJSON"ã
 * @example
 * var myService = new SuperMap.QueryService(url, {
 *     eventListeners: {
 *	       "processCompleted": queryCompleted,
 *		   "processFailed": queryError
 *		   }
 * };
 */
class QueryService_QueryService extends CommonServiceBase_CommonServiceBase {

    /**
     * @function SuperMap.QueryService.prototype.constructor
     * @description æ¥è¯¢æå¡åºç±»æé å½æ°ã
     * @param {string} url - æå¡å°åãè¯·æ±å°å¾æ¥è¯¢æå¡ç URL åºä¸ºï¼http://{æå¡å¨å°å}:{æå¡ç«¯å£å·}/iserver/services/{å°å¾æå¡å}/rest/maps/{å°å¾å}ï¼
     * @param {Object} options -åæ°ã
     * @param {Object} options.eventListeners - éè¦è¢«æ³¨åççå¬å¨å¯¹è±¡ã
     */
    constructor(url, options) {
        super(url, options);

        /**
         * @member {boolean} SuperMap.QueryService.prototype.returnContent
         * @description æ¯å¦ç«å³è¿åæ°åå»ºèµæºçè¡¨è¿°è¿æ¯è¿åæ°èµæºçURIã
         */
        this.returnContent = false;

        /**
         * @member {string} SuperMap.QueryService.prototype.format
         * @description æ¥è¯¢ç»æè¿åæ ¼å¼ï¼ç®åæ¯æiServerJSON åGeoJSONä¸¤ç§æ ¼å¼ãåæ°æ ¼å¼ä¸º"ISERVER","GEOJSON"ã
         */
        this.format = DataFormat.GEOJSON;

        this.returnFeatureWithFieldCaption = false;

        if (options) {
            Util.extend(this, options);
        }

        this.CLASS_NAME = "SuperMap.QueryService";
        var me = this,
            end;
        if (!me.url) {
            return;
        }
        if (options && options.format) {
            me.format = options.format.toUpperCase();
        }

        end = me.url.substr(me.url.length - 1, 1);

        // TODO å¾iServer featureResulèµæºGeoJSONè¡¨è¿°bugä¿®å¤å½ä½¿ç¨ä»¥ä¸æ³¨éæçé»è¾
        // if (this.format==="geojson") {
        //     me.url += (end == "/") ? "featureResults.geojson?" : "/featureResults.geojson?";
        // } else {
        //     me.url += (end == "/") ? "featureResults.json?" : "/featureResults.json?";
        // }
        me.url += (end === "/") ? "queryResults.json?" : "/queryResults.json?";
    }

    /**
     * @function SuperMap.QueryService.prototype.destroy
     * @description éæ¾èµæºï¼å°å¼ç¨èµæºçå±æ§ç½®ç©ºã
     */
    destroy() {
        super.destroy();
        var me = this;
        me.returnContent = null;
        me.format = null;
    }

    /**
     * @function SuperMap.QueryService.prototype.processAsync
     * @description è´è´£å°å®¢æ·ç«¯çæ¥è¯¢åæ°ä¼ éå°æå¡ç«¯ã
     * @param {SuperMap.QueryParameters} params - æ¥è¯¢åæ°ã
     */
    processAsync(params) {
        if (!(params instanceof QueryParameters_QueryParameters)) {
            return;
        }
        var me = this,
            returnCustomResult = null,
            jsonParameters = null;
        me.returnContent = params.returnContent;

        jsonParameters = me.getJsonParameters(params);
        if (me.returnContent) {
            me.url += "returnContent=" + me.returnContent;
        } else {
            //ä»ä¾ä¸ç»´ä½¿ç¨ è·åé«äº®å¾ççbounds
            returnCustomResult = params.returnCustomResult;
            if (returnCustomResult) {
                me.url += "returnCustomResult=" + returnCustomResult;
            }
        }
        me.returnFeatureWithFieldCaption = params.returnFeatureWithFieldCaption;
        me.request({
            method: "POST",
            data: jsonParameters,
            scope: me,
            success: me.serviceProcessCompleted,
            failure: me.serviceProcessFailed
        });
    }

    /**
     * @function SuperMap.QueryService.prototype.serviceProcessCompleted
     * @description æ¥è¯¢å®æï¼æ§è¡æ­¤æ¹æ³ã
     * @param {Object} result - æå¡å¨è¿åçç»æå¯¹è±¡ã
     */
    serviceProcessCompleted(result) {
        var me = this;
        result = Util.transformResult(result);
        var geoJSONFormat = new GeoJSON_GeoJSON();
        if (result && result.recordsets) {
            for (var i = 0, recordsets = result.recordsets, len = recordsets.length; i < len; i++) {
                if (recordsets[i].features) {
                    if (me.returnFeatureWithFieldCaption === true) {
                        recordsets[i].features.map((feature) => {
                            feature.fieldNames = recordsets[i].fieldCaptions;
                            return feature;
                        })
                    }
                    if (me.format === DataFormat.GEOJSON) {
                        recordsets[i].features = geoJSONFormat.toGeoJSON(recordsets[i].features);
                    }
                }
            }
        }

        me.events.triggerEvent("processCompleted", {
            result: result
        });
    }

    /**
     * @function SuperMap.QueryService.prototype.getQueryParameters
     * @description å° JSON å¯¹è±¡è¡¨ç¤ºçæ¥è¯¢åæ°è½¬åä¸º QueryParameters å¯¹è±¡ã
     * @param {Object} params - JSON å­ç¬¦ä¸²è¡¨ç¤ºçæ¥è¯¢åæ°ã
     * @returns {SuperMap.QueryParameters} è¿åè½¬ååç QueryParameters å¯¹è±¡ã
     */
    getQueryParameters(params) {
        return new QueryParameters_QueryParameters({
            customParams: params.customParams,
            expectCount: params.expectCount,
            networkType: params.networkType,
            queryOption: params.queryOption,
            queryParams: params.queryParams,
            startRecord: params.startRecord,
            prjCoordSys: params.prjCoordSys,
            holdTime: params.holdTime
        });
    }

}

SuperMap.QueryService = QueryService_QueryService;
// CONCATENATED MODULE: ./src/common/iServer/QueryBySQLService.js
/* CopyrightÂ© 2000 - 2019 SuperMap Software Co.Ltd. All rights reserved.
 * This program are made available under the terms of the Apache License, Version 2.0
 * which accompanies this distribution and is available at http://www.apache.org/licenses/LICENSE-2.0.html.*/





/**
 * @class SuperMap.QueryBySQLService
 * @category  iServer Map QueryResults
 * @classdesc SQL æ¥è¯¢æå¡ç±»ãå¨ä¸ä¸ªæå¤ä¸ªæå®çå¾å±ä¸æ¥è¯¢ç¬¦å SQL æ¡ä»¶çç©ºé´å°ç©ä¿¡æ¯ã
 * @extends {SuperMap.QueryService}
 * @example
 * var queryParam = new SuperMap.FilterParameter({
 *     name: "Countries@World.1",
 *     attributeFilter: "Pop_1994>1000000000 and SmArea>900"
 * });
 * var queryBySQLParams = new SuperMap.QueryBySQLParameters({
 *     queryParams: [queryParam]
 * });
 * var myQueryBySQLService = new SuperMap.QueryBySQLService(url, {eventListeners: {
 *     "processCompleted": queryCompleted,
 *     "processFailed": queryError
 *	   }
 * });
 * queryBySQLService.processAsync(queryBySQLParams);
 * function queryCompleted(object){//todo};
 * function queryError(object){//todo};
 * @param {string} url - æå¡çè®¿é®å°åãå¦è®¿é®World Mapæå¡ï¼åªéå°urlè®¾ä¸º: http://localhost:8090/iserver/services/map-world/rest/maps/World+Map å³å¯ã
 * @param {Object} options - åæ°ã
 * @param {Object} options.eventListeners - äºä»¶çå¬å¨å¯¹è±¡ãæprocessCompletedå±æ§å¯ä¼ å¥å¤çå®æåçåè°å½æ°ãprocessFailedå±æ§ä¼ å¥å¤çå¤±è´¥åçåè°å½æ°ã
 * @param {SuperMap.ServerType} options.serverType - æå¡å¨ç±»åï¼iServer|iPortal|Onlineã
 * @param {SuperMap.DataFormat} options.format - æ¥è¯¢ç»æè¿åæ ¼å¼ï¼ç®åæ¯æ iServerJSON å GeoJSON ä¸¤ç§æ ¼å¼ãåæ°æ ¼å¼ä¸º"ISERVER"ï¼"GEOJSON"ã
 */
class QueryBySQLService_QueryBySQLService extends QueryService_QueryService {

    /**
     * @function SuperMap.QueryBySQLService.prototype.constructor
     * @description SQL æ¥è¯¢æå¡ç±»æé å½æ°ã
     * @param {string} url - æå¡çè®¿é®å°åãå¦è®¿é®World Mapæå¡ï¼åªéå°urlè®¾ä¸º: http://localhost:8090/iserver/services/map-world/rest/maps/World+Map å³å¯ã
     * @param {Object} options - åæ°ã
     * @param {Object} options.eventListeners - éè¦è¢«æ³¨åççå¬å¨å¯¹è±¡ã
     */
    constructor(url, options) {
        super(url, options);
        this.CLASS_NAME = "SuperMap.QueryBySQLService";
    }

    /**
     * @override
     */
    destroy() {
        super.destroy();
    }

    /**
     * @function SuperMap.QueryBySQLService.prototype.getJsonParameters
     * @description å°æ¥è¯¢åæ°è½¬åä¸º JSON å­ç¬¦ä¸²ã
     *              å¨æ¬ç±»ä¸­éåæ­¤æ¹æ³ï¼å¯ä»¥å®ç°ä¸åç§ç±»çæ¥è¯¢ï¼sql, geometry, distance, boundsç­ï¼ã
     * @param {SuperMap.QueryBySQLParameters} params - SQL æ¥è¯¢åæ°ç±»ã
     * @returns {Object} è½¬ååç JSON å­ç¬¦ä¸²ã
     */
    getJsonParameters(params) {
        if (!(params instanceof QueryBySQLParameters_QueryBySQLParameters)) {
            return;
        }
        var me = this,
            jsonParameters = "",
            qp = null;
        qp = me.getQueryParameters(params);
        jsonParameters += "'queryMode':'SqlQuery','queryParameters':";
        jsonParameters += Util.toJSON(qp);
        jsonParameters = "{" + jsonParameters + "}";
        return jsonParameters;
    }

}

SuperMap.QueryBySQLService = QueryBySQLService_QueryBySQLService;

// CONCATENATED MODULE: ./src/common/lang/Lang.js
/* CopyrightÂ© 2000 - 2019 SuperMap Software Co.Ltd. All rights reserved.
 * This program are made available under the terms of the Apache License, Version 2.0
 * which accompanies this distribution and is available at http://www.apache.org/licenses/LICENSE-2.0.html.*/



/**
 * @name Lang
 * @memberOf SuperMap
 * @namespace
 * @category BaseTypes
 * @description å½éåçå½åç©ºé´ï¼åå«å¤ç§è¯­è¨åæ¹æ³åºæ¥è®¾ç½®åè·åå½åçè¯­è¨ã
 */
let Lang = {

    /**
     * @member {string} SuperMap.Lang.code
     * @description å½åæä½¿ç¨çè¯­è¨ç±»åã
     */
    code: null,

    /**
     * @member {string} [SuperMap.Lang.defaultCode='en-US']
     * @description é»è®¤ä½¿ç¨çè¯­è¨ç±»åã
     */
    defaultCode: "en-US",

    /**
     * @function SuperMap.Lang.getCode
     * @description è·åå½åçè¯­è¨ä»£ç ã
     * @returns {string} å½åçè¯­è¨ä»£ç ã
     */
    getCode: function () {
        if (!SuperMap.Lang.code) {
            SuperMap.Lang.setCode();
        }
        return SuperMap.Lang.code;
    },

    /**
     * @function SuperMap.Lang.setCode
     * @description è®¾ç½®è¯­è¨ä»£ç ã
     * @param {string} code - æ­¤åæ°éµå¾ªIETFè§èã
     */
    setCode: function () {
        var lang = this.getLanguageFromCookie();
        if (lang) {
            SuperMap.Lang.code = lang;
            return;
        }
        lang = SuperMap.Lang.defaultCode;
        if (navigator.appName === 'Netscape') {
            lang = navigator.language;
        } else {
            lang = navigator.browserLanguage;
        }
        if (lang.indexOf('zh') === 0) {
            lang = 'zh-CN';
        }
        if (lang.indexOf('en') === 0) {
            lang = 'en-US';
        }

        SuperMap.Lang.code = lang;
    },
    /**
     * @function SuperMap.Lang.getLanguageFromCookie
     * @description ä» cookie ä¸­è·åè¯­è¨ç±»åã
     */
    getLanguageFromCookie() {
        var name = 'language=';
        var ca = document.cookie.split(';');
        for (var i = 0; i < ca.length; i++) {
            var c = ca[i];
            while (c.charAt(0) === ' ') {
                c = c.substring(1)
            }
            if (c.indexOf(name) !== -1) {
                return c.substring(name.length, c.length)
            }
        }
        return "";
    },

    /**
     * @function SuperMap.Lang.i18n
     * @description ä»å½åè¯­è¨å­ç¬¦ä¸²çå­å¸æ¥æ¾ keyã
     * @param {string} key - å­å¸ä¸­ i18n å­ç¬¦ä¸²å¼çå³é®å­ã
     * @returns {string} å½éåçå­ç¬¦ä¸²ã
     */
    i18n: function (key) {
        var dictionary = SuperMap.Lang[SuperMap.Lang.getCode()];
        var message = dictionary && dictionary[key];
        if (!message) {
            // Message not found, fall back to message key
            message = key;
        }
        return message;
    }

};

SuperMap.Lang = Lang;
SuperMap.i18n = SuperMap.Lang.i18n;

// EXTERNAL MODULE: external "function(){try{return XLSX}catch(e){return {}}}()"
var external_function_try_return_XLSX_catch_e_return_ = __webpack_require__(1);
var external_function_try_return_XLSX_catch_e_return_default = /*#__PURE__*/__webpack_require__.n(external_function_try_return_XLSX_catch_e_return_);

// CONCATENATED MODULE: ./src/common/widgets/util/FileReaderUtil.js
/* CopyrightÂ© 2000 - 2019 SuperMap Software Co.Ltd. All rights reserved.
 * This program are made available under the terms of the Apache License, Version 2.0
 * which accompanies this distribution and is available at http://www.apache.org/licenses/LICENSE-2.0.html.*/





/**
 * @class SuperMap.Widgets.FileReaderUtil
 * @classdesc å¾®ä»¶è¯»åæä»¶å·¥å·ç±»ã
 * @version 9.1.1
 * @type {{rABS: (boolean|*), rABF: (boolean|*), rAT: (boolean|*), readFile: (function(*, *=, *=, *=, *=)), readTextFile: (function(*, *=, *=, *=)), readXLSXFile: (function(*, *=, *=, *=)), processDataToGeoJson: (function(string, Object): GeoJSONObject), processExcelDataToGeoJson: (function(Object): GeoJSONObject), isXField: (function(*)), isYField: (function(*)), string2Csv: (function(*, *=))}}
 */
let FileReaderUtil = {
    rABS: typeof FileReader !== 'undefined' && FileReader.prototype && FileReader.prototype.readAsBinaryString,
    rABF: typeof FileReader !== 'undefined' && FileReader.prototype && FileReader.prototype.readAsArrayBuffer,
    rAT: typeof FileReader !== 'undefined' && FileReader.prototype && FileReader.prototype.readAsText,

    /**
     * @function SuperMap.Widgets.FileReaderUtil.prototype.readFile
     * @description è¯»åæä»¶
     * @param {string} fileType - å½åè¯»åçæä»¶ç±»å
     *
     * @param {Object} file - è¯»ååæ¥çæä»¶åå®¹å¯¹è±¡
     * @param {function} success - è¯»åæä»¶æååè°å½æ°
     * @param {function} failed - è¯»åæä»¶å¤±è´¥åè°å½æ°
     * @param {Object} context - åè°éå®åå¯¹è±¡
     */
    readFile(fileType, file, success, failed, context) {
        if (FileTypes.JSON === fileType || FileTypes.GEOJSON === fileType) {
            this.readTextFile(file, success, failed, context)
        } else if (FileTypes.EXCEL === fileType || FileTypes.CSV === fileType) {
            this.readXLSXFile(file, success, failed, context)
        }
    },

    /**
     * è¯»åææ¬æä»¶
     * @param file
     * @param success
     * @param failed
     * @param {Object} context - åè°éå®åå¯¹è±¡
     */
    readTextFile(file, success, failed, context) {
        let reader = new FileReader();
        reader.onloadend = function (evt) {
            success && success.call(context, evt.target.result);
        };
        reader.onerror = function (error) {
            failed && failed.call(context, error)
        };
        this.rAT ? reader.readAsText(file.file, 'utf-8') : reader.readAsBinaryString(file.file);
    },

    /**
     * è¯»åexcelæcsvæä»¶
     * @param file
     * @param success
     * @param failed
     * @param {Object} context - åè°éå®åå¯¹è±¡
     */
    readXLSXFile(file, success, failed, context) {
        let reader = new FileReader();
        reader.onloadend = function (evt) {
            let xLSXData = new Uint8Array(evt.target.result);
            let workbook = external_function_try_return_XLSX_catch_e_return_default.a.read(xLSXData, {type: "array"});
            try {
                if (workbook && workbook.SheetNames && workbook.SheetNames.length > 0) {
                    //ææ¶åªè¯»åç¬¬ä¸ä¸ªsheetsçåå®¹
                    let sheetName = workbook.SheetNames[0];
                    let xLSXCSVString = external_function_try_return_XLSX_catch_e_return_default.a.utils.sheet_to_csv(workbook.Sheets[sheetName]);
                    success && success.call(context, xLSXCSVString);
                }
            } catch (error) {
                failed && failed.call(context, error);
            }
        };
        reader.onerror = function (error) {
            failed && failed.call(context, error)
        };
        this.rABF && reader.readAsArrayBuffer(file.file);
    },

    /**
     * @function SuperMap.Widgets.FileReaderUtil.prototype.processDataToGeoJson
     * @description å°è¯»ååæ¥å¾æ°æ®ç»ä¸å¤çä¸º GeoJSON æ ¼å¼
     * @param {string} type - æä»¶ç±»å
     * @param {Object} data - è¯»åè¿åçæ°æ®å¯¹è±¡
     * @param {function} success - æ°æ®å¤çæåçåè°
     * @param {function} failed - æ°æ®å¤çå¤±è´¥çåè°
     * @param {Object} context - åè°éå®åå¯¹è±¡
     * @returns {GeoJSONObject} è¿åæ å GeoJSON è§èæ ¼å¼æ°æ®
     * @private
     */
    processDataToGeoJson(type, data, success, failed, context) {
        let geojson = null;
        if (type === "EXCEL" || type === "CSV") {
            geojson = this.processExcelDataToGeoJson(data);
            success && success.call(context, geojson);
        } else if (type === 'JSON' || type === 'GEOJSON') {
            let result = data;
            //geojsonãjsonæªç¥ï¼éè¿ç±»å®¹æ¥å¤æ­
            if ((typeof result) === "string") {
                result = JSON.parse(result);
            }
            if (result.type === 'ISERVER') {
                geojson = result.data.recordsets[0].features;
            } else if (result.type === 'FeatureCollection') {
                //geojson
                geojson = result;
            } else {
                //ä¸æ¯ææ°æ®
                failed && failed.call(context, Lang.i18n('msg_dataInWrongGeoJSONFormat'));
            }
            success && success.call(context, geojson);
        } else {
            failed && failed.call(context, Lang.i18n('msg_dataInWrongFormat'));
        }
    },
    /**
     * @function SuperMap.Widgets.FileReaderUtil.prototype.processExcelDataToGeoJson
     * @description è¡¨æ ¼æä»¶æ°æ®å¤ç
     * @param {Object} data - è¯»åçè¡¨æ ¼æä»¶æ°æ®
     * @returns {GeoJSONObject} è¿åæ å GeoJSON è§èæ ¼å¼æ°æ®
     * @private
     */
    processExcelDataToGeoJson(data) {
        //å¤çä¸ºå¯¹è±¡æ ¼å¼è½¬å
        let dataContent = this.string2Csv(data);
        let fieldCaptions = dataContent.colTitles;

        //ä½ç½®å±æ§å¤ç
        let xfieldIndex = -1,
            yfieldIndex = -1;
        for (let i = 0, len = fieldCaptions.length; i < len; i++) {
            if (this.isXField(fieldCaptions[i])) {
                xfieldIndex = i;
            }
            if (this.isYField(fieldCaptions[i])) {
                yfieldIndex = i;
            }
        }
        // feature æå»ºåææ¯æåæ ç³» 4326/3857
        let features = [];
        for (let i = 0, len = dataContent.rows.length; i < len; i++) {
            let row = dataContent.rows[i];
            //if (featureFrom === "LonLat") {
            let x = Number(row[xfieldIndex]),
                y = Number(row[yfieldIndex]);

            //å±æ§ä¿¡æ¯
            let attributes = {};
            for (let index in dataContent.colTitles) {
                let key = dataContent.colTitles[index];
                attributes[key] = dataContent.rows[i][index];
            }

            //ç®åcsv åªæ¯æå¤çç¹ï¼æä»¥åçæç¹ç±»åç geojson
            let feature = {
                "type": "Feature",
                "geometry": {
                    "type": "Point",
                    "coordinates": [x, y]
                },
                "properties": attributes
            };
            features.push(feature);
        }
        return features;
    },
    /**
     * å¤æ­æ¯å¦å°çXåæ 
     * @param data
     */
    isXField(data) {
        var lowerdata = data.toLowerCase();
        return (lowerdata === "x" || lowerdata === "smx" ||
            lowerdata === "jd" || lowerdata === "ç»åº¦" || lowerdata === "ä¸ç»" || lowerdata === "longitude" ||
            lowerdata === "lot" || lowerdata === "lon" || lowerdata === "lng" || lowerdata === "xåæ ");
    },

    /**
     * å¤æ­æ¯å¦å°çYåæ 
     * @param data
     */
    isYField(data) {
        var lowerdata = data.toLowerCase();
        return (lowerdata === "y" || lowerdata === "smy" ||
            lowerdata === "wd" || lowerdata === "çº¬åº¦" || lowerdata === "åçº¬" ||
            lowerdata === "latitude" || lowerdata === "lat" || lowerdata === "yåæ ");
    },
    /**
     * å­ç¬¦ä¸²è½¬ä¸ºdataEditor æ¯æçcsvæ ¼å¼æ°æ®
     * @param string
     * @param withoutTitle
     */
    string2Csv(string, withoutTitle) {
        // let rows = string.split('\r\n');
        let rows = string.split('\n');
        let result = {};
        if (!withoutTitle) {
            result["colTitles"] = rows[0].split(',');
        } else {
            result["colTitles"] = [];
        }
        result['rows'] = [];
        for (let i = (withoutTitle) ? 0 : 1; i < rows.length; i++) {
            rows[i] && result['rows'].push(rows[i].split(','));
        }
        return result;
    }

};

SuperMap.Widgets.FileReaderUtil = FileReaderUtil;


// CONCATENATED MODULE: ./src/common/widgets/chart/ChartModel.js
/* CopyrightÂ© 2000 - 2019 SuperMap Software Co.Ltd. All rights reserved.
 * This program are made available under the terms of the Apache License, Version 2.0
 * which accompanies this distribution and is available at http://www.apache.org/licenses/LICENSE-2.0.html.*/












/**
 * @class SuperMap.Widgets.ChartModel
 * @classdesc å¾è¡¨å¾®ä»¶æ°æ®æ¨¡å
 * @private
 * @param {Object} datasets - æ°æ®æ¥æºã
 * @category Widgets Chart
 * @fires SuperMap.Widgets.ChartModel#getdatafailed
 */

class ChartModel_ChartModel {

    constructor(datasets) {
        this.datasets = datasets;
        this.EVENT_TYPES = ["getdatafailed"];
        this.events = new Events_Events(this, null, this.EVENT_TYPES);
    }
    /**
     * @private
     * @function SuperMap.Widgets.ChartModel.prototype.getDatasetInfo
     * @description è·å¾æ°æ®éæ°æ®ã
     * @param {string} datasetUrl - æ°æ®éèµæºå°åã
     */
    getDatasetInfo(success) {
        let datasetUrl = this.datasets.url;
        let me = this;
        FetchRequest.get(datasetUrl).then(function (response) {
            return response.json();
        }).then(function (results) {
            if (results.datasetInfo) {
                let datasetInfo = results.datasetInfo;
                me.datasetsInfo = {
                    dataSourceName: datasetInfo.dataSourceName,
                    datasetName: datasetInfo.name,
                    mapName: results.name
                };
                success({
                    result: me.datasetsInfo
                });
            }
        }).catch(function (error) {
            console.log(error);
            me._fireFailedEvent(error);
        });
    }

    /**
     * @private
     * @function SuperMap.Widgets.ChartModel.prototype.getDataFeatures
     * @description è¯·æ±æ°æ®éçæ°æ®ä¿¡æ¯
     * @param {Object} results - æ°æ®éä¿¡æ¯ã
     * @param {function} success - æååè°å½æ°ã
     */
    getDataFeatures(results, success) {
        let datasetsInfo = results.result;
        let getFeatureParam, getFeatureBySQLParams, getFeatureBySQLService;
        let params = {
            name: datasetsInfo.datasetName + "@" + datasetsInfo.dataSourceName
        }
        Object.assign(params, this.datasets.queryInfo);
        getFeatureParam = new SuperMap.FilterParameter(params);
        getFeatureBySQLParams = new SuperMap.GetFeaturesBySQLParameters({
            queryParameter: getFeatureParam,
            datasetNames: [datasetsInfo.dataSourceName + ":" + datasetsInfo.datasetName],
            fromIndex: 0,
            toIndex: 100000
        });
        getFeatureBySQLService = new SuperMap.GetFeaturesBySQLService(datasetsInfo.dataUrl, {
            eventListeners: {
                "processCompleted": success,
                "processFailed": function () {}
            }
        });
        getFeatureBySQLService.processAsync(getFeatureBySQLParams);
    }

    /**
     * @private
     * @function SuperMap.Widgets.ChartModel.prototype.getLayerFeatures
     * @description è¯·æ±å¾å±è¦ç´ çæ°æ®ä¿¡æ¯
     * @param {Object} results - æ°æ®éä¿¡æ¯ã
     * @param {Callbacks} success - æååè°å½æ°ã
     */
    getLayerFeatures(results, success) {
        let datasetsInfo = results.result;
        let queryParam, queryBySQLParams, queryBySQLService;
        let params = {
            name: datasetsInfo.mapName
        };
        Object.assign(params, this.datasets.queryInfo);
        queryParam = new SuperMap.FilterParameter(params);
        queryBySQLParams = new SuperMap.QueryBySQLParameters({
            queryParams: [queryParam],
            expectCount: 100000
        });
        queryBySQLService = new SuperMap.QueryBySQLService(datasetsInfo.dataUrl, {
            eventListeners: {
                "processCompleted": success,
                "processFailed": function () {}
            }
        });
        queryBySQLService.processAsync(queryBySQLParams);
    }

    /**
     * @private
     * @function SuperMap.Widgets.ChartModel.prototype.getDataInfoByIptl
     * @description ç¨dataIdè·åiportalçæ°æ®ã
     * @param {Callbacks} success - getdatachartã
     * 
     */
    getDataInfoByIptl(success) {
        // successæ¯chartçåè°
        this.getServiceInfo(this.datasets.url, success);
    }

    /**
     * @private
     * @function SuperMap.Widgets.ChartModel.prototype.getServiceInfo
     * @description ç¨iportalè·ådataItemServicesã
     * @param {String} url 
     * @param {Callbacks} success - getdatachartã
     * */
    getServiceInfo(url, success) {
        let me = this;
        FetchRequest.get(url, null, {
            withCredentials: this.datasets.withCredentials
        }).then(response => {
            return response.json()
        }).then(data => {
            if (data.succeed === false) {
                //è¯·æ±å¤±è´¥
                me._fireFailedEvent(data);
                return;
            }
            // æ¯å¦ærestæå¡
            if (data.dataItemServices && data.dataItemServices.length > 0) {
                let dataItemServices = data.dataItemServices,
                    resultData;

                dataItemServices.forEach(item => {
                    // å¦æærestdataå¹¶ä¸åå¸æåï¼å°±è¯·æ±restdataæå¡
                    // å¦æærestmapå¹¶ä¸åå¸æåï¼å°±è¯·æ±restmapæå¡
                    // å¶ä»æåµå°±è¯·æ±iportal/content.json
                    if (item.serviceType === 'RESTDATA' && item.serviceStatus === 'PUBLISHED') {
                        resultData = item;
                    } else if (item.serviceType === 'RESTMAP' && item.serviceStatus === 'PUBLISHED') {
                        resultData = item;
                    } else {
                        me.getDatafromContent(url, success);
                        return;
                    }
                })
                // å¦æææå¡ï¼è·åæ°æ®æºåæ°æ®é, ç¶åè¯·æ±restæå¡
                resultData && me.getDatafromRest(resultData.serviceType, resultData.address, success)
            } else {
                me.getDatafromContent(url, success);
                return;
            }
        }).catch(error => {
            console.log(error);
            me._fireFailedEvent(error);
        })
    }
    /**
     * @private
     * @function SuperMap.Widgets.ChartModel.prototype.getDatafromURL
     * @description ç¨iportalè·åæ°æ®ãï¼éè¿åºå®çurlæ¥è¯·æ±ï¼ä½æ¯ä¸è½è¯·æ±å·¥ä½ç©ºé´çæ°æ®ï¼
     * @param {String} url 
     * @param {Callbacks} success - getdatachartã
     */
    getDatafromContent(url, success) {
        // æååè°ä¼ å¥çresults
        let results = {
                result: {}
            },
            me = this;
        url += '/content.json?pageSize=9999999&currentPage=1',
            // è·åå¾å±æ°æ®
            FetchRequest.get(url, null, {
                withCredentials: this.datasets.withCredentials
            }).then(response => {
                return response.json()
            }).then(data => {
                if (data.succeed === false) {
                    //è¯·æ±å¤±è´¥
                    me._fireFailedEvent(data);
                    return;
                }
                if (data.type) {
                    if (data.type === "JSON" || data.type === "GEOJSON") {
                        // å°å­ç¬¦ä¸²è½¬æ¢æjson
                        data.content = JSON.parse(data.content.trim());
                        // å¦ææ¯jsonæä»¶ data.content = {type:'fco', features},æ ¼å¼ä¸åºå®
                        if (!(data.content.features)) {
                            //jsonæ ¼å¼è§£æå¤±è´¥
                            console.log(Lang.i18n('msg_jsonResolveFiled'));
                            return;
                        }
                        let features = this._formatGeoJSON(data.content);
                        results.result.features = {
                            type: data.content.type,
                            features
                        };

                    } else if (data.type === 'EXCEL' || data.type === 'CSV') {
                        let features = this._excelData2Feature(data.content);
                        results.result.features = {
                            type: 'FeatureCollection',
                            features
                        };
                    }
                    success(results, 'content');
                }
            }, this).catch(error => {
                console.log(error);
                me._fireFailedEvent(error);
            });
    }

    /**
     * @private
     * @function SuperMap.Widgets.ChartModel.prototype._getDataSource
     * @description è·åæ°æ®æºååæ°æ®éåã
     * @param {string} serviceType æå¡ç±»å
     * @param {string} address å°å
     * @param {Callbacks} success - getdatachartã
     * @return{array} [æ°æ®æºå:æ°æ®éå]
     * @return{string} å¾å±å
     */
    getDatafromRest(serviceType, address, success) {
        let me = this,
            withCredentials = this.datasets.withCredentials;
        if (serviceType === 'RESTDATA') {
            let url = `${address}/data/datasources`,
                sourceName, datasetName;
            // è¯·æ±è·åæ°æ®æºå
            FetchRequest.get(url, null, {
                withCredentials
            }).then(response => {
                return response.json()
            }).then(data => {
                sourceName = data.datasourceNames[0];
                url = `${address}/data/datasources/${sourceName}/datasets`;
                // è¯·æ±è·åæ°æ®éå
                FetchRequest.get(url, null, {
                    withCredentials
                }).then(response => {
                    return response.json()
                }).then(data => {
                    datasetName = data.datasetNames[0];
                    // è¯·æ±restdataæå¡
                    me.getDatafromRestData(`${address}/data`, [sourceName + ':' + datasetName], success);
                    return [sourceName + ':' + datasetName]
                }).catch(function (error) {
                    me._fireFailedEvent(error);
                })
            }).catch(function (error) {
                me._fireFailedEvent(error);
            });
        } else {
            // å¦ææ¯å°å¾æå¡
            let url = `${address}/maps`,
                mapName, layerName, path;
            // è¯·æ±è·åå°å¾å
            FetchRequest.get(url, null, {
                withCredentials
            }).then(response => {
                return response.json()
            }).then(data => {
                mapName = data[0].name;
                path = data[0].path;
                url = url = `${address}/maps/${mapName}/layers`;
                // è¯·æ±è·åå¾å±å
                FetchRequest.get(url, null, {
                    withCredentials
                }).then(response => {
                    return response.json()
                }).then(data => {
                    layerName = data[0].subLayers.layers[0].caption;
                    // è¯·æ±restmapæå¡
                    me.getDatafromRestMap(layerName, path, success)
                    return layerName;
                }).catch(function (error) {
                    me._fireFailedEvent(error);
                })
            }).catch(function (error) {
                me._fireFailedEvent(error);
            });

        }
    }

    /**
     * @private
     * @function SuperMap.Widgets.ChartModel.prototype.getDatafromRestData
     * @description è¯·æ±restdataæå¡
     * @param {String} url
     * @param {Array<string>} dataSource [æ°æ®æºå:æ°æ®éå]
     * @param {Callbacks} success - getdatachartã
     */
    getDatafromRestData(url, dataSource, success) {
        let me = this;
        this.datasets.queryInfo.attributeFilter = this.datasets.queryInfo.attributeFilter || 'SmID>0';
        this._getFeatureBySQL(url, dataSource, this.datasets.queryInfo, (results) => {
            // æ­¤æ¶çfeatureså·²ç»å¤çægeojsonäº
            success(results, 'RESTDATA');
        }, (error) => {
            console.log(error);
            me._fireFailedEvent(error);
        });
    }

    /**
     * @private
     * @function SuperMap.Widgets.ChartModel.prototype.getDatafromRestMap
     * @description è¯·æ±restmapæå¡
     * @param {String} dataSource layerName
     * @param {String} path - mapæå¡å°åã
     * @param {Callbacks} success - getdatachartã
     */
    getDatafromRestMap(dataSource, path, success) {
        let me = this;
        this.datasets.queryInfo.attributeFilter = this.datasets.queryInfo.attributeFilter || 'smid=1';
        this._queryFeatureBySQL(path, dataSource, this.datasets.queryInfo, null, null, (results) => {
            // let features = result.result.recordsets[0].features;
            success(results, 'RESTMAP');
        }, (error) => {
            console.log(error);
            me._fireFailedEvent(error);
        })
    }

    /**
     * @private
     * @function SuperMap.Widgets.ChartModel.prototype._getFeatureBySQL
     * @description éè¿ sql æ¹å¼æ¥è¯¢æ°æ®ã
     */
    _getFeatureBySQL(url, datasetNames, queryInfo, processCompleted, processFaild) {
        let getFeatureParam, getFeatureBySQLService, getFeatureBySQLParams;
        let params = {
            name: datasetNames.join().replace(":", "@")
        }
        Object.assign(params, queryInfo);
        getFeatureParam = new FilterParameter_FilterParameter(params);
        getFeatureBySQLParams = new GetFeaturesBySQLParameters_GetFeaturesBySQLParameters({
            queryParameter: getFeatureParam,
            datasetNames: datasetNames,
            fromIndex: 0,
            toIndex: 100000,
            returnContent: true
        });
        let options = {
            eventListeners: {
                processCompleted: getFeaturesEventArgs => {
                    processCompleted && processCompleted(getFeaturesEventArgs);
                },
                processFailed: e => {
                    processFaild && processFaild(e);
                }
            }
        };
        getFeatureBySQLService = new GetFeaturesBySQLService_GetFeaturesBySQLService(url, options);
        getFeatureBySQLService.processAsync(getFeatureBySQLParams);
    }

    /**
     * @private
     * @function SuperMap.Widgets.ChartModel.prototype._queryFeatureBySQL
     * @description éè¿ sql æ¹å¼æ¥è¯¢æ°æ®ã
     */
    _queryFeatureBySQL(url, layerName, queryInfo, fields, epsgCode, processCompleted, processFaild, startRecord, recordLength, onlyAttribute) {
        var queryParam, queryBySQLParams;
        var filterParams = {
            name: layerName
        }
        Object.assign(filterParams, queryInfo);
        queryParam = new FilterParameter_FilterParameter(filterParams);
        if (fields) {
            queryParam.fields = fields;
        }
        var params = {
            queryParams: [queryParam]
        };
        if (onlyAttribute) {
            params.queryOption = QueryOption.ATTRIBUTE;
        }
        startRecord && (params.startRecord = startRecord);
        recordLength && (params.expectCount = recordLength);
        if (epsgCode) {
            params.prjCoordSys = {
                epsgCode: epsgCode
            }
        }
        queryBySQLParams = new QueryBySQLParameters_QueryBySQLParameters(params);
        this._queryBySQL(url, queryBySQLParams, data => {
            data.type === 'processCompleted' ? processCompleted(data) : processFaild(data)
        });
    }
    /**
     * @function SuperMap.Widgets.ChartModel.prototype._queryBySQL
     * @description  SQL æ¥è¯¢æå¡ã
     * @param {SuperMap.QueryBySQLParameters} params - SQL æ¥è¯¢ç¸å³åæ°ç±»ã
     * @param {RequestCallback} callback - åè°å½æ°ã
     * @param {SuperMap.DataFormat} [resultFormat=SuperMap.DataFormat.GEOJSON] - è¿åç»æç±»åã
     */
    _queryBySQL(url, params, callback, resultFormat) {
        var me = this;
        var queryBySQLService = new QueryBySQLService_QueryBySQLService(url, {
            eventListeners: {
                scope: me,
                processCompleted: callback,
                processFailed: callback
            },
            format: me._processFormat(resultFormat)
        });

        queryBySQLService.processAsync(params);
    }
    /**
     * @function SuperMap.Widgets.ChartModel.prototype._processFormat
     * @description å°æ°æ®è½¬æ¢ægeojsonã
     * @param {object} resultFormat - è¿åç»æéã
     * @return {object} [resultFormat=SuperMap.DataFormat.GEOJSON] - è¿åç»æç±»åã
     */
    _processFormat(resultFormat) {
        return (resultFormat) ? resultFormat : DataFormat.GEOJSON;
    }

    /**
     * @private
     * @function SuperMap.Widgets.ChartModel.prototype._formatGeoJSON
     * @description æ ¼å¼ GeoJSONã
     * @param {GeoJSON} data - GeoJSON æ°æ®ã
     */
    _formatGeoJSON(data) {
        let features = data.features;
        features.forEach((row, index) => {
            row.properties['index'] = index;
        })
        return features;
    }

    /**
     * @private
     * @description å° csv å xls æä»¶åå®¹è½¬æ¢æ geojson
     * @function SuperMap.Widgets.ChartModel.prototype._excelData2Feature
     * @param content  æä»¶åå®¹
     * @param layerInfo  å¾å±ä¿¡æ¯
     * @returns {Array}  featureçæ°ç»éå
     */
    _excelData2Feature(dataContent) {
        let fieldCaptions = dataContent.colTitles;
        //ä½ç½®å±æ§å¤ç
        let xfieldIndex = -1,
            yfieldIndex = -1;
        for (let i = 0, len = fieldCaptions.length; i < len; i++) {
            if (FileReaderUtil.isXField(fieldCaptions[i])) {
                xfieldIndex = i;
            }
            if (FileReaderUtil.isYField(fieldCaptions[i])) {
                yfieldIndex = i;
            }
        }

        // feature æå»ºåææ¯æåæ ç³» 4326/3857
        let features = [];

        for (let i = 0, len = dataContent.rows.length; i < len; i++) {
            let row = dataContent.rows[i];

            let x = Number(row[xfieldIndex]),
                y = Number(row[yfieldIndex]);
            //å±æ§ä¿¡æ¯
            let attributes = {};
            for (let index in dataContent.colTitles) {
                let key = dataContent.colTitles[index];
                attributes[key] = dataContent.rows[i][index];
            }
            attributes['index'] = i + '';
            //ç®åcsv åªæ¯æå¤çç¹ï¼æä»¥åçæç¹ç±»åç geojson
            let feature = {
                "type": "Feature",
                "geometry": {
                    "type": "Point",
                    "coordinates": [x, y]
                },
                "properties": attributes
            };
            features.push(feature);
        }
        return features;
    }
    /**
     * @private
     * @description è¯·æ±æ°æ®å¤±è´¥çäºä»¶
     * @function SuperMap.Widgets.ChartModel.prototype._fireFailedEvent
     * @param {object} error  éè¯¯ä¿¡æ¯
     */
    _fireFailedEvent(error) {
        let errorData = error ? {
            error,
            message: Lang.i18n('msg_getdatafailed')
        } : {
            message: Lang.i18n('msg_getdatafailed')
        };
        /**
         * @event SuperMap.Widgets.Chart#getdatafailed
         * @description çå¬å°è·åæ°æ®å¤±è´¥äºä»¶åè§¦å
         * @property {Object} error  - äºä»¶å¯¹è±¡ã
         */
        this.events.triggerEvent("getdatafailed", errorData);
    }
}
// CONCATENATED MODULE: ./src/common/widgets/chart/ChartViewModel.js
/* CopyrightÂ© 2000 - 2019 SuperMap Software Co.Ltd. All rights reserved.
 * This program are made available under the terms of the Apache License, Version 2.0
 * which accompanies this distribution and is available at http://www.apache.org/licenses/LICENSE-2.0.html.*/




/**
 * @class SuperMap.Widgets.ChartViewModel
 * @classdesc å¾è¡¨å¾®ä»¶åè½ç±»
 * @category Widgets Chart
 * @version 10.X.X
 * @param {Object} options - å¯éåæ°ã
 * @param {string} options.type - å¾è¡¨ç±»åã
 * @param {SuperMap.Widgets.Chart.Datasets} options.datasets - æ°æ®æ¥æºã
 * @param {Array.<Object>} options.chartOptions - å¾è¡¨å¯éåæ°ã
 * @param {Array.<Object>} options.chartOptions.xAxis - å¾è¡¨Xè½´ã
 * @param {string} options.chartOptions.xAxis.field - å¾è¡¨Xè½´å­æ®µåã
 * @param {string} options.chartOptions.xAxis.name - å¾è¡¨Xè½´åç§°ã
 * @param {Array.<Object>} options.chartOptions.yAxis - å¾è¡¨Yè½´ã
 * @param {string} options.chartOptions.yAxis.field - å¾è¡¨Yè½´å­æ®µåã
 * @param {string} options.chartOptions.yAxis.name - å¾è¡¨Yè½´åç§°ã
 * @fires SuperMap.Widgets.ChartViewModel#getdatafailed
 */

class ChartViewModel_ChartViewModel {

    constructor(options) {
        this.datasets = options.datasets;
        this.xField = [];
        this.yField = [];
        this.grid = {
            top: "50px",
            bottom: "50px",
            left: "50px",
            right: "60px"
        };
        this.chartType = options.type || "bar";
        this._initXYField(options.chartOptions);
        this.EVENT_TYPES = ["getdatafailed"];
        this.events = new Events_Events(this, null, this.EVENT_TYPES);
    }

    /**
     * @function SuperMap.Widgets.ChartViewModel.prototype._initXYField
     * @description åå§åXYå­æ®µã
     * @private
     * @param {Object} chartOptions - optionséçå¾è¡¨åæ°
     */
    _initXYField(chartOptions) {
        let me = this;
        if (chartOptions && chartOptions.length > 0) {
            chartOptions.forEach(function (option) {
                if (option.xAxis) {
                    me.xField.push({
                        field: option.xAxis.field,
                        name: option.xAxis.name
                    });
                }
                if (option.yAxis) {
                    me.yField.push({
                        field: option.yAxis.field,
                        name: option.yAxis.name
                    });
                }
            });
        }
    }
    /**
     * @function SuperMap.Widgets.ChartViewModel.prototype.getDatasetInfo
     * @description è·å¾æ°æ®éæ°æ®ã
     * @param {function} success - æååè°å½æ°
     */
    getDatasetInfo(success) {
        this.createChart = success;
        if (this.datasets && this._checkUrl(this.datasets.url)) {
            this.chartModel = new ChartModel_ChartModel(this.datasets);
            if(this.datasets.type === 'iServer'){
                this.chartModel.getDatasetInfo(this._getDatasetInfoSuccess.bind(this));
            }else if(this.datasets.type === 'iPortal'){
                this.chartModel.getDataInfoByIptl(this._getDataInfoSuccess.bind(this));
            }
            /**
             * @event SuperMap.Widgets.ChartViewModel#getdatafailed
             * @description çå¬å°è·åæ°æ®å¤±è´¥äºä»¶åè§¦å
             * @property {Object} error  - äºä»¶å¯¹è±¡ã
             */
            this.chartModel.events.on({"getdatafailed":  (error) => {
                this.events.triggerEvent("getdatafailed", error)
            }});
        }
    }

    /**
     * @function SuperMap.Widgets.ChartViewModel.prototype._getDatasetInfoSuccess
     * @description æååè°å½æ°ã
     * @private
     * @param {Object} results - æ°æ®éä¿¡æ¯
     */
    _getDatasetInfoSuccess(results) {
        let datasetUrl = this.datasets.url;
        //å¤æ­æå¡ä¸ºå°å¾æå¡ æè æ°æ®æå¡
        let restIndex = datasetUrl.indexOf("rest");
        if (restIndex > 0) {
            let index = datasetUrl.indexOf("/", restIndex + 5);
            let type = datasetUrl.substring(restIndex + 5, index);
            let dataUrl = datasetUrl.substring(0, restIndex + 4) + "/data";

            if (type === "maps") {
                let mapIndex = datasetUrl.indexOf("/", index + 1);
                let mapName = datasetUrl.substring(index + 1, mapIndex);
                dataUrl = datasetUrl.substring(0, restIndex + 4) + "/maps/" + mapName;
                results.result.dataUrl = dataUrl;
                this._getLayerFeatures(results);
            } else if (type === "data") {
                results.result.dataUrl = dataUrl;
                this._getDataFeatures(results);
            }
        }
    }

    /**
     * @function SuperMap.Widgets.ChartViewModel.prototype._getDataInfoSuccess
     * @description è¯·æ±iportalæ°æ®æåä¹åçåè°
     * @private
     */
    _getDataInfoSuccess(results, type) {
        let me = this;
        if(type === 'RESTMAP'){
            me._getChartDatasFromLayer(results);
        }else{
            me._getChartDatas(results);
        }
    }

    /**
     * @function SuperMap.Widgets.ChartViewModel.prototype._getDataFeatures
     * @description è¯·æ±æ°æ®éçæ°æ®ä¿¡æ¯
     * @private
     * @param {Object} results - æ°æ®éä¿¡æ¯
     */
    _getDataFeatures(results) {
        this.chartModel.getDataFeatures(results, this._getChartDatas.bind(this));
    }

    /**
     * @function SuperMap.Widgets.ChartViewModel.prototype._getLayerFeatures
     * @description è¯·æ±å¾å±çæ°æ®ä¿¡æ¯
     * @private
     * @param {Object} results - æ°æ®éä¿¡æ¯
     */
    _getLayerFeatures(results) {
        this.chartModel.getLayerFeatures(results, this._getChartDatasFromLayer.bind(this));
    }

    /**
     * @function SuperMap.Widgets.ChartViewModel.prototype._getChartDatas
     * @description å°è¯·æ±åæ¥çæ°æ®è½¬æ¢ä¸ºå¾è¡¨æéçæ°æ®æ ¼å¼
     * @private
     * @param {Object} results - æ°æ®è¦ç´ ä¿¡æ¯
     */
    _getChartDatas(results) {
        if (results) {
            // æ°æ®æ¥èªrestdata---results.result.features
            this.features = results.result.features;
            let features = this.features.features;
            let data = {};
            if (features.length) {
                let feature = features[0];
                let attrFields = [],
                    itemTypes = [];
                for (let attr in feature.properties) {
                    attrFields.push(attr);
                    itemTypes.push(this._getDataType(feature.properties[attr]));
                }
                data = {
                    features,
                    fieldCaptions: attrFields,
                    fieldTypes: itemTypes,
                    fieldValues: []
                }
                for (let m in itemTypes) {
                    let fieldValue = [];

                    for (let j in features) {
                        let feature = features[j];
                        let caption = data.fieldCaptions[m];
                        let value = feature.properties[caption];
                        fieldValue.push(value);
                    }
                    data.fieldValues.push(fieldValue);
                }
                this.createChart(data);
            }
        }
    }
    /**
     * @function SuperMap.Widgets.ChartViewModel.prototype._getChartDatasFromLayer
     * @description å°è¯·æ±åæ¥çæ°æ®è½¬æ¢ä¸ºå¾è¡¨æéçæ°æ®æ ¼å¼
     * @private
     * @param {Object} results - å¾å±æ°æ®è¦ç´ ä¿¡æ¯
     */
    _getChartDatasFromLayer(results) {
        if (results.result.recordsets) {
            let recordsets = results.result.recordsets[0];
            let features = recordsets.features.features;
            this.features = recordsets.features;
            let data = {};
            if (features.length) {
                data = {
                    features: recordsets.features,
                    fieldCaptions: recordsets.fieldCaptions,
                    fieldTypes: recordsets.fieldTypes,
                    fieldValues: []
                }
                for (let m in data.fieldCaptions) {
                    let fieldValue = [];

                    for (let j in features) {
                        let feature = features[j];
                        let caption = data.fieldCaptions[m];
                        let value = feature.properties[caption];
                        fieldValue.push(value);
                    }
                    data.fieldValues.push(fieldValue);
                }
                this.createChart(data);
            }
        }
    }

    /**
     * @function SuperMap.Widgets.ChartViewModel.prototype._createChartOptions
     * @description åå»ºå¾è¡¨æéåæ°
     * @private
     * @param {Object} data - å¾è¡¨æ°æ®
     */
    _createChartOptions(data) {
        this.calculatedData = this._createChartDatas(data);
        return this.updateChartOptions(this.chartType);
    }

    /**
     * @function SuperMap.Widgets.ChartViewModel.prototype.changeType
     * @description æ¹åå¾è¡¨ç±»å
     * @param {string} type - å¾è¡¨ç±»å
     */
    changeType(type) {
        if (type !== this.chartType) {
            this.chartType = type;
            return this.updateChartOptions(this.chartType);
        }
    }

    /**
     * @function SuperMap.Widgets.ChartViewModel.prototype.updateData
     * @description æ¹åå¾è¡¨ç±»å
     * @param {SuperMap.Widgets.Chart.Datasets} datasets - æ°æ®æ¥æº
     * @param {function} success æååè°å½æ°
     */
    updateData(datasets, chartOption, success) {
        this.updateChart = success;
        this.xField = [];
        this.yField = [];
        this._initXYField(chartOption);
        // typeçè®¾ç½®é»è®¤å¼
        datasets.type = datasets.type || 'iServer';
        // withCredentialsçè®¾ç½®é»è®¤å¼
        datasets.withCredentials = datasets.withCredentials || false;
        this.datasets = datasets;
        this.getDatasetInfo(this._updateDataSuccess.bind(this));
    }

    /**
     * @function SuperMap.Widgets.ChartViewModel.prototype._updateDataSuccess
     * @description æ¹åå¾è¡¨ç±»å
     * @private
     * @param {Object} data - å¾è¡¨æ°æ®
     */
    _updateDataSuccess(data) {
        let options = this._createChartOptions(data);
        this.updateChart(options);
    }

    /**
     * @function SuperMap.Widgets.ChartViewModel.prototype.updateChartOptions
     * @description æ´æ°å¾è¡¨æéåæ°
     * @param {string} type - å¾è¡¨ç±»å
     * @param {Object} style - å¾è¡¨æ ·å¼
     */
    updateChartOptions(type, style) {
        if (this.calculatedData) {
            let grid = this.grid;
            let series = this._createChartSeries(this.calculatedData, type);
            let datas = [];
            for (let i in this.calculatedData.XData) {
                datas.push({
                    value: this.calculatedData.XData[i].fieldsData
                });
            }
            let xAxis = {
                type: "category",
                name: this.xField[0].name || "X",
                data: datas,
                nameTextStyle: {
                    color: '#fff',
                    fontSize: 14
                },
                splitLine: {
                    show: false
                },
                axisLine: {
                    lineStyle: {
                        color: '#eee'
                    }
                }
            }
            let yAxis = {
                type: "value",
                name: this.yFieldName || "Y",
                data: {},
                nameTextStyle: {
                    color: '#fff',
                    fontSize: 14
                },
                splitLine: {
                    show: false
                },
                axisLine: {
                    lineStyle: {
                        color: '#eee'
                    }
                }
            }
            let tooltip = {
                formatter: '{b0}: {c0}'
            };
            let backgroundColor = '#404a59';
            if (style) {
                if (style.grid) {
                    grid = style.grid;
                }
                if (style.tooltip) {
                    tooltip = style.tooltip;
                }
                if (style.backgroundColor) {
                    backgroundColor = style.backgroundColor;
                }
            }
            return {
                backgroundColor: backgroundColor,
                grid: grid,
                series: series,
                xAxis: xAxis,
                yAxis: yAxis,
                tooltip: tooltip
            }
        }
    }

    /**
     * @function SuperMap.Widgets.ChartViewModel.prototype._createChartDatas
     * @description æå»ºå¾è¡¨æ°æ®
     * @private
     * @param {Object} data - æºæ°æ®
     */
    _createChartDatas(data) {
        let fieldIndex = 0, yfieldIndexs = [];
        let fieldCaptions = data.fieldCaptions;
        let me = this;
        //X
        fieldCaptions.forEach(function (field, index) {
            if (me.xField[0] && field === me.xField[0].field) {
                fieldIndex = index;
            }
        });
        //Y
        this.yFieldName = "";
        this.yField.forEach(function (value, index) {
            if (index !== 0) {
                me.yFieldName = me.yFieldName + ",";
            }
            me.yFieldName = me.yFieldName + value.name;
            fieldCaptions.forEach(function (field, index) {
                if (field === value.field) {
                    yfieldIndexs.push(index);
                }
            });
        })
        let datas = this._getAttrData(data, fieldIndex);
        let yDatas = [];
        if (yfieldIndexs.length > 0) {
            yfieldIndexs.forEach(function (yfieldIndex) {
                let yData = [];
                for (let i in data.fieldValues[yfieldIndex]) {
                    yData.push({
                        value: data.fieldValues[yfieldIndex][i]
                    });
                }
                yDatas.push(yData);
            });
        } else {                     //æªæå®Yå­æ®µæ¶ï¼yè½´è®¡æ°
            let YData = [],
                XData = [],
                len = datas.length;

            //è®¡ç®Xè½´ï¼Yè½´æ°æ®ï¼å¹¶å»é
            for (let i = 0; i < len; i++) {
                let isSame = false;
                for (let j = 0, leng = XData.length; j < leng; j++) {
                    if (datas[i].fieldsData === XData[j].fieldsData) {
                        YData[j].value++;
                        XData[j].recordIndexs.push(i);
                        isSame = true;
                        break;
                    }
                }
                if (!isSame) {
                    if (datas[i].fieldsData) {
                        XData.push({ fieldsData: datas[i].fieldsData, recordIndexs: [i] });
                        YData.push({ value: 1 });
                    }
                }
            }
            datas = XData;
            yDatas = [YData];
        }
        return {
            XData: datas,
            YData: yDatas
        }
    }

    /**
     * @function SuperMap.Widgets.ChartViewModel.prototype._getAttrData
     * @description éä¸­å­æ®µæ°æ®
     * @private
     * @param {Object} datacontent - å¾è¡¨æ°æ®
     * @param {number} index - å­æ®µç´¢å¼
     */
    _getAttrData(datacontent, index) {
        if (index === 0) {
            this.xField = [{
                field: datacontent.fieldCaptions[index],
                name: datacontent.fieldCaptions[index]
            }];
        }
        let fieldsDatas = [];
        for (let i = 0, len = datacontent.fieldValues[index].length; i < len; i++) {
            let value = datacontent.fieldValues[index][i];
            fieldsDatas.push({
                recordIndexs: i,
                fieldsData: value
            });
        }
        return fieldsDatas;
    }

    /**
     * @function SuperMap.Widgets.ChartViewModel.prototype._createChartSeries
     * @description å¾è¡¨æ°æ®
     * @private
     * @param {Object} calculatedData - å¾è¡¨æ°æ®
     * @param {string} chartType - å¾è¡¨ç±»å
     */
    _createChartSeries(calculatedData, chartType) {
        let series = [];
        let yDatas = calculatedData.YData;
        yDatas.forEach(function (yData) {
            let value = 0;
            let serieData = [];
            for (let data of yData) {
                value = data.value;
                serieData.push({
                    value: value
                });
            }
            let serie = {
                type: chartType,
                data: serieData,
                name: "y"
            };

            series.push(serie);
        });
        return series;
    }

    /**
     * @function SuperMap.Widgets.ChartViewModel.prototype._isDate
     * @description å¤æ­æ¯å¦ä¸ºæ¥æ
     * @private
     * @param {string} data - å­ç¬¦ä¸²
     */
    _isDate(data) {
        let reg = /((^((1[8-9]\d{2})|([2-9]\d{3}))([-\/\._])(10|12|0?[13578])([-\/\._])(3[01]|[12][0-9]|0?[1-9])$)|(^((1[8-9]\d{2})|([2-9]\d{3}))([-\/\._])(11|0?[469])([-\/\._])(30|[12][0-9]|0?[1-9])$)|(^((1[8-9]\d{2})|([2-9]\d{3}))([-\/\._])(0?2)([-\/\._])(2[0-8]|1[0-9]|0?[1-9])$)|(^([2468][048]00)([-\/\._])(0?2)([-\/\._])(29)$)|(^([3579][26]00)([-\/\._])(0?2)([-\/\._])(29)$)|(^([1][89][0][48])([-\/\._])(0?2)([-\/\._])(29)$)|(^([2-9][0-9][0][48])([-\/\._])(0?2)([-\/\._])(29)$)|(^([1][89][2468][048])([-\/\._])(0?2)([-\/\._])(29)$)|(^([2-9][0-9][2468][048])([-\/\._])(0?2)([-\/\._])(29)$)|(^([1][89][13579][26])([-\/\._])(0?2)([-\/\._])(29)$)|(^([2-9][0-9][13579][26])([-\/\._])(0?2)([-\/\._])(29)$))/ig;
        return reg.test(data);
    }

    /**
     * @function SuperMap.Widgets.ChartViewModel.prototype._isNumber
     * @description å¤æ­æ¯å¦ä¸ºæ°å¼
     * @private
     * @param {string} data - å­ç¬¦ä¸²
     */
    _isNumber(data) {
        let mdata = Number(data);
        if (mdata === 0) {
            return true;
        }
        return !isNaN(mdata);
    }

    /**
     * @function SuperMap.Widgets.ChartViewModel.prototype._getDataType
     * @description å¤æ­æ°æ®çç±»å
     * @private
     * @param {string} data - å­ç¬¦ä¸²
     */
    _getDataType(data) {
        if (data !== null && data !== undefined && data !== '') {
            if (this._isDate(data)) {
                return "DATE";
            }
            if (this._isNumber(data)) {
                return "NUMBER";
            }
        }
        return "STRING";
    }

    /**
     * @function SuperMap.Widgets.ChartViewModel.prototype._checkUrl
     * @description æ£æ¥urlæ¯å¦ç¬¦åè¦æ±
     * @private
     * @param {string} url
     */
    _checkUrl(url) {
        let match;
        if (url === '' || !this._isMatchUrl(url)) {
            match = false;
        } else if (/^http[s]?:\/\/localhost/.test(url) || /^http[s]?:\/\/127.0.0.1/.test(url)) {
            //ä¸æ¯å®éåå
            match = false;
        } else {
            match = true;
        }
        return match;
    }

    /**
     * @function SuperMap.Widgets.ChartViewModel.prototype._isMatchUrl
     * @description å¤æ­è¾å¥çå°åæ¯å¦ç¬¦åå°åæ ¼å¼
     * @private
     * @param {string} str - url
     */
    _isMatchUrl(str) {
        var reg = new RegExp('(https?|http|file|ftp)://[-A-Za-z0-9+&@#/%?=~_|!:,.;]+[-A-Za-z0-9+&@#/%=~_|]');
        return reg.test(str);
    }

    /**
     * @function SuperMap.Widgets.ChartViewModel.prototype.getStyle
     * @description è·åå¾è¡¨æ ·å¼ã
     */
    getStyle() {
        let style = {
            grid: this.grid,
            tooltip: this.tooltip,
            backgroundColor: this.backgroundColor
        }
        return style;
    }

    /**
     * @function SuperMap.Widgets.ChartViewModel.prototype.getFeatures
     * @description è·åå°å¾æå¡ï¼æ°æ®æå¡è¯·æ±è¿åçæ°æ®ã
     */
    getFeatures() {
        return this.features;
    }

    /**
     * @function SuperMap.Widgets.ChartViewModel.prototype.setStyle
     * @description è®¾ç½®å¾è¡¨æ ·å¼ã
     * @param {Object} style - å¾è¡¨æ ·å¼
     */
    setStyle(style) {
        return this.updateChartOptions(this.chartType, style);
    }
}
SuperMap.Widgets.ChartViewModel = ChartViewModel_ChartViewModel;
// CONCATENATED MODULE: ./src/common/widgets/chart/ChartView.js
/* CopyrightÂ© 2000 - 2019 SuperMap Software Co.Ltd. All rights reserved.
 * This program are made available under the terms of the Apache License, Version 2.0
 * which accompanies this distribution and is available at http://www.apache.org/licenses/LICENSE-2.0.html.*/





/**
 * @class SuperMap.Widgets.Chart
 * @classdesc å¾è¡¨å¾®ä»¶
 * @version 9.1.2
 * @param {string} domID - å¾è¡¨domåç´ IDã
 * @param {Object} options - å¯éåæ°ã
 * @param {string} options.type - å¾è¡¨ç±»åã
 * @param {SuperMap.Widgets.Chart.Datasets} options.datasets - æ°æ®æ¥æº
 * @param {Array.<Object>} options.chartOptions - å¾è¡¨å¯éåæ°ã
 * @param {Array.<Object>} options.chartOptions.xAxis - å¾è¡¨Xè½´ã
 * @param {string} options.chartOptions.xAxis.field - å¾è¡¨Xè½´å­æ®µåã
 * @param {string} options.chartOptions.xAxis.name - å¾è¡¨Xè½´åç§°ã
 * @param {Array.<Object>} options.chartOptions.yAxis - å¾è¡¨Yè½´ã
 * @param {string} options.chartOptions.yAxis.field - å¾è¡¨Yè½´å­æ®µåã
 * @param {string} options.chartOptions.yAxis.name - å¾è¡¨Yè½´åç§°ã
 * @category Widgets Chart
 */
/**
 * @typedef {Object} SuperMap.Widgets.Chart.Datasets  - æ°æ®æ¥æº
 * @property {string} [type = 'iServer'] - æå¡ç±»å iServer, iPortalã
 * @property {string} url - æå¡urlå°åã
 * @property {boolean} [withCredentials = false] - è®¾ç½®è¯·æ±æ¯å¦å¸¦cookie
 * @property {SuperMap.FilterParameter} queryInfo - æ¥è¯¢æ¡ä»¶
 */
class ChartView_ChartView {

    constructor(domID, options) {
        this.domID = domID;
        this.chartType = options.type || "bar";
        // è®¾ç½®options.datasets.typeçé»è®¤å¼æ¯iServer
        options.datasets.type = options.datasets.type || 'iServer';
        // è®¾ç½®withCredentialsçé»è®¤å¼ä¸ºfalse
        options.datasets.withCredentials = options.datasets.withCredentials || false;
        this.viewModel = new ChartViewModel_ChartViewModel(options);
        //æ·»å æ§ä»¶ã
        this._fillDataToView();
    }

    /**
     * @function SuperMap.Widgets.Chart.prototype.onAdd
     * @description åå»ºå¾è¡¨ä¹åæååè°
     * @param {function} addChart - åè°å½æ°
     */
    onAdd(addChart) {
        this.addChart = addChart;
    }

    /**
     * @function SuperMap.Widgets.Chart.prototype._fillDataToView
     * @description å¡«åæ°æ®å° viewã
     * @private
     */
    _fillDataToView() {
        let messageboxs = new MessageBox();
        //iclient9 ç»å®createChartäºä»¶æååè°
        this.viewModel.getDatasetInfo(this._createChart.bind(this));
        this.viewModel.events.on({
            "getdatafailed": (error) => {
                messageboxs.showView(error.message);
            }
        });
    }

    /**
     * @function SuperMap.Widgets.Chart.prototype.getStyle
     * @description è·åå¾è¡¨æ ·å¼ã
     */
    getStyle() {
        return this.viewModel.getStyle()
    }

    /**
     * @function SuperMap.Widgets.Chart.prototype.getFeatures
     * @description è·åå°å¾æå¡ï¼æ°æ®æå¡è¯·æ±è¿åçæ°æ®ã
     */
    getFeatures() {
        return this.viewModel.getFeatures();
    }

    /**
     * @function SuperMap.Widgets.Chart.prototype.setStyle
     * @description è®¾ç½®å¾è¡¨æ ·å¼ã
     * @param {Object} style - å¾è¡¨æ ·å¼ åèEcharts-optionsæ ·å¼è®¾ç½®
     */
    setStyle(style) {
        let newOptions = this.viewModel.setStyle(style);
        this._updateChart(newOptions);
    }

    /**
     * @function SuperMap.Widgets.Chart.prototype.changeType
     * @description æ¹åå¾è¡¨ç±»å
     * @param {string} type - å¾è¡¨ç±»å
     */
    changeType(type) {
        if (this.chartType !== type) {
            this.chartType = type;
            let newOptions = this.viewModel.changeType(type);
            this._updateChart(newOptions);
        }
    }

    /**
     * @function SuperMap.Widgets.Chart.prototype.updateData
     * @description æ´æ°å¾è¡¨æ°æ®
     * @param {SuperMap.Widgets.Chart.Datasets} datasets - æ°æ®æ¥æº
     * @param {Object} chartOption - X,Yè½´ä¿¡æ¯
     */
    updateData(datasets, chartOption) {
        let me = this;
        this.viewModel.updateData(datasets, chartOption, function (options) {
            me._updateChart(options);
            if (me.addChart) {
                me.addChart();
            }
        });
    }

    /**
     * @function SuperMap.Widgets.Chart.prototype._createChart
     * @description åå»ºå¾è¡¨
     * @private
     * @param {Object} data - å¾è¡¨æ°æ®
     */
    _createChart(data) {
        this.echart = external_function_try_return_echarts_catch_e_return_default.a.init(
            document.getElementById(this.domID),
            null, {
                renderer: "canvas"
            }
        )
        let options = this.viewModel._createChartOptions(data);
        this.echart.setOption(options);
        if (this.addChart) {
            this.addChart();
        }
    }

    /**
     * @function SuperMap.Widgets.Chart.prototype._updateChart
     * @description æ´æ°å¾è¡¨
     * @private
     * @param {Object} options - å¾è¡¨åæ°
     */
    _updateChart(options) {
        if (this.echart) {
            this.echart.clear();
            this.echart.setOption(options);
        }
    }
}

SuperMap.Widgets.Chart = ChartView_ChartView;
// CONCATENATED MODULE: ./src/common/widgets/templates/TemplateBase.js
/* CopyrightÂ© 2000 - 2019 SuperMap Software Co.Ltd. All rights reserved.
 * This program are made available under the terms of the Apache License, Version 2.0
 * which accompanies this distribution and is available at/r* http://www.apache.org/licenses/LICENSE-2.0.html.*/


/**
 * @class SuperMap.Widgets.TemplateBase
 * @classdesc å¾®ä»¶å¬ç¨ç»ä»¶ç¶ç±»ï¼ç¨äºçº¦æç»ä¸å°è£çå¬ç¨ç»ä»¶ç»æã
 * @version 9.1.1
 * @param {Object} options - ç»ä»¶éç½®åæ°ã
 * @param {string} options.id - ç»ä»¶ dom åç´  idã
 * @category Widgets Common
 */
class TemplateBase {
    constructor(options) {
        options = options ? options : {};
        /**
         * @member {string} [SuperMap.Widgets.TemplateBase.prototype.id=null]
         * @description  ç»ä»¶ dom åç´  idã
         */
        this.id = options.id ? options.id : null;

        /**
         * @member {Element} [SuperMap.Widgets.TemplateBase.prototype.rootContainer=null]
         * @description  ç»ä»¶ dom åç´ å¯¹è±¡ã
         */
        this.rootContainer = null;
    }

    /**
     * @function SuperMap.Widgets.TemplateBase.prototype.getElement
     * @description è·åå½åç»ä»¶åç´ å¯¹è±¡ã
     * @return {Element}
     */
    getElement() {
        //todo å¶å®æè§åè¿éç»ç»ä»¶è®¾ç½®ä¸å¤ªåç
        if (this.id) {
            this.rootContainer.id = this.id;
        }

        return this.rootContainer;
    }

    /**
     * @function SuperMap.Widgets.TemplateBase.prototype._initView
     * @private
     * @description åå§åæ¨¡æ¿ã
     */
    _initView() {
        //å­ç±»å®ç°æ­¤æ¹æ³
    }

    /**
     * @function SuperMap.Widgets.TemplateBase.prototype.showView
     * @description æ¾ç¤ºç»ä»¶ã
     */
    showView() {
        this.rootContainer.hidden = false;
    }

    /**
     * @function SuperMap.Widgets.TemplateBase.prototype.closeView
     * @description éèç»ä»¶ã
     */
    closeView() {
        this.rootContainer.hidden = true;
    }
}

SuperMap.Widgets.TemplateBase = TemplateBase;
// CONCATENATED MODULE: ./src/common/widgets/templates/CommonContainer.js
/* CopyrightÂ© 2000 - 2019 SuperMap Software Co.Ltd. All rights reserved.
 * This program are made available under the terms of the Apache License, Version 2.0
 * which accompanies this distribution and is available at http://www.apache.org/licenses/LICENSE-2.0.html.*/



/**
 * @class SuperMap.Widgets.CommonContainer
 * @classdesc å¾®ä»¶ç»ä¸å¤æ¡ã
 * @version 9.1.1
 * @param {Object} options - ç»ä»¶å¯éåæ°ã
 * @param {string} options.id - ç»ä»¶ dom åç´  idã
 * @param {string} options.title - æ é¢ã
 * @category Widgets Common
 * @extends {SuperMap.Widgets.TemplateBase}
 */
class CommonContainer_CommonContainer extends TemplateBase {
    constructor(options) {
        super(options);
        let title = options.title ? options.title : "";
        this._initView(title);
    }

    /**
     * @private
     * @override
     */
    _initView(title) {
        const container = document.createElement("div");
        container.setAttribute("class", "widget-container");

        //title
        const titleContainer = document.createElement("div");
        titleContainer.setAttribute("class", "widget-title");
        const titleContent = document.createElement("div");
        titleContent.innerHTML = title;
        titleContainer.appendChild(titleContent);
        container.appendChild(titleContainer);
        //container
        const widgetContent = document.createElement("div");
        widgetContent.setAttribute("class", "widget-content");
        container.appendChild(widgetContent);
        this.content = widgetContent;

        this.rootContainer = container;
        return container;
    }

    /**
     * @function SuperMap.Widgets.CommonContainer.prototype.getContentElement
     * @description è·ååå®¹åç´ å®¹å¨
     */
    getContentElement() {
        return this.content;
    }

    /**
     * @function SuperMap.Widgets.CommonContainer.prototype.appendContent
     * @description å¡«ååå®¹åç´ 
     */
    appendContent(element) {
        this.content.appendChild(element);
    }
}

SuperMap.Widgets.CommonContainer = CommonContainer_CommonContainer;
// CONCATENATED MODULE: ./src/common/widgets/templates/Select.js
/* CopyrightÂ© 2000 - 2019 SuperMap Software Co.Ltd. All rights reserved.
 * This program are made available under the terms of the Apache License, Version 2.0
 * which accompanies this distribution and is available at http://www.apache.org/licenses/LICENSE-2.0.html.*/



/**
 * @class SuperMap.Widgets.Select
 * @classdesc å¾®ä»¶ç»ä¸çæå­ä¸ææ¡ã
 * @version 9.1.1
 * @param {Array.<string|Array>} options - éè¦åå»ºç Select æ°æ®æ°ç»ã
 * @param {string} options.id - ç»ä»¶ dom åç´  idã
 * @param {string} [options.labelName] - label åç§°ã
 * @param {Array.<string>} options.optionsArr - éè¦åå»ºç option æ°æ®æ°ç»ã
 * @param {Function} [options.optionsClickCb] - option ç¹å»äºä»¶åè°å½æ°ã
 * @extends {SuperMap.Widgets.TemplateBase}
 * @category Widgets Common
 */
class Select_Select extends TemplateBase {
    constructor(options) {
        super(options);
        this._initView(options);
    }

    _initView(options) {
        let selectTool = this._createElement('div', "widget-selecttool");

        if (options.labelName) {
            let label = this._createElement('label', 'widget-selecttool__lable--describe', selectTool);
            label.innerHTML = options.labelName;
        }

        let chartSelect = this._createElement('div', 'widget-selecttool--chart', selectTool);
        chartSelect.setAttribute('tabindex', '1');

        let selectName = this._createElement('div', "widget-selecttool__name", chartSelect);
        selectName.title = options.optionsArr[0];
        selectName.innerHTML = options.optionsArr[0];

        let chartTriangleBtn = this._createElement('div', 'widget-selecttool__trianglebtn--chart', chartSelect);
        let triangleBtn = this._createElement('div', 'widget-triangle-down-img', chartTriangleBtn);
        let selectContent = this._createElement('div', 'widget-selecttool__content', chartSelect);
        let scrollarea = this._createElement('div', 'widget-selecttool__content--chart', selectContent);
        let scrollareaContent = this._createElement('div', 'widget-selecttool__scrollarea__content', scrollarea);
        scrollareaContent.setAttribute('tabindex', '1');
        this.createOptions(scrollareaContent, options.optionsArr);
        this.optionClickEvent(scrollareaContent, selectName, options.optionsClickCb);
        // ä¸ææ¡æ¾ç¤º & éèäºä»¶
        this._selectClickEvent(chartSelect, selectContent, triangleBtn);
        this.rootContainer = selectTool;
    }

    /**
     * @function SuperMap.Widgets.Select.prototype.createOptions
     * @description åå»ºæå±ä¸ææ¡éé¡¹ã
     */
    createOptions(container, optionsArr) {
        for (let i in optionsArr) {
            let option = this._createElement('div', 'widget-selecttool__option', container);
            option.title = optionsArr[i];
            option.innerHTML = optionsArr[i];
        }
    }

    /**
     * @function SuperMap.Widgets.Select.prototype._selectClickEvent
     * @description select ç¹å»æ¾ç¤º&éèäºä»¶ã
     * @private
     */
    _selectClickEvent(eventElement, contentElement, triangleBtn) {
        eventElement.onclick = function (e) {
            if (contentElement.style.display === "block") {
                contentElement.style.display = "none";
                triangleBtn.className = "widget-triangle-down-img";
            } else {
                contentElement.style.display = "block";
                triangleBtn.className = "triangle-up-img";
            }
            e.preventDefault();
            e.stopPropagation();
        };
        eventElement.onmousedown = function (evt) {
            //console.log('dropdownbox onmousedown '+evt.target.className);
            if (evt.target !== this) {
                this.focus();
                evt.preventDefault();
                evt.stopPropagation()
            }
        };
        eventElement.onblur = function () {

            contentElement.style.display = "none";
            triangleBtn.className = "widget-triangle-down-img";
        }
    }

    /**
     * @function Select.prototype._createElement
     * @description éç¨åå»ºåç´ ã
     * @private
     */
    _createElement(tagName, className, parentEle) {
        let ele = document.createElement(tagName || 'div');
        className && ~~(ele.className = className);
        parentEle && parentEle.appendChild(ele);
        return ele;
    }

    /**
     * @function SuperMap.Widgets.Select.prototype.optionClickEvent
     * @description ä¸ææ¡ç option çç¹å»äºä»¶ã
     */
    optionClickEvent(optionEleArr, selectNameEle, optionsClickCb) {
        for (let i = 0; i < optionEleArr.children.length; i++) {
            let childEle = optionEleArr.children[i];
            childEle.onclick = function () {
                selectNameEle.innerHTML = childEle.innerHTML;
                selectNameEle.title = childEle.title;
                if (childEle.getAttribute('data-value')) {
                    selectNameEle.setAttribute('data-value', childEle.getAttribute('data-value'))
                }
                optionsClickCb && optionsClickCb(childEle);
            }
        }
    }
}

SuperMap.Widgets.Select = Select_Select;

// CONCATENATED MODULE: ./src/common/widgets/templates/DropDownBox.js
/* CopyrightÂ© 2000 - 2019 SuperMap Software Co.Ltd. All rights reserved.
 * This program are made available under the terms of the Apache License, Version 2.0
 * which accompanies this distribution and is available at http://www.apache.org/licenses/LICENSE-2.0.html.*/



/**
 * @class SuperMap.Widgets.DropDownBox
 * @classdesc å¾®ä»¶ç»ä¸çå¾çä¸ææ¡ã
 * @version 9.1.1
 * @param {Array.<Object>} optionsArr - éè¦åå»ºç option æ°æ®æ°ç»ã
 * @param {string} optionsArr.id - ç»ä»¶ dom åç´  idã
 * @param {string} optionsArr.title - ä¸ææ¡ titleã
 * @param {string} optionsArr.remark - ä¸ææ¡è§£éæ è®°ææ¬ã
 * @param {string} optionsArr.icon - ä¸ææ¡å¾æ ã
 * @param {string} [optionsArr.dataValue] - ä¸ææ¡ attribute åä¸º data-value çå¼ ã
 * @param {string} [optionsArr.icon.className] - ä¸ææ¡å¾æ ç±»åã
 * @param {string} [optionsArr.icon.background] - ä¸ææ¡å¾æ èæ¯ urlã
 * @category Widgets Common
 * @extends {SuperMap.Widgets.TemplateBase}
 */
class DropDownBox_DropDownBox extends TemplateBase {
    constructor(optionsArr) {
        super(optionsArr);
        this._initView(optionsArr);
    }

    /**
     * @function SuperMap.Widgets.DropDownBox.prototype._initView
     * @description åå§åä¸ææ¡ã
     * @private
     * @override
     */
    _initView(optionsArr) {
        let dropDownContainer = document.createElement('div');
        dropDownContainer.className = 'widget-dropdownbox--container';
        let dropDownBox = document.createElement('div');
        dropDownBox.setAttribute('tabindex', '1');
        dropDownBox.className = "widget-dropdownbox";
        dropDownContainer.appendChild(dropDownBox);

        let dropDownTopContainer = document.createElement('div');
        dropDownBox.appendChild(dropDownTopContainer);

        this._createDropDownOption(optionsArr[0], dropDownTopContainer);

        let triangleBtnContainer = document.createElement('div');
        triangleBtnContainer.className = 'widget-dropdownbox__triangle-btn';
        dropDownBox.appendChild(triangleBtnContainer);

        let triangleBtn = document.createElement('div');
        triangleBtn.className = 'widget-triangle-down-img';
        triangleBtnContainer.appendChild(triangleBtn);

        let createDropDownBoxParam = {
            "parentEle": dropDownBox,
            "dropDownContent": ['widget-dropdownbox__content widget-dropdownbox__content--chart', 'dropDownContent'],
            "scrollareaContent": 'widget-selecttool__scrollarea__content',
            "optionsArr": optionsArr,
            "triangleBtn": triangleBtn,
            "dropDownTopContainer": dropDownTopContainer
        };
        this._createDropDownBox(createDropDownBoxParam);

        this.rootContainer = dropDownContainer;

    }

    /**
     * @function SuperMap.Widgets.DropDownBox.prototype._createDropDownBox
     * @description åå»ºä¸ææ¡ã
     * @private
     */
    _createDropDownBox(createDropDownBoxParam) {
        let dropDownBox = createDropDownBoxParam.parentEle;
        let dropDownTopContainer = createDropDownBoxParam.dropDownTopContainer;
        let dropDownContent = document.createElement('div');
        dropDownContent.className = createDropDownBoxParam.dropDownContent[0];
        dropDownBox.appendChild(dropDownContent);

        let scrollareaContent = document.createElement('div');
        scrollareaContent.className = createDropDownBoxParam.scrollareaContent;
        dropDownContent.appendChild(scrollareaContent);

        let optionsArr = createDropDownBoxParam.optionsArr;
        for (let i = 0; i < optionsArr.length; i++) {
            this._createDropDownOption(optionsArr[i], scrollareaContent)
        }
        // ä¸ææ¡æ¾ç¤º & éèäºä»¶
        let triangleBtn = createDropDownBoxParam.triangleBtn;
        this._dropDownClickEvent(dropDownBox, dropDownContent, triangleBtn);

        this._eleOnblur(dropDownBox, dropDownContent, triangleBtn);

        // ä¸ææ¡ options ç¹å»äºä»¶
        let scrollareaOptions = scrollareaContent.children;
        for (let i = 0; i < scrollareaOptions.length; i++) {
            scrollareaOptions[i].onclick = function () {
                dropDownTopContainer.innerHTML = scrollareaOptions[i].outerHTML;
                //evt.stopPropagation();
            }
        }
    }

    /**
     * @function SuperMap.Widgets.DropDownBox.prototype._createDropDownOption
     * @description åå»ºä¸ææ¡å­åç´ ã
     * @private
     */
    _createDropDownOption(data, parentElement) {
        let ele = document.createElement('div');
        ele.className = 'widget-dropdownbox__item';
        let dataItem = data;
        if (dataItem['dataValue']) {
            ele.setAttribute('data-value', dataItem['dataValue']);
        }
        parentElement.appendChild(ele);

        let imgContainer = document.createElement('div');
        imgContainer.className = 'widget-dropdownbox__item__img';
        ele.appendChild(imgContainer);

        let img = document.createElement('div');
        if (dataItem.icon.className) {
            img.className = dataItem.icon.className;
        }
        if (dataItem.icon.background) {
            img.style.background = dataItem.icon.background;
        }
        imgContainer.appendChild(img);

        let title = document.createElement('div');
        title.className = 'widget-dropdownbox__item__title';
        title.title = dataItem.title;
        title.innerHTML = dataItem.title;
        ele.appendChild(title);

        let remark = document.createElement('div');
        remark.className = 'widget-dropdownbox__item__remark';
        remark.title = dataItem.remark;
        remark.innerHTML = dataItem.remark;
        ele.appendChild(remark);
    }

    /**
     * @function SuperMap.Widgets.DropDownBox.prototype._dropDownClickEvent
     * @description ä¸ææ¡ç¹å»äºä»¶ã
     * @private
     */
    _dropDownClickEvent(eventElement, contentElement, triangleBtn) {
        eventElement.onclick = function (e) {
            if (contentElement.style.display === "block") {
                contentElement.style.display = "none";
                triangleBtn.className = "widget-triangle-down-img";
            } else {
                contentElement.style.display = "block";
                triangleBtn.className = "triangle-up-img";
            }
            e.preventDefault();
            e.stopPropagation()
        };
        eventElement.onmousedown = function (evt) {
            //console.log('dropdownbox onmousedown '+evt.target.className);
            if (evt.target !== this) {
                this.focus();
                evt.preventDefault();
                evt.stopPropagation()
            }
        }
    }

    /**
     * @function SuperMap.Widgets.DropDownBox.prototype._eleOnblur
     * @description ä¸ææ¡å¤±ç¦äºä»¶ã
     * @private
     */
    _eleOnblur(eventElement, contentElement, triangleBtn) {
        eventElement.onblur = function () {
            contentElement.style.display = "none";
            triangleBtn.className = "widget-triangle-down-img";
        }
    }

    /**
     * @function SuperMap.Widgets.DropDownBox.prototype._createElement
     * @description éç¨åå»ºåç´ ã
     * @private
     */
    _createElement(tagName, className, parentEle) {
        let ele = document.createElement(tagName || 'div');
        className && ~~(ele.className = className);
        parentEle && parentEle.appendChild(ele);
        return ele;
    }

}

SuperMap.Widgets.DropDownBox = DropDownBox_DropDownBox;

// CONCATENATED MODULE: ./src/common/widgets/templates/PopContainer.js
/* CopyrightÂ© 2000 - 2019 SuperMap Software Co.Ltd. All rights reserved.
 * This program are made available under the terms of the Apache License, Version 2.0
 * which accompanies this distribution and is available at http://www.apache.org/licenses/LICENSE-2.0.html.*/



/**
 * @class SuperMap.Widgets.PopContainer
 * @classdesc å¼¹æ¡ç»ä»¶ã
 * @version 9.1.1
 * @param {Object} options - ç»ä»¶éç½®åæ°ã
 * @param {string} options.id - ç»ä»¶ dom åç´  idã
 * @param {string} options.title - å¼¹æ¡ç»ä»¶åç§°ã
 * @extends {SuperMap.Widgets.TemplateBase}
 * @category Widgets Common
 */
class PopContainer_PopContainer extends TemplateBase {
    constructor(options) {
        options = options ? options : {};
        super(options);
        options.title = options.title ? options.title : "";
        this._initView(options.title);
    }

    /**
     * @private
     * @override
     */
    _initView(titile) {
        const container = document.createElement("div");
        container.setAttribute("class", "widget-popcontainer");

        //header
        const header = document.createElement("div");
        header.setAttribute("class", "widget-popcontainer__header");
        const title = document.createElement("label");
        title.setAttribute("class", "widget-popcontainer__header__title");
        title.innerHTML = titile;
        header.appendChild(title);

        const closeBtn = document.createElement("span");
        closeBtn.setAttribute("class", "supermapol-icons-clear widget-popcontainer__header__close");
        closeBtn.onclick = this.closeView.bind(this);
        container.appendChild(closeBtn);
        container.appendChild(header);

        //content
        const content = document.createElement("div");
        content.setAttribute("class", "widget-popcontainer__content");
        this.content = content;

        container.appendChild(content);

        this.rootContainer = container;

    }

    /**
     * @function SuperMap.Widgets.PopContainer.prototype.appendContent
     * @description è¿½å åå®¹ã
     * @param {Element} dom - åå®¹åç´ ã
     */
    appendContent(dom) {
        this.content.appendChild(dom);
    }

}

SuperMap.Widgets.PopContainer = PopContainer_PopContainer;
// CONCATENATED MODULE: ./src/common/widgets/templates/AttributesPopContainer.js
/* CopyrightÂ© 2000 - 2019 SuperMap Software Co.Ltd. All rights reserved.
 * This program are made available under the terms of the Apache License, Version 2.0
 * which accompanies this distribution and is available at http://www.apache.org/licenses/LICENSE-2.0.html.*/



/**
 * @class SuperMap.Widgets.AttributesPopContainer
 * @classdesc å±æ§å¼¹æ¡ç»ä»¶
 * @version 9.1.1
 * @param {Object} options - ç»ä»¶éç½®åæ°ã
 * @param {string} options.id - ç»ä»¶ dom åç´  idã
 * @param {Object} options.title - å±æ§å¼¹æ¡ç»ä»¶åç§°ã
 * @param {Object} options.attributes - ç»ä»¶éè¦æ¾ç¤ºçå±æ§åå®¹ã
 * @extends {SuperMap.Widgets.PopContainer}
 * @category Widgets Common
 */
class AttributesPopContainer_AttributesPopContainer extends PopContainer_PopContainer {
    constructor(options) {
        //é»è®¤ä¸ºå±æ§ï¼
        options.title = options.title ? options.title : "å±æ§";

        super(options);
        this.rootContainer.firstChild.hidden = true;
        options.attributes = options.attributes ? options.attributes : [];
        this._createAttributesTable(options.attributes);
    }

    _createAttributesTable(attributes) {
        const table = document.createElement("table");
        table.setAttribute("class", "widget-popcontainer__content__table");

        const tbody = document.createElement("tbody");

        let single = true;
        for (let name in attributes) {
            const tr = document.createElement("tr");
            if (single) {
                tr.setAttribute("class", "widget-popcontainer__content__td--color");
            }
            const title = document.createElement("td");
            const titleSpan = document.createElement("Span");
            titleSpan.innerHTML = name;
            title.appendChild(titleSpan);
            const value = document.createElement("td");
            value.innerHTML = attributes[name];

            tr.appendChild(title);
            tr.appendChild(value);
            tbody.appendChild(tr);
            single = !single;
        }
        table.appendChild(tbody);

        this.appendContent(table);
    }
}

SuperMap.Widgets.AttributesPopContainer = AttributesPopContainer_AttributesPopContainer;
// CONCATENATED MODULE: ./src/common/widgets/templates/IndexTabsPageContainer.js
/* CopyrightÂ© 2000 - 2019 SuperMap Software Co.Ltd. All rights reserved.
 * This program are made available under the terms of the Apache License, Version 2.0
 * which accompanies this distribution and is available at http://www.apache.org/licenses/LICENSE-2.0.html.*/



/**
 * @class SuperMap.Widgets.IndexTabsPageContainer
 * @description æ ç­¾ç´¢å¼ç»ä»¶ã
 * @version 9.1.1
 * @param {Object} options - å¯éåæ°ã
 * @param {string} options.id - ç»ä»¶ dom åç´  idã
 * @category Widgets Common
 * @extends {SuperMap.Widgets.TemplateBase}
 */
class IndexTabsPageContainer_IndexTabsPageContainer extends TemplateBase {
    constructor(options) {
        super(options);
        this._initView();
    }

    /**
     * @private
     * @override
     */
    _initView() {
        const container = document.createElement("div");
        container.setAttribute("class", "widget-tabpage");

        const header = document.createElement("ul");
        this.header = header;

        const content = document.createElement("div");
        content.setAttribute("class", "widget-tabpage__content");
        this.content = content;

        container.appendChild(header);
        container.appendChild(content);
        this.rootContainer = container;

    }

    /**
     * @function SuperMap.Widgets.IndexTabsPageContainer.prototype.setTabs
     * @description è®¾ç½®æ ç­¾åç´ ã
     * @param {Array.<Element>} tabs
     */
    setTabs(tabs) {
        this.removeAllTabs();
        this.appendTabs(tabs);
    }

    /**
     * @function SuperMap.Widgets.IndexTabsPageContainer.prototype.appendTabs
     * @description è¿½å æ ç­¾åç´ ã
     * @param {Array.<Element>} tabs
     */
    appendTabs(tabs) {
        for (let i = 0; i < tabs.length; i++) {
            let title = document.createElement("span");
            title.index = i;
            title.appendChild(document.createTextNode(tabs[i].title));
            //ç»å®æ ç­¾åæ¢å¯¹åºé¡µé¢ï¼
            title.onclick = this._changeTabsPage.bind(this);
            let content = tabs[i].content;
            content.index = i;
            content.hidden = true;

            this.header.appendChild(title);
            this.content.appendChild(content);
        }
        //todo ç¡®è®¤æ¯å¦ä¸¤ä¸ªå­åç´ ç index ç¸äºå¯¹åº
        //é»è®¤æ¾ç¤ºç¬¬ä¸ä¸ªæ ç­¾å¯¹è±¡
        this.header.firstChild.setAttribute("class", "on");
        this.content.firstChild.hidden = false;
    }

    /**
     * @function SuperMap.Widgets.IndexTabsPageContainer.prototype.removeTab
     * @description å é¤æä¸ªæ ç­¾é¡µé¢ã
     * @param {number} index - æ ç­¾ç´¢å¼å·ã
     */
    removeTab(index) {
        this.header.removeChild(this.header.children[index]);
        this.content.removeChild(this.content.children[index]);
    }

    /**
     * @function SuperMap.Widgets.IndexTabsPageContainer.prototype.removeAllTabs
     * @description å é¤æææ ç­¾ã
     */
    removeAllTabs() {
        for (let i = this.header.children.length; i > 0; i--) {
            this.header.removeChild(this.header.children[i]);
            this.content.removeChild(this.content.children[i]);
        }
    }

    _changeTabsPage(e) {
        const index = e.target.index;
        for (let i = 0; i < this.header.children.length; i++) {
            this.header.children[i].setAttribute("class", "");
            this.content.children[i].hidden = true;
            if (i === index) {
                this.header.children[i].setAttribute("class", "on");
                this.content.children[i].hidden = false;
            }
        }
    }

}

SuperMap.Widgets.IndexTabsPageContainer = IndexTabsPageContainer_IndexTabsPageContainer;
// CONCATENATED MODULE: ./src/common/widgets/templates/CityTabsPage.js
/* CopyrightÂ© 2000 - 2019 SuperMap Software Co.Ltd. All rights reserved.
 * This program are made available under the terms of the Apache License, Version 2.0
 * which accompanies this distribution and is available at http://www.apache.org/licenses/LICENSE-2.0.html.*/




/**
 * @class SuperMap.Widgets.CityTabsPage
 * @classdesc åå¸å°åå¹éç»ä»¶æ¨¡æ¿
 * @version 9.1.1
 * @param {Object} options - ç»ä»¶éç½®åæ°ã
 * @param {string} options.id - ç»ä»¶ dom åç´  idã
 * @param {Object|Array.<string>} options.config - åå¸åç§°éç½®åè¡¨ï¼æ¯æä¸¤ç§æ ¼å¼ï¼{key1:{A:[],B:[]}, key2:{C:[],D:[]}} æ
 *                               ["æé½å¸","åäº¬å¸"]ï¼ç¨æ·å¯æ ¹æ®èªå·±çé¡¹ç®éæ±è¿è¡éç½®
 * @extends {SuperMap.Widgets.IndexTabsPageContainer}
 * @category Widgets Common
 */
class CityTabsPage_CityTabsPage extends IndexTabsPageContainer_IndexTabsPageContainer {
    constructor(options) {
        super(options);
        //å»æé»è®¤çè¾¹æ¡é´å½±æ ·å¼ï¼
        this.rootContainer.classList.add("widget-citytabpage--noneBoxShadow");
        this.config = options.config;
        //headerï¼è¥ configä¸ºåå¸åç§°æ°ç»ï¼åç´æ¥å è½½åå®¹
        if (Util.isArray(this.config)) {
            this.header.hidden = true;
            this._createCityItem("åå¸", this.config);
            this.content.style.border = "none";
        } else {
            this._createTabs();
            this.header.onclick = (e) => {
                //å³é­ææåç´  æ¯å¦ææ´ç®åçåæ³ï¼
                for (let i = 0; i < this.header.children.length; i++) {
                    this.header.children[i].setAttribute("class", "");
                }
                //æå¼ç¹å»åå®¹åç´ 
                e.target.setAttribute("class", "on");
                this._createCityContent(e.target.innerHTML);
            };
        }

    }

    /**
     * @function SuperMap.Widgets.CityTabsPage.prototype._createTabs
     * @description åå»º Tabs
     * @private
     */
    _createTabs() {
        //header
        if (Util.isArray(this.config)) {
            for (let i = 0; i < this.config.length; i++) {
                let innerHTML = "";
                for (const key in this.config[i]) {
                    innerHTML += key;
                }
                let li = document.createElement("li");
                li.innerHTML = innerHTML;
                this.header.appendChild(li);
            }
        } else {
            for (const key in this.config) {
                let li = document.createElement("li");
                li.innerHTML = key;
                this.header.appendChild(li);
            }
        }
        this.header.firstChild.setAttribute("class", "on");
        this._createCityContent(this.header.firstChild.innerHTML);
    }

    /**
     * @function SuperMap.Widgets.CityTabsPage.prototype._createCityContent
     * @description åå»ºåè¡¨å®¹å¨
     * @private
     */
    _createCityContent(keyName) {
        //æ¸é¤åç´ ï¼
        for (let i = this.content.children.length; i > 0; i--) {
            this.content.removeChild(this.content.children[i - 1]);
        }
        //åå»ºå¯¹åºåç´ 
        const cities = this.config[keyName];
        for (let key in cities) {
            this._createCityItem(key, cities[key]);
        }
    }

    /**
     * @function SuperMap.Widgets.CityTabsPage.prototype._createCityContent
     * @description åå»ºåè¡¨å®¹å¨
     * @private
     */
    _createCityItem(key, cities) {
        const city = document.createElement("div");

        const cityClass = document.createElement("div");
        cityClass.setAttribute("class", "widget-citytabpag__py-key");
        cityClass.innerHTML = key;
        city.appendChild(cityClass);

        const cityContent = document.createElement("div");
        cityContent.setAttribute("class", "widget-citytabpag__content");

        for (let i = 0; i < cities.length; i++) {
            let span = document.createElement("span");
            span.innerHTML = cities[i];
            cityContent.appendChild(span);
        }
        //HOT åç´ é¿åº¦åç¬å¾®è°ï¼
        if (key === "HOT") {
            cityContent.style.width = "428px";
        }
        city.appendChild(cityContent);
        this.content.appendChild(city);
    }

}

SuperMap.Widgets.CityTabsPage = CityTabsPage_CityTabsPage;
// CONCATENATED MODULE: ./src/common/widgets/templates/NavTabsPage.js
/* CopyrightÂ© 2000 - 2019 SuperMap Software Co.Ltd. All rights reserved.
 * This program are made available under the terms of the Apache License, Version 2.0
 * which accompanies this distribution and is available at http://www.apache.org/licenses/LICENSE-2.0.html.*/



/**
 * @class SuperMap.Widgets.NavTabsPage
 * @classdesc æ ç­¾é¡µé¢ç»ä»¶ã
 * @version 9.1.1
 * @param {Object} options - ç»ä»¶éç½®åæ°ã
 * @param {string} optionsArr.id - ç»ä»¶ dom åç´  idã
 * @param {Array.<Object>} [options.tabs=[]] - æ ç­¾å¯¹è±¡æ°ç»ï¼å½¢å¦ï¼[{title: "",content: HTMLElement}]ï¼åå§æ¶ï¼ä¼ å¥ååå»ºé¡µé¢ã
 * @extends {SuperMap.Widgets.TemplateBase}
 * @category Widgets Common
 */
//  todo æèæåçæ§ä»¶åºè¯¥ä»¥åªç§æ¹å¼ä½¿ç¨
class NavTabsPage_NavTabsPage extends TemplateBase {
    constructor(options) {
        super(options);
        this.navTabsTitle = null;
        this.navTabsContent = null;
        options.tabs = options.tabs ? options.tabs : [];
        this._initView(options.tabs);
    }

    /**
     * @override
     * @private
     */
    _initView(tabs) {
        const navTabsPage = document.createElement("div");
        navTabsPage.setAttribute("class", "widget-navtabspage");

        //å³é­æé®
        const closeBtn = document.createElement("span");
        closeBtn.setAttribute("class", "supermapol-icons-close");
        closeBtn.onclick = this.closeView.bind(this);
        navTabsPage.appendChild(closeBtn);

        //æ ç­¾
        const navTabsTitle = document.createElement("div");
        this.navTabsTitle = navTabsTitle;
        navTabsTitle.setAttribute("class", "widget-navtabspage__title");
        navTabsPage.appendChild(navTabsTitle);

        //åå®¹
        const navTabsContent = document.createElement("div");
        this.navTabsContent = navTabsContent;
        navTabsContent.setAttribute("class", "widget-navtabspage__content");
        navTabsPage.appendChild(navTabsContent);

        //è¥ tabs åå§ä¼ å¥å¼ï¼å
        if (tabs.length > 0) {
            this.appendTabs(tabs);
        }

        this.rootContainer = navTabsPage;
    }

    /**
     * @function SuperMap.Widgets.NavTabsPage.prototype.setTabs
     * @description è®¾ç½®æ ç­¾ã
     * @param {Array.<Object>} tabs - æ ç­¾å¯¹è±¡æ°ç»ï¼å½¢å¦ï¼[{title: "",content: {}}]ã
     */
    setTabs(tabs) {
        this.removeAllTabs();
        this.appendTabs(tabs);
    }

    /**
     * @function SuperMap.Widgets.NavTabsPage.prototype.appendTabs
     * @description æ·»å æ ç­¾é¡µé¢ã
     * @param {Array.<Object>} tabs - æ ç­¾å¯¹è±¡æ°ç»ï¼å½¢å¦ï¼[{title: "",content: {}}]ã
     */
    appendTabs(tabs) {
        for (let i = 0; i < tabs.length; i++) {
            let title = document.createElement("span");
            title.index = i;
            title.appendChild(document.createTextNode(tabs[i].title));
            //ç»å®æ ç­¾åæ¢å¯¹åºé¡µé¢ï¼
            title.onclick = this._changeTabsPage.bind(this);
            let content = tabs[i].content;
            content.index = i;
            content.hidden = true;

            this.navTabsTitle.appendChild(title);
            this.navTabsContent.appendChild(content);
        }
        //todo ç¡®è®¤æ¯å¦ä¸¤ä¸ªå­åç´ ç index ç¸äºå¯¹åº
        //é»è®¤æ¾ç¤ºç¬¬ä¸ä¸ªæ ç­¾å¯¹è±¡
        this.navTabsTitle.firstChild.setAttribute("class", "widget-navtabspage__tabs--select");
        this.navTabsContent.firstChild.hidden = false;
    }

    /**
     * @function SuperMap.Widgets.NavTabsPage.prototype.removeTab
     * @description å é¤æä¸ªæ ç­¾é¡µé¢ã
     * @param {number} index - æ ç­¾ç´¢å¼å·ã
     */
    removeTab(index) {
        this.navTabsTitle.removeChild(this.navTabsTitle.children[index]);
        this.navTabsContent.removeChild(this.navTabsContent.children[index]);
    }

    /**
     * @function SuperMap.Widgets.NavTabsPage.prototype.removeAllTabs
     * @description å é¤æææ ç­¾ã
     */
    removeAllTabs() {
        for (let i = this.navTabsTitle.children.length; i > 0; i--) {
            this.navTabsTitle.removeChild(this.navTabsTitle.children[i]);
            this.navTabsContent.removeChild(this.navTabsContent.children[i]);
        }
    }

    _changeTabsPage(e) {
        const index = e.target.index;
        for (let i = 0; i < this.navTabsTitle.children.length; i++) {
            this.navTabsTitle.children[i].setAttribute("class", "");
            this.navTabsContent.children[i].hidden = true;
            if (i === index) {
                this.navTabsTitle.children[i].setAttribute("class", "widget-navtabspage__tabs--select");
                this.navTabsContent.children[i].hidden = false;
            }
        }
    }

}

SuperMap.Widgets.NavTabsPage = NavTabsPage_NavTabsPage;
// CONCATENATED MODULE: ./src/common/widgets/templates/PaginationContainer.js
/* CopyrightÂ© 2000 - 2019 SuperMap Software Co.Ltd. All rights reserved.
 * This program are made available under the terms of the Apache License, Version 2.0
 * which accompanies this distribution and is available at http://www.apache.org/licenses/LICENSE-2.0.html.*/



/**
 * @class SuperMap.Widgets.PaginationContainer
 * @classdesc åé¡µç»ä»¶æ¨¡æ¿ã
 * @version 9.1.1
 * @param {Object} options - ç»ä»¶éç½®åæ°ã
 * @param {string} optionsArr.id - ç»ä»¶ dom åç´  idã
 * @param {HTMLElement} options.contents - é¡µé¢å¡«åç DOM åç´ å¯¹è±¡ã
 * @param {number} options.pageCounts - é¡µæ°ã
 * @extends {SuperMap.Widgets.TemplateBase}
 * @category Widgets Common
 */
class PaginationContainer_PaginationContainer extends TemplateBase {
    constructor(options) {
        options = options ? options : {};
        super(options);
        this.currentPage = 0;
        this.pageNumberLis = [];
        this.currentPageNumberLis = [];
        this.linkageEvent = null;

        options.contents = options.contents ? options.contents : null;
        options.pageCounts = options.pageCounts ? options.pageCounts : 0;
        this._initView(options.contents, options.pageCounts);
    }

    /**
     * @function SuperMap.Widgets.PaginationContainer.prototype.setLinkageEvent
     * @description è®¾ç½®é¡µé¢èå¨æ¹æ³ã
     * @param {function} linkageEvent - èå¨æ¹æ³ï¼å®ç°æå®åè½ã
     */
    setLinkageEvent(linkageEvent) {
        this.linkageEvent = linkageEvent;
    }

    /**
     * @private
     * @override
     */
    _initView(contents, pageCounts) {
        const container = document.createElement("div");
        container.setAttribute("class", "widget-pagination");

        //content
        const content = document.createElement("div");
        content.setAttribute("class", "widget-pagination__content");
        container.appendChild(content);
        this.content = content;

        //link
        const link = document.createElement("ul");
        link.setAttribute("class", "widget-pagination__link");
        link.onclick = this._changePageEvent.bind(this);
        container.appendChild(link);
        this._createLink(link);
        this.link = link;
        //å¡«ååå®¹ï¼
        if (contents) {
            this.setContent(contents);
        }
        if (pageCounts !== 0) {
            this.setPageLink(pageCounts);
        }
        this.rootContainer = container;
    }

    /**---------ä»¥ä¸æ¯é¡µé¢ç¸å³æä½ **/
    /**
     * @function SuperMap.Widgets.PaginationContainer.prototype.setContent
     * @description è®¾ç½®é¡µé¢åå®¹ã
     * @param {Element} element - é¡µé¢åå®¹åç´ ã
     */
    setContent(element) {
        this.clearContent();
        this.appendContent(element);
    }

    /**
     * @function SuperMap.Widgets.PaginationContainer.prototype.appendContent
     * @description è¿½å åå®¹ã
     * @param {Element} element - é¡µé¢åå®¹åç´ ã
     */
    appendContent(element) {
        this.content.appendChild(element);
    }

    /**
     * @function SuperMap.Widgets.PaginationContainer.prototype.clearContent
     * @description æ¸ç©ºåå®¹åç´ ã
     */
    clearContent() {
        for (let i = this.content.children.length - 1; i >= 0; i--) {
            this.content.removeChild(this.content.children[i]);
        }
    }

    /** -----ä»¥ä¸æ¯é¡µç ç¸å³çæä½ï¼**/
    /**
     * @function SuperMap.Widgets.PaginationContainer.prototype.setPageLink
     * @description è®¾ç½®é¡µç æ°ã
     * @param {number} pageNumber - é¡µç æ°ã
     */
    setPageLink(pageNumber) {
        //æ¸ç©ºå½åé¡µç 
        this.pageNumberLis = [];
        this.currentPageNumberLis = [];
        this.clearPageLink();

        //åå»ºé¡µç 
        this._createPageLi(pageNumber);
        //æ·»å é¡µç å°é¡µç åè¡¨
        this._appendPageLink();
    }

    /**
     * @description åå»ºé¡µç ã
     * @param pageNumber
     * @private
     */
    _createPageLi(pageNumber) {
        for (let i = 0; i < pageNumber; i++) {
            const pageLi = document.createElement("li");
            pageLi.innerHTML = i + 1;
            /*const liContent = document.createElement("span");
            liContent.innerHTML = i + 1;*/
            // pageLi.appendChild(liContent);
            this.pageNumberLis.push(pageLi);
        }
        this.pageNumberLis[0].setAttribute("class", "active");
        this.currentPage = 1;
        if (pageNumber < 5) {
            this.currentPageNumberLis = this.pageNumberLis;
        } else {
            for (let i = 0; i < 5; i++) {
                this.currentPageNumberLis.push(this.pageNumberLis[i]);
            }
        }
    }

    /**
     * @description æ·»å é¡µç å°é¡µç åè¡¨ã
     * @private
     */
    _appendPageLink() {
        //todo å¦ä½æå¥ä¸­é´
        for (let i = 0; i < this.currentPageNumberLis.length; i++) {
            this.link.insertBefore(this.currentPageNumberLis[i], this.link.childNodes[this.link.children.length - 2]);
        }

        for (let i = 0; i < this.currentPageNumberLis.length; i++) {
            //æ¸ç©º active ç¶æ
            this.currentPageNumberLis[i].setAttribute("class", "");
            //ç»å½åéä¸­ç li èµå¼  active ç¶æ
            if (Number(this.currentPageNumberLis[i].innerHTML) === this.currentPage) {
                this.currentPageNumberLis[i].setAttribute("class", "active");
            }
        }

        //æ ¹æ® currentPage æ¹åæé®ç¶æ
        this._changeDisableState();

        if (this.linkageEvent) {
            this.linkageEvent(this.currentPage);
        }

    }

    /**
     * @function SuperMap.Widgets.PaginationContainer.prototype.clearPageLink
     * @description æ¸é¤é¡µç åè¡¨ã
     */
    clearPageLink() {
        for (let i = this.link.children.length - 3; i > 1; i--) {
            this.link.removeChild(this.link.children[i]);
        }
    }

    /**
     * @description åå»ºé¡µç æé®ã
     * @param ul
     * @private
     */
    _createLink(ul) {
        for (let i = 0; i < 4; i++) {
            const li = document.createElement("li");
            li.setAttribute("class", "disable");
            const liContent = document.createElement("span");
            li.appendChild(liContent);
            if (i === 0) {
                liContent.id = "first";
                liContent.setAttribute("class", "supermapol-icons-first");
            } else if (i === 1) {
                liContent.id = "prev";
                liContent.setAttribute("class", "supermapol-icons-prev");
            } else if (i === 2) {
                liContent.id = "next";
                liContent.setAttribute("class", "supermapol-icons-next");
            } else if (i === 3) {
                liContent.id = "last";
                liContent.setAttribute("class", "supermapol-icons-last");
            }

            ul.appendChild(li);
        }
    }

    /**
     * @description ç¹å»é¡µç äºä»¶ã
     * @param e
     * @private
     */
    _changePageEvent(e) {
        //todo
        const trigger = e.target;
        //è¥åè¡¨ç¦ç¨ï¼ç¹å»æ æ
        if (trigger.parentElement.classList[0] === "disable") {
            return;
        }
        let targetLi;
        if (trigger.id) {
            targetLi = trigger.id;
        } else if (Number(trigger.innerHTML)) {
            targetLi = Number(trigger.innerHTML);
        } else {
            return;
        }

        //é¡µç é¢å¤çï¼
        this._prePageNum(targetLi);


        //æ ¹æ® currentPageNumberLis åå»ºé¡µç åè¡¨
        this.clearPageLink();
        this._appendPageLink();
    }

    /**
     * @description æ ¹æ® currentPage æ¹åæé®ç¶æã
     * @private
     */
    _changeDisableState() {
        this.link.children[0].setAttribute("class", "");
        this.link.children[1].setAttribute("class", "");
        this.link.children[this.link.children.length - 1].setAttribute("class", "");
        this.link.children[this.link.children.length - 2].setAttribute("class", "");

        if (this.currentPage === 1) {
            this.link.children[0].setAttribute("class", "disable");
            this.link.children[1].setAttribute("class", "disable");
        }
        if (this.currentPage === this.pageNumberLis.length) {
            this.link.children[this.link.children.length - 1].setAttribute("class", "disable");
            this.link.children[this.link.children.length - 2].setAttribute("class", "disable");
        }

    }

    /**
     * @description æ ¹æ®ç¹å»é¡µç åè¡¨äºä»¶åå¤éå±ç°çé¡µç åè¡¨ã
     * @param {string|number} targetLi - è¢«ç¹å»çåè¡¨å¯¹è±¡ id æ è¢«ç¹å»çé¡µç å¼ã
     * @private
     */
    _prePageNum(targetLi) {
        const currentPageNumberLis = [];
        if (targetLi === "first") {
            this.currentPage = 1;
        } else if (targetLi === "last") {
            this.currentPage = this.pageNumberLis.length;
        } else if (targetLi === "prev") {
            this.currentPage = this.currentPage - 1;

        } else if (targetLi === "next") {
            this.currentPage = this.currentPage + 1;
        } else {
            this.currentPage = targetLi;
        }

        if (this.pageNumberLis.length <= 5) {
            for (let i = 0; i < this.pageNumberLis.length; i++) {
                currentPageNumberLis.push(this.pageNumberLis[i]);
            }
        } else {
            //å½åç¹å»åä¸ï¼é½ååäº
            if (this.currentPage <= 3) {
                for (let i = 0; i < 5; i++) {
                    currentPageNumberLis.push(this.pageNumberLis[i]);
                }
            } else if (this.currentPage >= this.pageNumberLis.length - 3) {
                //ç¹å»åä¸ï¼é½åå5
                for (let i = this.pageNumberLis.length - 5; i < this.pageNumberLis.length; i++) {
                    currentPageNumberLis.push(this.pageNumberLis[i]);
                }
            } else {
                //å¶ä»ï¼åä¸­é´ï¼
                for (let i = this.currentPage - 3; i <= this.currentPage + 1; i++) {
                    currentPageNumberLis.push(this.pageNumberLis[i]);
                }
            }

        }
        if (currentPageNumberLis.length > 0) {
            this.currentPageNumberLis = currentPageNumberLis;
        }
    }

}

SuperMap.Widgets.PaginationContainer = PaginationContainer_PaginationContainer;
// CONCATENATED MODULE: ./src/common/widgets/util/Util.js
/* CopyrightÂ© 2000 - 2019 SuperMap Software Co.Ltd. All rights reserved.
 * This program are made available under the terms of the Apache License, Version 2.0
 * which accompanies this distribution and is available at http://www.apache.org/licenses/LICENSE-2.0.html.*/


let widgetsUtil = {
    /**
     * è·åä¸ä¼ æä»¶ç±»å
     * @param fileName
     */
    getFileType(fileName) {
        let regCSV = /^.*\.(?:csv)$/i;
        let regExcel = /^.*\.(?:xls|xlsx)$/i; //æä»¶åå¯ä»¥å¸¦ç©ºæ ¼
        let regGeojson = /^.*\.(?:geojson|json)$/i;
        if (regExcel.test(fileName)) { //æ ¡éªä¸éè¿
            return FileTypes.EXCEL;
        } else if (regCSV.test(fileName)) {
            return FileTypes.CSV;
        } else if (regGeojson.test(fileName)) {
            return FileTypes.GEOJSON;
        }
        return null;
    }

};
// CONCATENATED MODULE: ./src/common/widgets/util/index.js
/* CopyrightÂ© 2000 - 2019 SuperMap Software Co.Ltd. All rights reserved.
 * This program are made available under the terms of the Apache License, Version 2.0
 * which accompanies this distribution and is available at http://www.apache.org/licenses/LICENSE-2.0.html.*/





// CONCATENATED MODULE: ./src/common/widgets/index.js
/* CopyrightÂ© 2000 - 2019 SuperMap Software Co.Ltd. All rights reserved.
 * This program are made available under the terms of the Apache License, Version 2.0
 * which accompanies this distribution and is available at http://www.apache.org/licenses/LICENSE-2.0.html.*/
//æ°æ®

//ç»ä»¶

//æç¤ºæ¡å¾®ä»¶

//å¾è¡¨å¾®ä»¶


//å¬ç¨æ¨¡æ¿ï¼










//å·¥å·ç±»




















// CONCATENATED MODULE: ./src/classic/SuperMap.js
var SuperMap_SuperMap = window.SuperMap = window.SuperMap || {};
SuperMap_SuperMap.REST = SuperMap_SuperMap.REST || {};

// EXTERNAL MODULE: external "function(){try{return mapv}catch(e){return {}}}()"
var external_function_try_return_mapv_catch_e_return_ = __webpack_require__(0);

// CONCATENATED MODULE: ./src/classic/overlay/mapv/MapVRenderer.js
/* CopyrightÂ© 2000 - 2019 SuperMap Software Co.Ltd. All rights reserved.
 * This program are made available under the terms of the Apache License, Version 2.0
 * which accompanies this distribution and is available at http://www.apache.org/licenses/LICENSE-2.0.html.*/



/**
 * @class MapVRenderer
 * @classdesc MapVæ¸²æå¨ã
 * @private
 * @extends {mapv.baiduMapLayer}
 * @param {SuperMap.Map} map - å¾æ¸²æçå°å¾ã
 * @param {SuperMap.Layer.MapVLayer} layer - å¾æ¸²æçå¾å±ã
 * @param {Mapv.DataSet} dataSet - å¾æ¸²æçæ°æ®éï¼æ°æ®æå±åæ ç³»è¦æ±ä¸ map ä¿æä¸è´ã
 * @param {Object} options - æ¸²æçåæ°ã
 */
var MapVBaseLayer = external_function_try_return_mapv_catch_e_return_["baiduMapLayer"] ? external_function_try_return_mapv_catch_e_return_["baiduMapLayer"].__proto__ : Function;

class MapVRenderer_MapVRenderer extends MapVBaseLayer {
    constructor(map, layer, dataSet, options) {
        super(map, dataSet, options);
        if (!MapVBaseLayer) {
            return this;
        }

        var self = this;
        options = options || {};

        self.init(options);
        self.argCheck(options);
        this.canvasLayer = layer;
        this.clickEvent = this.clickEvent.bind(this);
        this.mousemoveEvent = this.mousemoveEvent.bind(this);
        this.bindEvent();
    }

    /**
     * @function MapvRenderer.prototype.clickEvent
     * @description ç¹å»äºä»¶ã
     * @param {Object} e -  è§¦åå¯¹è±¡ã
     */
    clickEvent(e) {
        var pixel = e.xy;
        super.clickEvent(pixel, e);
    }

    /**
     * @function MapvRenderer.prototype.mousemoveEvent
     * @description é¼ æ ç§»å¨äºä»¶ã
     * @param {Object} e - è§¦åå¯¹è±¡ã
     */
    mousemoveEvent(e) {
        var pixel = e.xy;
        super.mousemoveEvent(pixel, e);
    }

    /**
     * @function MapvRenderer.prototype.bindEvent
     * @description ç»å®é¼ æ ç§»å¨åé¼ æ ç¹å»äºä»¶ã
     */
    bindEvent() {
        var map = this.map;

        if (this.options.methods) {
            if (this.options.methods.click) {
                map.events.on({'click': this.clickEvent});
            }
            if (this.options.methods.mousemove) {
                map.events.on({'mousemove': this.mousemoveEvent});
            }
        }
    }

    /**
     * @function MapvRenderer.prototype.unbindEvent
     * @description è§£ç»é¼ æ ç§»å¨åé¼ æ æ»å¨è§¦åçäºä»¶ã
     */
    unbindEvent() {
        var map = this.map;

        if (this.options.methods) {
            if (this.options.methods.click) {
                map.events.un({'click': this.clickEvent});
            }
            if (this.options.methods.mousemove) {
                map.events.un({'mousemove': this.mousemoveEvent});
            }
        }
    }

    /**
     * @function MapvRenderer.prototype.getContext
     * @description è·åä¿¡æ¯ã
     */
    getContext() {
        return this.canvasLayer && this.canvasLayer.canvasContext;
    }

    /**
     * @function MapvRenderer.prototype.addData
     * @description è¿½å æ°æ®
     * @param {oject} data - å¾æ·»å çæ°æ®ã
     * @param {oject} options - å¾æ·»å çæ°æ®ä¿¡æ¯ã
     */
    addData(data, options) {
        var _data = data;
        if (data && data.get) {
            _data = data.get();
        }
        this.dataSet.add(_data);
        this.update({options: options});
    }

    /**
     * @function MapvRenderer.prototype.updateData
     * @description æ´æ°è¦çåæ°æ®ã
     * @param {oject} data - å¾æ´æ°çæ°æ®ã
     * @param {oject} options - å¾æ´æ°çæ°æ®ä¿¡æ¯ã
     */
    setData(data, options) {
        var _data = data;
        if (data && data.get) {
            _data = data.get();
        }
        this.dataSet = this.dataSet || new external_function_try_return_mapv_catch_e_return_["DataSet"]();
        this.dataSet.set(_data);
        this.update({options: options});
    }

    /**
     * @function MapvRenderer.prototype.getData
     * @description è·åæ°æ®ã
     */
    getData() {
        return this.dataSet;
    }

    /**
     * @function MapvRenderer.prototype.removeData
     * @description å é¤ç¬¦åè¿æ»¤æ¡ä»¶çæ°æ®ã
     * @param {function} filter - è¿æ»¤æ¡ä»¶ãæ¡ä»¶åæ°ä¸ºæ°æ®é¡¹ï¼è¿åå¼ä¸º trueï¼è¡¨ç¤ºå é¤è¯¥åç´ ï¼å¦åè¡¨ç¤ºä¸å é¤ã
     */
    removeData(filter) {
        if (!this.dataSet) {
            return;
        }
        var newData = this.dataSet.get({
            filter: function (data) {
                return (filter != null && typeof filter === "function") ? !filter(data) : true;
            }
        });
        this.dataSet.set(newData);
        this.update({options: null});
    }

    /**
     * @function MapvRenderer.prototype.clearData
     * @description æ¸é¤æ°æ®ã
     */
    clearData() {
        this.dataSet && this.dataSet.clear();
        this.update({options: null});
    }

    /**
     * @function MapvRenderer.prototype.render
     * @description çè²ã
     * @param {number} time
     */
    render(time) {
        this._canvasUpdate(time);
    }

    /**
     * @function MapvRenderer.prototype.transferToMercator
     * @description å¢¨å¡æåæ ä¸ºç»çº¬åº¦ã
     * @deprecated
     */
    transferToMercator() {
        if (this.options.coordType && ["bd09mc", "coordinates_mercator"].indexOf(this.options.coordType) > -1) {
            var data = this.dataSet.get();
            data = this.dataSet.transferCoordinate(data, function (coordinates) {
                var pixel = SuperMap_SuperMap.Projection.transform({
                    x: coordinates[0],
                    y: coordinates[1]
                }, "EPSG:3857", "EPSG:4326");
                return [pixel.x, pixel.y];
            }, 'coordinates', 'coordinates');
            this.dataSet._set(data);
        }
    }

    _canvasUpdate(time) {
        if (!this.canvasLayer) {
            return;
        }

        var self = this;

        var animationOptions = self.options.animation;

        var context = this.getContext();
        var map = this.map;
        if (self.isEnabledTime()) {
            if (time === undefined) {
                this.clear(context);
                return;
            }
            if (this.context === '2d') {
                context.save();
                context.globalCompositeOperation = 'destination-out';
                context.fillStyle = 'rgba(0, 0, 0, .1)';
                context.fillRect(0, 0, context.canvas.width, context.canvas.height);
                context.restore();
            }
        } else {
            this.clear(context);
        }

        if (this.context === '2d') {
            for (var key in self.options) {
                context[key] = self.options[key];
            }
        } else {
            context.clear(context.COLOR_BUFFER_BIT);
        }

        if (self.options.minZoom && map.getZoom() < self.options.minZoom || self.options.maxZoom && map.getZoom() > self.options.maxZoom) {
            return;
        }
        var layer = self.canvasLayer;
        var dataGetOptions = {
            fromColumn: 'coordinates',
            transferCoordinate: function (coordinate) {
                // var coord = layer.transferToMapLatLng({lon: coordinate[0], lat: coordinate[1]});
                var coord = {lon: coordinate[0], lat: coordinate[1]};
                var worldPoint = map.getViewPortPxFromLonLat(coord);
                return [worldPoint.x, worldPoint.y];
            }
        };

        if (time !== undefined) {
            dataGetOptions.filter = function (item) {
                var trails = animationOptions.trails || 10;
                return (time && item.time > (time - trails) && item.time < time);
            }
        }

        var data = self.dataSet.get(dataGetOptions);

        this.processData(data);

        self.options._size = self.options.size;

        var worldPoint = map.getViewPortPxFromLonLat(layer.transferToMapLatLng({lon: 0, lat: 0}));

        var zoomUnit = Math.pow(2, 14 - map.getZoom());
        if (self.options.unit == 'm') {
            if (self.options.size) {
                self.options._size = self.options.size / zoomUnit;
            }
            if (self.options.width) {
                self.options._width = self.options.width / zoomUnit;
            }
            if (self.options.height) {
                self.options._height = self.options.height / zoomUnit;
            }
        } else {
            self.options._size = self.options.size;
            self.options._height = self.options.height;
            self.options._width = self.options.width;
        }

        this.drawContext(context, data, self.options, worldPoint);

        self.options.updateCallback && self.options.updateCallback(time);
    }


    init(options) {

        var self = this;

        self.options = options;

        this.initDataRange(options);

        this.context = self.options.context || '2d';

        if (self.options.zIndex) {
            this.canvasLayer && this.canvasLayer.setZIndex(self.options.zIndex);
        }

        this.initAnimator();
    }

    /**
     * @function MapvRenderer.prototype.addAnimatorEvent
     * @description æ·»å å¨ç»äºä»¶ã
     */
    addAnimatorEvent() {
        this.map.events.on({'movestart': this.animatorMovestartEvent.bind(this)});
        this.map.events.on({'moveend': this.animatorMoveendEvent.bind(this)});
    }

    /**
     * @function MapvRenderer.prototype.clear
     * @description æ¸é¤ç¯å¢ã
     * @param {Object} context - å½åç¯å¢ã
     */
    clear(context) {
        context && context.clearRect && context.clearRect(0, 0, context.canvas.width, context.canvas.height);
    }

    /**
     * @function MapvRenderer.prototype.show
     * @description å±ç¤ºæ¸²æææã
     */
    show() {
        this.map.addLayer(this.canvasLayer);
    }

    /**
     * @function MapvRenderer.prototype.hide
     * @description éèæ¸²æææã
     */
    hide() {
        this.map.removeLayer(this.canvasLayer);
    }


    /**
     * @function MapvRenderer.prototype.draw
     * @description æ¸²æç»å¶ã
     */
    draw() {
        this.canvasLayer.redraw();
    }
}
// CONCATENATED MODULE: ./src/classic/overlay/MapVLayer.js
/* CopyrightÂ© 2000 - 2019 SuperMap Software Co.Ltd. All rights reserved.
 * This program are made available under the terms of the Apache License, Version 2.0
 * which accompanies this distribution and is available at http://www.apache.org/licenses/LICENSE-2.0.html.*/



/**
 * @class SuperMap.Layer.MapVLayer
 * @category  Visualization MapV
 * @classdesc MapV å¾å±ã
 * @extends {SuperMap.Layer}
 * @param {string} name - å¾å±åã
 * @param {Object} options - å¯éåæ°ã
 * @param {Mapv.DataSet} options.dataSet - mapv ç dataSet å¯¹è±¡ã
 * @param {Object} options.options - mapv ç»å¾é£æ ¼éç½®ä¿¡æ¯ã
 */
class MapVLayer_MapVLayer extends SuperMap_SuperMap.Layer {
    constructor(name, options) {
        super(name, options);

        /**
         * @member {mapv.DataSet} SuperMap.Layer.MapVLayer.prototype.dataSet
         * @description mapv dataset å¯¹è±¡ã
         */
        this.dataSet = null;

        /**
         * @member {Object} SuperMap.Layer.MapVLayer.prototype.options
         * @description mapv ç»å¾é£æ ¼éç½®ä¿¡æ¯ã
         */
        this.options = null;

        /**
         * @member {boolean} [SuperMap.Layer.MapVLayer.prototype.supported=false]
         * @description å½åæµè§å¨æ¯å¦æ¯æ canvas ç»å¶ãå³å®äº MapV å¾æ¯å¦å¯ç¨ï¼åé¨å¤æ­ä½¿ç¨ã
         */
        this.supported = false;

        /**
         * @member {Canvas} SuperMap.Layer.MapVLayer.prototype.canvas
         * @description MapV å¾ä¸»ç»å¶é¢æ¿ã
         */
        this.canvas = null;

        /**
         * @private
         * @member {CanvasContext} SuperMap.Layer.MapVLayer.prototype.canvasContext
         * @description MapV å¾ä¸»ç»å¶å¯¹è±¡ã
         */
        this.canvasContext = null;

        if (options) {
            SuperMap_SuperMap.Util.extend(this, options);
        }
        //MapVå¾è¦æ±ä½¿ç¨canvasç»å¶ï¼å¤æ­æ¯å¦æ¯æ
        this.canvas = document.createElement("canvas");
        if (!this.canvas.getContext) {
            return;
        }
        this.supported = true;
        //æå»ºç»å¾é¢æ¿
        this.canvas.style.position = "absolute";
        this.canvas.style.top = 0 + "px";
        this.canvas.style.left = 0 + "px";
        this.div.appendChild(this.canvas);
        var context = this.options && this.options.context || "2d";
        this.canvasContext = this.canvas.getContext(context);
        var global$2 = typeof window === 'undefined' ? {} : window;
        var devicePixelRatio = this.devicePixelRatio = global$2.devicePixelRatio;
        if (this.options.context == '2d') {
            this.canvasContext.scale(devicePixelRatio, devicePixelRatio);
        }
        this.attribution = "Â© 2018 ç¾åº¦ <a href='http://mapv.baidu.com' target='_blank'>MapV</a> with <span>Â© <a target='_blank' href='http://iclient.supermap.io' " +
            "style='color: #08c;text-decoration: none;'>SuperMap iClient</a></span>";

        this.CLASS_NAME = "SuperMap.Layer.MapVLayer";
    }


    /**
     * @function SuperMap.Layer.MapVLayer.prototype.destroy
     * @override
     */
    destroy() {
        this.dataSet = null;
        this.options = null;
        this.renderer = null;
        this.supported = null;
        this.canvas = null;
        this.canvasContext = null;
        this.maxWidth = null;
        this.maxHeight = null;
        super.destroy();
    }


    /**
     * @function SuperMap.Layer.MapVLayer.prototype.addData
     * @description è¿½å æ°æ®ã
     * @param {mapv.DataSet} dataSet - mapv æ°æ®éã
     * @param {Object} options - mapv ç»å¾åæ°ã
     */
    addData(dataSet, options) {
        this.renderer && this.renderer.addData(dataSet, options);
    }


    /**
     * @function SuperMap.Layer.MapVLayer.prototype.
     * @description è®¾ç½®æ°æ®ã
     * @param {mapv.DataSet} dataSet - mapv æ°æ®éã
     * @param {Object} options - mapv ç»å¾åæ°ã
     */
    setData(dataSet, options) {
        this.renderer && this.renderer.setData(dataSet, options);
    }


    /**
     * @function SuperMap.Layer.MapVLayer.prototype.getData
     * @description è·åæ°æ®ã
     * @returns {mapv.DataSet} - mapv æ°æ®éã
     */
    getData() {
        if (this.renderer) {
            this.dataSet = this.renderer.getData();
        }
        return this.dataSet;
    }

    /**
     * @function SuperMap.Layer.MapVLayer.prototype.removeData
     * @description å é¤ç¬¦åè¿æ»¤æ¡ä»¶çæ°æ®ã
     * @param {function} filter - è¿æ»¤æ¡ä»¶ãæ¡ä»¶åæ°ä¸ºæ°æ®é¡¹ï¼è¿åå¼ä¸º trueï¼è¡¨ç¤ºå é¤è¯¥åç´ ï¼å¦åè¡¨ç¤ºä¸å é¤ã
     * @example
     *  filter=function(data){
     *    if(data.id=="1"){
     *      return true
     *    }
     *    return false;
     *  }
     */
    removeData(filter) {
        this.renderer && this.renderer.removeData(filter);
    }

    /**
     * @function SuperMap.Layer.MapVLayer.prototype.clearData
     * @description æ¸é¤æ°æ®
     */
    clearData() {
        this.renderer.clearData();
    }


    /**
     * @function SuperMap.Layer.MapVLayer.prototype.setMap
     * @description å¾å±å·²ç»æ·»å å° Map ä¸­ã
     *              å¦æå½åæµè§å¨æ¯æ canvasï¼åå¼å§æ¸²æè¦ç´ ï¼å¦æä¸æ¯æåç§»é¤å¾å±ã
     * @param {SuperMap.Map} map - éè¦ç»å®ç map å¯¹è±¡ã
     */
    setMap(map) {
        super.setMap(map);
        this.renderer = new MapVRenderer_MapVRenderer(map, this, this.dataSet, this.options);
        if (!this.supported) {
            this.map.removeLayer(this);
        } else {
            this.redraw();
        }
    }

    /**
     * @function SuperMap.Layer.MapVLayer.prototype.moveTo
     * @description éç½®å½å MapV å¾å±ç divï¼åä¸æ¬¡ä¸ Map æ§ä»¶ä¿æä¸è´ã
     *              ä¿®æ¹å½åæ¾ç¤ºèå´ï¼å½å¹³ç§»æèç¼©æ¾ç»æåå¼å§éç» MapV å¾çæ¸²æææã
     * @param {SuperMap.Bounds} bounds - å¾å±èå´ã
     * @param {boolean} [zoomChanged] - ç¼©æ¾çº§å«æ¯å¦æ¹åã
     * @param {boolean} [dragging] - æ¯å¦æå¨ã
     */
    moveTo(bounds, zoomChanged, dragging) {
        super.moveTo(bounds, zoomChanged, dragging);
        if (!this.supported) {
            return;
        }
        this.zoomChanged = zoomChanged;
        if (!dragging) {
            this.div.style.visibility = "hidden";
            this.div.style.left = -parseInt(this.map.layerContainerDiv.style.left) + "px";
            this.div.style.top = -parseInt(this.map.layerContainerDiv.style.top) + "px";
            /*this.canvas.style.left = this.div.style.left;
             this.canvas.style.top = this.div.style.top;*/
            var size = this.map.getSize();
            this.div.style.width = parseInt(size.w) + "px";
            this.div.style.height = parseInt(size.h) + "px";
            this.canvas.width = parseInt(size.w);
            this.canvas.height = parseInt(size.h);
            this.canvas.style.width = this.div.style.width;
            this.canvas.style.height = this.div.style.height;
            this.maxWidth = size.w;
            this.maxHeight = size.h;
            this.div.style.visibility = "";
            if (!zoomChanged) {
                this.renderer && this.renderer.render();
            }
        }

        if (zoomChanged) {
            this.renderer && this.renderer.render();
        }
    }


    /**
     * @function SuperMap.Layer.MapVLayer.prototype.transferToMapLatLng
     * @description å°ç»çº¬åº¦è½¬æåºå¾çæå½±åæ ã
     * @param {SuperMap.Lonlat} latLng - ç»çº¬åº¦åæ ã
     * @deprecated
     */
    transferToMapLatLng(latLng) {
        var source = "EPSG:4326",
            dest = "EPSG:4326";
        var unit = this.map.getUnits() || "degree";
        if (["m", "meter"].indexOf(unit.toLowerCase()) > -1) {
            dest = "EPSG:3857";
        }
        return new SuperMap_SuperMap.LonLat(latLng.lon, latLng.lat).transform(source, dest);
    }

}

SuperMap_SuperMap.Layer.MapVLayer = MapVLayer_MapVLayer;
// CONCATENATED MODULE: ./src/classic/overlay/mapv/index.js
/* CopyrightÂ© 2000 - 2019 SuperMap Software Co.Ltd. All rights reserved.
 * This program are made available under the terms of the Apache License, Version 2.0
 * which accompanies this distribution and is available at http://www.apache.org/licenses/LICENSE-2.0.html.*/

// CONCATENATED MODULE: ./src/classic/overlay/index.js
/* CopyrightÂ© 2000 - 2019 SuperMap Software Co.Ltd. All rights reserved.
 * This program are made available under the terms of the Apache License, Version 2.0
 * which accompanies this distribution and is available at http://www.apache.org/licenses/LICENSE-2.0.html.*/


// CONCATENATED MODULE: ./src/common/iServer/AddressMatchService.js
/* CopyrightÂ© 2000 - 2019 SuperMap Software Co.Ltd. All rights reserved.
 * This program are made available under the terms of the Apache License, Version 2.0
 * which accompanies this distribution and is available at http://www.apache.org/licenses/LICENSE-2.0.html.*/






/**
 * @class SuperMap.AddressMatchService
 * @category iServer AddressMatch
 * @classdesc å°åå¹éæå¡ï¼åæ¬æ­£åå¹éåååå¹éã
 * @param {string} url - å°åå¹éæå¡å°åã
 * @param {Object} options - åæ°ã
 */
class AddressMatchService_AddressMatchService extends CommonServiceBase_CommonServiceBase {

    constructor(url, options) {
        super(url, options);
        this.CLASS_NAME = "SuperMap.AddressMatchService";
    }

    /**
     * @function SuperMap.AddressMatchService.prototype.destroy
     * @override
     */
    destroy() {
        super.destroy();
    }

    /**
     * @function SuperMap.AddressMatchService.prototype.code
     * @param {string} url - æ­£åå°åå¹éæå¡å°åã
     * @param {SuperMap.GeoCodingParameter} params - æ­£åå°åå¹éæå¡åæ°ã
     */
    code(url, params) {
        if (!(params instanceof GeoCodingParameter_GeoCodingParameter)) {
            return;
        }
        this.processAsync(url, params);
    }

    /**
     * @function SuperMap.AddressMatchService.prototype.decode
     * @param {string} url - ååå°åå¹éæå¡å°åã
     * @param {SuperMap.GeoDecodingParameter} params - ååå°åå¹éæå¡åæ°ã
     */
    decode(url, params) {
        if (!(params instanceof GeoDecodingParameter_GeoDecodingParameter)) {
            return;
        }
        this.processAsync(url, params);
    }

    /**
     * @function SuperMap.AddressMatchService.prototype.processAsync
     * @description è´è´£å°å®¢æ·ç«¯çå¨æåæ®µæå¡åæ°ä¼ éå°æå¡ç«¯ã
     * @param {string} url - æå¡å°åã
     * @param {Object} params - åæ°ã
     */

    processAsync(url, params) {
        var me = this;
        FetchRequest.get(url, params,{proxy: me.proxy}).then(function (response) {
            return response.json();
        }).then(function (result) {
            if (result) {
                me.serviceProcessCompleted(result);
            } else {
                me.serviceProcessFailed(result);
            }
        }).catch(function (e) {
            me.eventListeners.processFailed({error: e});
        });
    }

    /**
     * @function SuperMap.AddressMatchService.prototype.serviceProcessCompleted
     * @param {Object} result - æå¡å¨è¿åçç»æå¯¹è±¡ã
     * @description æå¡æµç¨æ¯å¦å®æ
     */
    serviceProcessCompleted(result) {
        super.serviceProcessCompleted(result);
    }

    /**
     * @function SuperMap.AddressMatchService.prototype.serviceProcessCompleted
     * @param {Object} result - æå¡å¨è¿åçç»æå¯¹è±¡ã
     * @description æå¡æµç¨æ¯å¦å¤±è´¥
     */
    serviceProcessFailed(result) {
        super.serviceProcessFailed(result);
    }
}

SuperMap.AddressMatchService = AddressMatchService_AddressMatchService;
// CONCATENATED MODULE: ./src/classic/services/AddressMatchService.js
/* CopyrightÂ© 2000 - 2019 SuperMap Software Co.Ltd. All rights reserved.
 * This program are made available under the terms of the Apache License, Version 2.0
 * which accompanies this distribution and is available at http://www.apache.org/licenses/LICENSE-2.0.html.*/




/**
 * @class SuperMap.REST.AddressMatchService
 * @category  iServer AddressMatch
 * @classdesc å°åå¹éæå¡ï¼åæ¬æ­£åå¹éåååå¹éã
 * @extends {SuperMap.CommonServiceBase}
 * @param {string} url - æå¡å°åã
 * @param {Object} options - åæ°ã
 */
class services_AddressMatchService_AddressMatchService extends CommonServiceBase_CommonServiceBase {

    constructor(url, options) {
        super(url, options);
        this.CLASS_NAME = "SuperMap.REST.AddressMatchService";
    }

    /**
     * @function SuperMap.REST.AddressMatchService.prototype.code
     * @description æ­£åå¹éã
     * @param {SuperMap.GeoCodingParameter} params - æ­£åå¹éåæ°ã
     * @param {RequestCallback} callback - åè°å½æ°ã
     */
    code(params, callback) {
        var me = this;
        var addressMatchService = new AddressMatchService_AddressMatchService(me.url, {
            proxy: me.proxy,
            withCredentials: me.withCredentials,
            serverType: me.serverType,
            eventListeners: {
                scope: me,
                processCompleted: callback,
                processFailed: callback
            }
        });
        addressMatchService.code(me.url + '/geocoding', params);
    }

    /**
     * @function SuperMap.REST.AddressMatchService.prototype.decode
     * @description ååå¹éã
     * @param {SuperMap.GeoDecodingParameter} params - ååå¹éåæ°ã
     * @param {RequestCallback} callback - åè°å½æ°ã
     */
    decode(params, callback) {
        var me = this;
        var addressMatchService = new AddressMatchService_AddressMatchService(me.url, {
            proxy: me.proxy,
            withCredentials: me.withCredentials,
            serverType: me.serverType,
            eventListeners: {
                scope: me,
                processCompleted: callback,
                processFailed: callback
            }
        });
        addressMatchService.decode(me.url + '/geodecoding', params);
    }
}

SuperMap_SuperMap.REST.AddressMatchService = services_AddressMatchService_AddressMatchService;
// CONCATENATED MODULE: ./src/common/iServer/ProcessingServiceBase.js
/* CopyrightÂ© 2000 - 2019 SuperMap Software Co.Ltd. All rights reserved.
 * This program are made available under the terms of the Apache License, Version 2.0
 * which accompanies this distribution and is available at http://www.apache.org/licenses/LICENSE-2.0.html.*/






/**
 * @class SuperMap.ProcessingServiceBase
 * @category  iServer ProcessingService
 * @classdesc åå¸å¼åææå¡åºç±»
 * @extends {SuperMap.CommonServiceBase}
 * @param {string} url - åå¸å¼åææå¡å°åã
 * @param {Object} options - åæ°ã
 * @param {SuperMap.Events} options.events - å¤çææäºä»¶çå¯¹è±¡ã
 * @param {number} options.index - æå¡è®¿é®å°åå¨æ°ç»ä¸­çä½ç½®ã
 * @param {number} options.length - æå¡è®¿é®å°åæ°ç»é¿åº¦ã
 * @param {SuperMap.ServerType} [options.serverType=SuperMap.ServerType.ISERVER] - æå¡å¨ç±»åï¼iServer|iPortal|Onlineã
 * @param {Object} [options.eventListeners] - äºä»¶çå¬å¨å¯¹è±¡ãæ processCompleted å±æ§å¯ä¼ å¥å¤çå®æåçåè°å½æ°ãprocessFailed å±æ§ä¼ å¥å¤çå¤±è´¥åçåè°å½æ°ã
 */
class ProcessingServiceBase_ProcessingServiceBase extends CommonServiceBase_CommonServiceBase {

    constructor(url, options) {
        options = options || {};
        /*
         * Constant: EVENT_TYPES
         * {Array.<string>}
         * æ­¤ç±»æ¯æçäºä»¶ç±»å
         * - *processCompleted* åå»ºæååè§¦åçäºä»¶ã
         * - *processFailed* åå»ºå¤±è´¥åè§¦åçäºä»¶ ã
         * - *processRunning* åå»ºè¿ç¨çæ´ä¸ªé¶æ®µé½ä¼è§¦åçäºä»¶ï¼ç¨äºè·ååå»ºè¿ç¨çç¶æ ã
         */
        options.EVENT_TYPES = ["processCompleted", "processFailed", "processRunning"];
        super(url, options);

        this.CLASS_NAME = "SuperMap.ProcessingServiceBase";
    }

    /**
     * @function SuperMap.ProcessingServiceBase.prototype.destroy
     * @override
     */
    destroy() {
        super.destroy();
    }

    /**
     * @function SuperMap.ProcessingServiceBase.prototype.getJobs
     * @description è·ååå¸å¼åæä»»å¡ã
     * @param {string} url - èµæºå°åã
     */
    getJobs(url) {
        var me = this;
        FetchRequest.get(me._processUrl(url), null, {
            proxy: me.proxy
        }).then(function (response) {
            return response.json();
        }).then(function (result) {
            me.events.triggerEvent("processCompleted", {
                result: result
            });
        }).catch(function (e) {
            me.eventListeners.processFailed({
                error: e
            });
        });
    }

    /**
     * @function SuperMap.ProcessingServiceBase.prototype.addJob
     * @description æ·»å åå¸å¼åæä»»å¡ã
     * @param {string} url - èµæºæ ¹å°åã
     * @param {Object} params - åå»ºä¸ä¸ªç©ºé´åæçè¯·æ±åæ°ã
     * @param {string} paramType - è¯·æ±åæ°ç±»åã
     * @param {number} seconds - å¼å§åå»ºåï¼è·ååå»ºæåç»æçæ¶é´é´éã
     */
    addJob(url, params, paramType, seconds) {
        var me = this,
            parameterObject = null;
        if (params && params instanceof paramType) {
            parameterObject = new Object();
            paramType.toObject(params, parameterObject);
        }
        var options = {
            proxy: me.proxy,
            headers: {
                'Content-Type': 'application/x-www-form-urlencoded'
            },
            withCredentials: me.withCredentials,
            isInTheSameDomain: me.isInTheSameDomain
        };
        FetchRequest.post(me._processUrl(url), JSON.stringify(parameterObject), options).then(function (response) {
            return response.json();
        }).then(function (result) {
            if (result.succeed) {
                me.serviceProcessCompleted(result, seconds);
            } else {
                me.serviceProcessFailed(result);
            }
        }).catch(function (e) {
            me.serviceProcessFailed({
                error: e
            });
        });
    }

    serviceProcessCompleted(result, seconds) {
        result = Util.transformResult(result);
        seconds = seconds || 1000;
        var me = this;
        if (result) {
            var id = setInterval(function () {
                FetchRequest.get(me._processUrl(result.newResourceLocation), {
                        _t: new Date().getTime()
                    })
                    .then(function (response) {
                        return response.json();
                    }).then(function (job) {
                        me.events.triggerEvent("processRunning", {
                            id: job.id,
                            state: job.state
                        });
                        if (job.state.runState === 'LOST' || job.state.runState === 'KILLED' || job.state.runState === 'FAILED') {
                            clearInterval(id);
                            me.events.triggerEvent("processFailed", {
                                error: job.state.errorMsg,
                                state: job.state.runState
                            });
                        }
                        if (job.state.runState === 'FINISHED' && job.setting.serviceInfo) {
                            clearInterval(id);
                            me.events.triggerEvent("processCompleted", {
                                result: job
                            });
                        }
                    }).catch(function (e) {
                        clearInterval(id);
                        me.events.triggerEvent("processFailed", {
                            error: e
                        });
                    });
            }, seconds);
        }
    }

    serviceProcessFailed(result) {
        super.serviceProcessFailed(result);
    }

    //ä¸ºä¸æ¯ä»¥.jsonç»å°¾çurlå ä¸.jsonï¼å¹¶ä¸å¦æætokençè¯ï¼å¨.jsonåå ä¸tokenåæ°ã
    _processUrl(url) {
        if (url.indexOf('.json') === -1) {
            url += '.json';
        }
        if (SecurityManager_SecurityManager.getToken(url)) {
            url += '?token=' + SecurityManager_SecurityManager.getToken(url);
        }
        return url;
    }

}

SuperMap.ProcessingServiceBase = ProcessingServiceBase_ProcessingServiceBase;
// CONCATENATED MODULE: ./src/common/iServer/KernelDensityJobsService.js
/* CopyrightÂ© 2000 - 2019 SuperMap Software Co.Ltd. All rights reserved.
 * This program are made available under the terms of the Apache License, Version 2.0
 * which accompanies this distribution and is available at http://www.apache.org/licenses/LICENSE-2.0.html.*/




/**
 * @class SuperMap.KernelDensityJobsService
 * @category  iServer ProcessingService DensityAnalyst
 * @classdesc æ ¸å¯åº¦åææå¡ç±»
 * @extends {SuperMap.ProcessingServiceBase}
 * @param {string} url -æ ¸å¯åº¦åææå¡å°åã
 * @param {Object} options - äº¤äºæå¡æ¶æéå¯éåæ°ã
 */
class KernelDensityJobsService_KernelDensityJobsService extends ProcessingServiceBase_ProcessingServiceBase {

    constructor(url, options) {
        super(url, options);
        this.url += "/spatialanalyst/density";
        this.CLASS_NAME = "SuperMap.KernelDensityJobsService";
    }

    /**
     * @function SuperMap.KernelDensityJobsService.prototype.destroy
     * @override
     */
    destroy() {
        super.destroy();
    }

    /**
     * @function SuperMap.KernelDensityJobsService.prototype.getKernelDensityJobs
     * @description è·åæ ¸å¯åº¦åæä»»å¡
     */
    getKernelDensityJobs() {
        super.getJobs(this.url);
    }

    /**
     * @function SuperMap.KernelDensityJobsService.prototype.getKernelDensityJobs
     * @description è·åæå®idçæ ¸å¯åº¦åææå¡
     * @param {string} id - æå®è¦è·åæ°æ®çid
     */
    getKernelDensityJob(id) {
        super.getJobs(this.url + '/' + id);
    }

    /**
     * @function SuperMap.KernelDensityJobsService.prototype.addKernelDensityJob
     * @description æ°å»ºæ ¸å¯åº¦åææå¡
     * @param {SuperMap.KernelDensityJobParameter} params - åå»ºä¸ä¸ªç©ºé´åæçè¯·æ±åæ°ã
     * @param {number} seconds - å¼å§åå»ºåï¼è·ååå»ºæåç»æçæ¶é´é´éã
     */
    addKernelDensityJob(params, seconds) {
        super.addJob(this.url, params, KernelDensityJobParameter_KernelDensityJobParameter, seconds);
    }

}

SuperMap.KernelDensityJobsService = KernelDensityJobsService_KernelDensityJobsService;
// CONCATENATED MODULE: ./src/common/iServer/SingleObjectQueryJobsService.js
/* CopyrightÂ© 2000 - 2019 SuperMap Software Co.Ltd. All rights reserved.
 * This program are made available under the terms of the Apache License, Version 2.0
 * which accompanies this distribution and is available at http://www.apache.org/licenses/LICENSE-2.0.html.*/




/**
 * @class SuperMap.SingleObjectQueryJobsService
 * @category  iServer ProcessingService Query
 * @classdesc åå¯¹è±¡æ¥è¯¢åææå¡ç±»
 * @extends {SuperMap.ProcessingServiceBase}
 * @param {string} url - åå¯¹è±¡ç©ºé´æ¥è¯¢åææå¡å°åã
 * @param {Object} options - åæ°ã
 */
class SingleObjectQueryJobsService_SingleObjectQueryJobsService extends ProcessingServiceBase_ProcessingServiceBase {

    constructor(url, options) {
        super(url, options);
        this.url += "/spatialanalyst/query";
        this.CLASS_NAME = "SuperMap.SingleObjectQueryJobsService";
    }

    /**
     *@override
     */
    destroy() {
        super.destroy();
    }

    /**
     * @function SuperMap.SingleObjectQueryJobsService.protitype.getQueryJobs
     * @description è·ååå¯¹è±¡ç©ºé´æ¥è¯¢åæææä»»å¡
     */
    getQueryJobs() {
        super.getJobs(this.url);
    }

    /**
     * @function SuperMap.KernelDensityJobsService.protitype.getQueryJob
     * @description è·åæå®idçåå¯¹è±¡ç©ºé´æ¥è¯¢åææå¡
     * @param {string} id - æå®è¦è·åæ°æ®çid
     */
    getQueryJob(id) {
        super.getJobs(this.url + '/' + id);
    }

    /**
     * @function SuperMap.SingleObjectQueryJobsService.protitype.addQueryJob
     * @description æ°å»ºåå¯¹è±¡ç©ºé´æ¥è¯¢åææå¡
     * @param {SuperMap.SingleObjectQueryJobsParameter} params - åå»ºä¸ä¸ªç©ºé´åæçè¯·æ±åæ°ã
     * @param {number} seconds - å¼å§åå»ºåï¼è·ååå»ºæåç»æçæ¶é´é´éã
     */
    addQueryJob(params, seconds) {
        super.addJob(this.url, params, SingleObjectQueryJobsParameter_SingleObjectQueryJobsParameter, seconds);
    }

}

SuperMap.SingleObjectQueryJobsService = SingleObjectQueryJobsService_SingleObjectQueryJobsService;
// CONCATENATED MODULE: ./src/common/iServer/SummaryMeshJobsService.js
/* CopyrightÂ© 2000 - 2019 SuperMap Software Co.Ltd. All rights reserved.
 * This program are made available under the terms of the Apache License, Version 2.0
 * which accompanies this distribution and is available at http://www.apache.org/licenses/LICENSE-2.0.html.*/




/**
 * @class SuperMap.SummaryMeshJobsService
 * @category  iServer ProcessingService AggregatePoints
 * @classdesc ç¹èååæä»»å¡ç±»ã
 * @param {string} url -ç¹èååæä»»å¡å°åã
 * @param {Object} options - åæ°ã
 * @param {SuperMap.Events} options.events - å¤çææäºä»¶çå¯¹è±¡ã<br>
 * @param {Object} options.eventListeners - å¬å¨å¯¹è±¡ã<br>
 * @param {SuperMap.ServerType} options.serverType - æå¡å¨ç±»åï¼iServer|iPortal|Onlineã<br>
 * @param {number} options.index - æå¡è®¿é®å°åå¨æ°ç»ä¸­çä½ç½®ã<br>
 * @param {number} options.length - æå¡è®¿é®å°åæ°ç»é¿åº¦ã
 */
class SummaryMeshJobsService_SummaryMeshJobsService extends ProcessingServiceBase_ProcessingServiceBase {

    constructor(url, options) {
        super(url, options);
        this.url += "/spatialanalyst/aggregatepoints";
        this.CLASS_NAME = "SuperMap.SummaryMeshJobsService";
    }

    /**
     * @override
     */
    destroy() {
        super.destroy();
    }

    /**
     * @function SuperMap.SummaryMeshJobsService.prototype.getSummaryMeshJobs
     * @description è·åç¹èååæä»»å¡
     */
    getSummaryMeshJobs() {
        super.getJobs(this.url);
    }

    /**
     * @function SuperMap.SummaryMeshJobsService.prototype.getSummaryMeshJob
     * @description è·åæå®ipçç¹èååæä»»å¡
     * @param {string} id - æå®è¦è·åæ°æ®çid
     */
    getSummaryMeshJob(id) {
        super.getJobs(this.url + '/' + id);
    }

    /**
     * @function SuperMap.SummaryMeshJobsService.prototype.addSummaryMeshJob
     * @description æ°å»ºç¹èååææå¡
     * @param {SuperMap.SummaryMeshJobParameter} params - åå»ºä¸ä¸ªç©ºé´åæçè¯·æ±åæ°ã
     * @param {number} seconds - å¼å§åå»ºåï¼è·ååå»ºæåç»æçæ¶é´é´éã
     */
    addSummaryMeshJob(params, seconds) {
        super.addJob(this.url, params, SummaryMeshJobParameter_SummaryMeshJobParameter, seconds);
    }

}

SuperMap.SummaryMeshJobsService = SummaryMeshJobsService_SummaryMeshJobsService;
// CONCATENATED MODULE: ./src/common/iServer/SummaryRegionJobsService.js
/* CopyrightÂ© 2000 - 2019 SuperMap Software Co.Ltd. All rights reserved.
 * This program are made available under the terms of the Apache License, Version 2.0
 * which accompanies this distribution and is available at http://www.apache.org/licenses/LICENSE-2.0.html.*/




/**
 * @class SuperMap.SummaryRegionJobsService
 * @category  iServer ProcessingService SummaryRegion
 * @classdesc åºåæ±æ»åææå¡ç±»
 * @extends {SuperMap.ProcessingServiceBase}
 * @param {string} url - åºåæ±æ»åææå¡å°åã
 * @param {Object} options - åæ°ã
 */
class SummaryRegionJobsService_SummaryRegionJobsService extends ProcessingServiceBase_ProcessingServiceBase {

    constructor(url, options) {
        super(url, options);
        this.url += "/spatialanalyst/summaryregion";
        this.CLASS_NAME = "SuperMap.SummaryRegionJobsService";
    }

    /**
     *@override
     */
    destroy() {
        super.destroy();
    }

    /**
     * @function SuperMap.SummaryRegionJobsService.prototype.getSummaryRegionJobs
     * @description è·ååºåæ±æ»åæä»»å¡éåã
     */
    getSummaryRegionJobs() {
        super.getJobs(this.url);
    }

    /**
     * @function SuperMap.SummaryRegionJobsService.prototype.getSummaryRegionJob
     * @description è·åæå®idçåºåæ±æ»åæä»»å¡ã
     * @param {string} id -è¦è·ååºåæ±æ»åæä»»å¡çid
     */
    getSummaryRegionJob(id) {
        super.getJobs(this.url + '/' + id);
    }

    /**
     * @function SuperMap.SummaryRegionJobsService.prototype.addSummaryRegionJob
     * @description æ°å»ºåºåæ±æ»ä»»å¡ã
     * @param {SuperMap.SummaryRegionJobParameter} params - åå»ºä¸ä¸ªåºåæ±æ»ä»»å¡çè¯·æ±åæ°ã
     * @param {number} seconds - å¼å§åå»ºåï¼è·ååå»ºæåç»æçæ¶é´é´éã
     */
    addSummaryRegionJob(params, seconds) {
        super.addJob(this.url, params, SummaryRegionJobParameter_SummaryRegionJobParameter, seconds);
    }

}

SuperMap.SummaryRegionJobsService = SummaryRegionJobsService_SummaryRegionJobsService;
// CONCATENATED MODULE: ./src/common/iServer/VectorClipJobsParameter.js
/* CopyrightÂ© 2000 - 2019 SuperMap Software Co.Ltd. All rights reserved.
 * This program are made available under the terms of the Apache License, Version 2.0
 * which accompanies this distribution and is available at http://www.apache.org/licenses/LICENSE-2.0.html.*/






/**
 * @class SuperMap.VectorClipJobsParameter
 * @category  iServer ProcessingService VectorClip
 * @classdesc ç¢éè£åªåæä»»å¡åæ°ç±»ã
 * @param {Object} options - åæ°ã 
 * @param {string} options.datasetName - æ°æ®éåã 
 * @param {string} options.datasetOverlay - è£åªå¯¹è±¡æ°æ®éã 
 * @param {SuperMap.ClipAnalystMode} [options.mode=SuperMap.ClipAnalystMode.CLIP] - è£åªåææ¨¡å¼ã 
 * @param {SuperMap.OutputSetting} [options.output] - è¾åºåæ°è®¾ç½®ã 
 * @param {SuperMap.MappingParameters} [options.mappingParameters] - åæåç»æå¯è§åçåæ°ç±»ã   
 */
class VectorClipJobsParameter_VectorClipJobsParameter {

    constructor(options) {
        options = options || {};

        /**
         * @member {string} SuperMap.VectorClipJobsParameter.prototype.datasetName
         * @description æ°æ®éåã
         */
        this.datasetName = "";

        /**
         * @member {string} SuperMap.VectorClipJobsParameter.prototype.datasetOverlay
         * @description è£åªå¯¹è±¡æ°æ®éã
         */
        this.datasetVectorClip = "";

        /**
         * @member {string} SuperMap.VectorClipJobsParameter.prototype.geometryClip
         * @description è£åªå ä½å¯¹è±¡ã
         */
        this.geometryClip = "";

        /**
         * @member {SuperMap.ClipAnalystMode} [SuperMap.VectorClipJobsParameter.prototype.mode=ClipAnalystMode.CLIP]
         * @description è£åªåææ¨¡å¼ ã
         */
        this.mode = ClipAnalystMode.CLIP;

        /**
         * @member {SuperMap.OutputSetting} SuperMap.VectorClipJobsParameter.prototype.output
         * @description è¾åºåæ°è®¾ç½®ç±»ã
         */
        this.output = null;

        /**
         * @member {SuperMap.MappingParameters} [SuperMap.VectorClipJobsParameter.prototype.mappingParameters]
         * @description åæåç»æå¯è§åçåæ°ç±»ã   
         */
        this.mappingParameters = null;

        Util.extend(this, options);

        this.CLASS_NAME = "SuperMap.VectorClipJobsParameter";
    }

    /**
     * @function SuperMap.VectorClipJobsParameter.prototype.destroy
     * @description éæ¾èµæºï¼å°å¼ç¨èµæºçå±æ§ç½®ç©ºã
     */
    destroy() {
        this.datasetName = null;
        this.datasetVectorClip = null;
        this.geometryClip = null;
        this.mode = null;
        if (this.output instanceof OutputSetting_OutputSetting) {
            this.output.destroy();
            this.output = null;
        }
        if (this.mappingParameters instanceof MappingParameters_MappingParameters) {
            this.mappingParameters.destroy();
            this.mappingParameters = null;
        }
    }

    /**
     * @function SuperMap.VectorClipJobsParameter.toObject
     * @param {Object} vectorClipJobsParameter - åºåæ±æ»åææå¡åæ°ã
     * @param {Object} tempObj - ç®æ å¯¹è±¡ã
     * @description ç¢éè£åªåæä»»å¡å¯¹è±¡ã
     */
    static toObject(vectorClipJobsParameter, tempObj) {
        for (var name in vectorClipJobsParameter) {
            if (name === "datasetName") {
                tempObj['input'] = tempObj['input'] || {};
                tempObj['input'][name] = vectorClipJobsParameter[name];
                continue;
            }
            if (name === "output"){
                tempObj['output'] = tempObj['output'] || {};
                tempObj['output'] = vectorClipJobsParameter[name];
                continue;
            }
            tempObj['analyst'] = tempObj['analyst'] || {};
            tempObj['analyst'][name] = vectorClipJobsParameter[name];
            if(name === 'mappingParameters'){
                tempObj['analyst'][name] = tempObj['analyst'][name] || {};
                tempObj['analyst']['mappingParameters'] = vectorClipJobsParameter[name];
            }
        }
    }

}

SuperMap.VectorClipJobsParameter = VectorClipJobsParameter_VectorClipJobsParameter;

// CONCATENATED MODULE: ./src/common/iServer/VectorClipJobsService.js
/* CopyrightÂ© 2000 - 2019 SuperMap Software Co.Ltd. All rights reserved.
 * This program are made available under the terms of the Apache License, Version 2.0
 * which accompanies this distribution and is available at http://www.apache.org/licenses/LICENSE-2.0.html.*/




/**
 * @class SuperMap.VectorClipJobsService
 * @category  iServer ProcessingService VectorClip
 * @classdesc ç¢éè£åªåææå¡ç±»
 * @extends {SuperMap.ProcessingServiceBase}
 * @param {string} url -ç¢éè£åªåææå¡å°åã
 * @param {Object} options - äº¤äºæå¡æ¶æéå¯éåæ°ã
 */
class VectorClipJobsService_VectorClipJobsService extends ProcessingServiceBase_ProcessingServiceBase {

    constructor(url, options) {
        super(url, options);
        this.url += "/spatialanalyst/vectorclip";
        this.CLASS_NAME = "SuperMap.VectorClipJobsService";
    }

    /**
     *@override
     */
    destroy() {
        super.destroy();
    }

    /**
     * @function SuperMap.VectorClipJobsService.protitype.getVectorClipJobs
     * @description è·åç¢éè£åªåæææä»»å¡
     */
    getVectorClipJobs() {
        super.getJobs(this.url);
    }

    /**
     * @function SuperMap.KernelDensityJobsService.protitype.getVectorClipJob
     * @description è·åæå®idçç¢éè£åªåææå¡
     * @param {string} id - æå®è¦è·åæ°æ®çid
     */
    getVectorClipJob(id) {
        super.getJobs(this.url + '/' + id);
    }

    /**
     * @function SuperMap.VectorClipJobsService.protitype.addVectorClipJob
     * @description æ°å»ºç¢éè£åªåææå¡
     * @param {SuperMap.VectorClipJobsParameter} params - åå»ºä¸ä¸ªç©ºé´åæçè¯·æ±åæ°ã
     * @param {number} seconds - å¼å§åå»ºåï¼è·ååå»ºæåç»æçæ¶é´é´éã
     */
    addVectorClipJob(params, seconds) {
        super.addJob(this.url, params, VectorClipJobsParameter_VectorClipJobsParameter, seconds);
    }

}

SuperMap.VectorClipJobsService = VectorClipJobsService_VectorClipJobsService;
// CONCATENATED MODULE: ./src/common/iServer/OverlayGeoJobsService.js
/* CopyrightÂ© 2000 - 2019 SuperMap Software Co.Ltd. All rights reserved.
 * This program are made available under the terms of the Apache License, Version 2.0
 * which accompanies this distribution and is available at http://www.apache.org/licenses/LICENSE-2.0.html.*/




/**
 * @class SuperMap.OverlayGeoJobsService
 * @category iServer ProcessingService OverlayAnalyst
 * @classdesc å å åæä»»å¡ç±»ã
 * @param {string} url - å å åæä»»å¡å°åã
 * @param {Object} options - åæ°ã
 * @param {SuperMap.Events} options.events - å¤çææäºä»¶çå¯¹è±¡ã
 * @param {Object} options.eventListeners - å¬å¨å¯¹è±¡ã
 * @param {SuperMap.ServerType} options.serverType - æå¡å¨ç±»åï¼iServer|iPortal|Onlineã
 * @param {number} options.index - æå¡è®¿é®å°åå¨æ°ç»ä¸­çä½ç½®ã
 * @param {number} options.length - æå¡è®¿é®å°åæ°ç»é¿åº¦ã
 */
class OverlayGeoJobsService_OverlayGeoJobsService extends ProcessingServiceBase_ProcessingServiceBase {

    constructor(url, options) {
        super(url, options);
        this.url += "/spatialanalyst/overlay";
        this.CLASS_NAME = "SuperMap.OverlayGeoJobsService";
    }

    /**
     * @override
     */
    destroy() {
        super.destroy();
    }

    /**
     * @function SuperMap.OverlayGeoJobsService.prototype.getOverlayGeoJobs
     * @description è·åå å åæä»»å¡
     */
    getOverlayGeoJobs() {
        super.getJobs(this.url);
    }

    /**
     * @function SuperMap.OverlayGeoJobsService.prototype.getOverlayGeoJob
     * @description è·åæå®idçå å åæä»»å¡
     * @param {string} id - æå®è¦è·åæ°æ®çid
     */
    getOverlayGeoJob(id) {
        super.getJobs(this.url + '/' + id);
    }

    /**
     * @function SuperMap.OverlayGeoJobsService.prototype.addOverlayGeoJob
     * @description æ°å»ºç¹å å ææå¡
     * @param {SuperMap.OverlayGeoJobParameter} params - åå»ºä¸ä¸ªå å åæçè¯·æ±åæ°ã
     * @param {number} seconds - å¼å§åå»ºåï¼è·ååå»ºæåç»æçæ¶é´é´éã
     */
    addOverlayGeoJob(params, seconds) {
        super.addJob(this.url, params, OverlayGeoJobParameter_OverlayGeoJobParameter, seconds);
    }

}
SuperMap.OverlayGeoJobsService = OverlayGeoJobsService_OverlayGeoJobsService;
// CONCATENATED MODULE: ./src/common/iServer/BuffersAnalystJobsService.js
/* CopyrightÂ© 2000 - 2019 SuperMap Software Co.Ltd. All rights reserved.
 * This program are made available under the terms of the Apache License, Version 2.0
 * which accompanies this distribution and is available at http://www.apache.org/licenses/LICENSE-2.0.html.*/




/**
 * @class SuperMap.BuffersAnalystJobsService
 * @category iServer ProcessingService BufferAnalyst
 * @classdesc ç¼å²åºåææå¡ç±»
 * @extends {SuperMap.ProcessingServiceBase}
 * @param {string} url - æå¡å°åã
 * @param {Object} options - åæ°ã
 */
class BuffersAnalystJobsService_BuffersAnalystJobsService extends ProcessingServiceBase_ProcessingServiceBase {
    constructor(url, options) {
        super(url, options);
        this.url += "/spatialanalyst/buffers";
        this.CLASS_NAME = "SuperMap.BuffersAnalystJobsService";
    }

    /**
     *@override
     */
    destroy() {
        super.destroy();
    }

    /**
     * @function SuperMap.BuffersAnalystJobsService.prototype.getBufferJobs
     * @description è·åç¼å²åºåæææä»»å¡
     */
    getBuffersJobs() {
        super.getJobs(this.url);
    }

    /**
     * @function SuperMap.BuffersAnalystJobsService.prototype.getBufferJob
     * @description è·åæå®idçç¼å²åºåææå¡
     * @param {string} id - æå®è¦è·åæ°æ®çidã
     */
    getBuffersJob(id) {
        super.getJobs(this.url + '/' + id);
    }

    /**
     * @function SuperMap.BuffersAnalystJobsService.prototype.addBufferJob
     * @description æ°å»ºç¼å²åºåææå¡
     * @param {SuperMap.BuffersAnalystJobsParameter} params - åå»ºä¸ä¸ªç©ºé´åæçè¯·æ±åæ°ã
     * @param {number} seconds - å¼å§åå»ºåï¼è·ååå»ºæåç»æçæ¶é´é´éã
     */
    addBuffersJob(params, seconds) {
        super.addJob(this.url, params, BuffersAnalystJobsParameter_BuffersAnalystJobsParameter, seconds);
    }
}

SuperMap.BuffersAnalystJobsService = BuffersAnalystJobsService_BuffersAnalystJobsService;
// CONCATENATED MODULE: ./src/common/iServer/TopologyValidatorJobsService.js
/* CopyrightÂ© 2000 - 2019 SuperMap Software Co.Ltd. All rights reserved.
 * This program are made available under the terms of the Apache License, Version 2.0
 * which accompanies this distribution and is available at http://www.apache.org/licenses/LICENSE-2.0.html.*/




/**
 * @class SuperMap.TopologyValidatorJobsService
 * @category  iServer ProcessingService TopologyValidator
 * @classdesc æææ£æ¥åææå¡ç±»
 * @extends {SuperMap.ProcessingServiceBase}
 * @param {string} url - æææ£æ¥åææå¡å°åã
 * @param {Object} options - åæ°ã
 */
class TopologyValidatorJobsService_TopologyValidatorJobsService extends ProcessingServiceBase_ProcessingServiceBase {

    constructor(url, options) {
        super(url, options);
        this.url += "/spatialanalyst/topologyvalidator";
        this.CLASS_NAME = "SuperMap.TopologyValidatorJobsService";
    }

    /**
     *@override
     */
    destroy() {
        super.destroy();
    }

    /**
     * @function SuperMap.TopologyValidatorJobsService.protitype.getTopologyValidatorJobs
     * @description è·åæææ£æ¥åæææä»»å¡
     */
    getTopologyValidatorJobs() {
        super.getJobs(this.url);
    }

    /**
     * @function SuperMap.TopologyValidatorJobsService.protitype.getTopologyValidatorJob
     * @description è·åæå®idçæææ£æ¥åææå¡
     * @param {string} id - æå®è¦è·åæ°æ®çid
     */
    getTopologyValidatorJob(id) {
        super.getJobs(this.url + '/' + id);
    }

    /**
     * @function SuperMap.TopologyValidatorJobsService.protitype.addTopologyValidatorJob
     * @description æ°å»ºæææ£æ¥åææå¡
     * @param {SuperMap.TopologyValidatorJobsParameter} params - åå»ºä¸ä¸ªç©ºé´åæçè¯·æ±åæ°ã
     * @param {number} seconds - å¼å§åå»ºåï¼è·ååå»ºæåç»æçæ¶é´é´éã
     */
    addTopologyValidatorJob(params, seconds) {
        super.addJob(this.url, params, TopologyValidatorJobsParameter_TopologyValidatorJobsParameter, seconds);
    }

}

SuperMap.TopologyValidatorJobsService = TopologyValidatorJobsService_TopologyValidatorJobsService;
// CONCATENATED MODULE: ./src/common/iServer/SummaryAttributesJobsService.js
/* CopyrightÂ© 2000 - 2019 SuperMap Software Co.Ltd. All rights reserved.
 * This program are made available under the terms of the Apache License, Version 2.0
 * which accompanies this distribution and is available at http://www.apache.org/licenses/LICENSE-2.0.html.*/




/**
 * @class SuperMap.SummaryAttributesJobsService
 * @category  iServer ProcessingService SummaryAttributes
 * @classdesc å±æ§æ±æ»åææå¡ç±»
 * @extends {SuperMap.ProcessingServiceBase}
 * @param {string} url - æ±æ»ç»è®¡åææå¡å°åã
 * @param {Object} options - åæ°ã
 */
class SummaryAttributesJobsService_SummaryAttributesJobsService extends ProcessingServiceBase_ProcessingServiceBase {

    constructor(url, options) {
        super(url, options);
        this.url += "/spatialanalyst/summaryattributes";
        this.CLASS_NAME = "SuperMap.SummaryAttributesJobsService";
    }

    /**
     *@override
     */
    destroy() {
        super.destroy();
    }

    /**
     * @function SuperMap.SummaryAttributesJobsService.protitype.getSummaryAttributesJobs
     * @description è·åå±æ§æ±æ»åæææä»»å¡
     */
    getSummaryAttributesJobs (){
        super.getJobs(this.url);
    }

    /**
     * @function SuperMap.SummaryAttributesJobsService.protitype.getSummaryAttributesJob
     * @description è·åæå®idçå±æ§æ±æ»åææå¡
     * @param {string} id - æå®è¦è·åæ°æ®çid
     */
    getSummaryAttributesJob(id) {
        super.getJobs(this.url + '/' + id);
    }

    /**
     * @function SuperMap.SummaryAttributesJobsService.protitype.addSummaryAttributesJob
     * @description æ°å»ºå±æ§æ±æ»åææå¡
     * @param {SuperMap.SummaryAttributesJobsParameter} params - åå»ºä¸ä¸ªç©ºé´åæçè¯·æ±åæ°ã
     * @param {number} seconds - å¼å§åå»ºåï¼è·ååå»ºæåç»æçæ¶é´é´éã
     */
    addSummaryAttributesJob(params, seconds) {
        super.addJob(this.url, params, SummaryAttributesJobsParameter_SummaryAttributesJobsParameter, seconds);
    }

}

SuperMap.SummaryAttributesJobsService = SummaryAttributesJobsService_SummaryAttributesJobsService;
// CONCATENATED MODULE: ./src/classic/services/ProcessingService.js
/* CopyrightÂ© 2000 - 2019 SuperMap Software Co.Ltd. All rights reserved.
 * This program are made available under the terms of the Apache License, Version 2.0
 * which accompanies this distribution and is available at http://www.apache.org/licenses/LICENSE-2.0.html.*/













/**
 * @class SuperMap.REST.ProcessingService
 * @category  iServer ProcessingService
 * @classdesc åå¸å¼åæç¸å³æå¡ç±»ã
 * @augments SuperMap.CommonServiceBase
 * @example
 * ç¨æ³ï¼
 * new SuperMap.REST.ProcessingService(url,options)
 *    .getKernelDensityJobs(function(result){
 *       //doSomething
 * })
 * @param {string} url - åå¸å¼åææå¡å°åã
 * @param {Object} options - å¯éåæ°ã
 */
class ProcessingService_ProcessingService extends CommonServiceBase_CommonServiceBase {

    constructor(url, options) {
        super(url, options);
        this.kernelDensityJobs = {};
        this.summaryMeshJobs = {};
        this.queryJobs = {};
        this.summaryRegionJobs = {};
        this.vectorClipJobs = {};
        this.overlayGeoJobs = {};
        this.buffersJobs = {};
        this.topologyValidatorJobs = {};
        this.summaryAttributesJobs = {};
    }

    /**
     * @function SuperMap.REST.ProcessingService.prototype.getKernelDensityJobs
     * @description è·åå¯åº¦åæçåè¡¨ã
     * @param {function} callback - è¯·æ±ç»æçåè°å½æ°ã
     * @param {SuperMap.DataFormat} [resultFormat=SuperMap.DataFormat.GEOJSON] - è¿åçç»æç±»åã
     */
    getKernelDensityJobs(callback, resultFormat) {
        var me = this,
            format = me._processFormat(resultFormat);
        var kernelDensityJobsService = new KernelDensityJobsService_KernelDensityJobsService(me.url, {
            proxy: me.proxy,
            withCredentials: me.withCredentials,
            serverType: me.serverType,
            eventListeners: {
                scope: me,
                processCompleted: callback,
                processFailed: callback
            },
            format: format
        });
        kernelDensityJobsService.getKernelDensityJobs();
    }

    /**
     * @function SuperMap.REST.ProcessingService.prototype.getKernelDensityJob
     * @description è·åæä¸ä¸ªå¯åº¦åæã
     * @param {string} id - ç©ºé´åæç idã
     * @param {function} callback - è¯·æ±ç»æçåè°å½æ°ã
     * @param {SuperMap.DataFormat} [resultFormat=SuperMap.DataFormat.GEOJSON] - è¿åçç»æç±»åã
     */
    getKernelDensityJob(id, callback, resultFormat) {
        var me = this,
            format = me._processFormat(resultFormat);
        var kernelDensityJobsService = new KernelDensityJobsService_KernelDensityJobsService(me.url, {
            proxy: me.proxy,
            withCredentials: me.withCredentials,
            serverType: me.serverType,
            eventListeners: {
                scope: me,
                processCompleted: callback,
                processFailed: callback
            },
            format: format
        });
        kernelDensityJobsService.getKernelDensityJob(id);
    }

    /**
     * @function SuperMap.REST.ProcessingService.prototype.addKernelDensityJob
     * @description æ°å»ºä¸ä¸ªå¯åº¦åæã
     * @param {SuperMap.KernelDensityJobParameter} params - åå»ºä¸ä¸ªç©ºé´åæçè¯·æ±åæ°ã
     * @param {function} callback - è¯·æ±ç»æçåè°å½æ°ã
     * @param {number} [seconds=1000] - å¼å§åå»ºåï¼è·ååå»ºæåç»æçæ¶é´é´éã
     * @param {SuperMap.DataFormat} [resultFormat=SuperMap.DataFormat.GEOJSON] - è¿åçç»æç±»åã
     */
    addKernelDensityJob(params, callback, seconds, resultFormat) {
        var me = this, format = me._processFormat(resultFormat);
        var kernelDensityJobsService = new KernelDensityJobsService_KernelDensityJobsService(me.url, {
            proxy: me.proxy,
            withCredentials: me.withCredentials,
            eventListeners: {
                scope: me,
                processCompleted: callback,
                processFailed: callback,
                processRunning(job) {
                    me.kernelDensityJobs[job.id] = job.state;
                }
            },
            format: format
        });
        kernelDensityJobsService.addKernelDensityJob(params, seconds);
    }

    /**
     * @function SuperMap.REST.ProcessingService.prototype.getKernelDensityJobState
     * @description è·åå¯åº¦åæçç¶æã
     * @param {string} id - å¯åº¦åæç idã
     * @returns {Object} - å¯åº¦åæçç¶æã
     */
    getKernelDensityJobState(id) {
        return this.kernelDensityJobs[id];
    }

    /**
     * @function SuperMap.REST.ProcessingService.prototype.getSummaryMeshJobs
     * @description è·åç¹èååæçåè¡¨ã
     * @param {function} callback - è¯·æ±ç»æçåè°å½æ°ã
     * @param {SuperMap.DataFormat} [resultFormat=SuperMap.DataFormat.GEOJSON] - è¿åçç»æç±»åã
     */
    getSummaryMeshJobs(callback, resultFormat) {
        var me = this,
            format = me._processFormat(resultFormat);
        var summaryMeshJobsService = new SummaryMeshJobsService_SummaryMeshJobsService(me.url, {
            proxy: me.proxy,
            withCredentials: me.withCredentials,
            serverType: me.serverType,
            eventListeners: {
                scope: me,
                processCompleted: callback,
                processFailed: callback
            },
            format: format
        });
        summaryMeshJobsService.getSummaryMeshJobs();
    }

    /**
     * @function SuperMap.REST.ProcessingService.prototype.getSummaryMeshJob
     * @description è·åæä¸ä¸ªç¹èååæã
     * @param {string} id - ç©ºé´åæç idã
     * @param {function} callback - è¯·æ±ç»æçåè°å½æ°ã
     * @param {SuperMap.DataFormat} [resultFormat=SuperMap.DataFormat.GEOJSON] - è¿åçç»æç±»åã
     */
    getSummaryMeshJob(id, callback, resultFormat) {
        var me = this,
            format = me._processFormat(resultFormat);
        var summaryMeshJobsService = new SummaryMeshJobsService_SummaryMeshJobsService(me.url, {
            proxy: me.proxy,
            withCredentials: me.withCredentials,
            serverType: me.serverType,
            eventListeners: {
                scope: me,
                processCompleted: callback,
                processFailed: callback
            },
            format: format
        });
        summaryMeshJobsService.getSummaryMeshJob(id);
    }

    /**
     * @function SuperMap.REST.ProcessingService.prototype.addSummaryMeshJob
     * @description æ°å»ºä¸ä¸ªç¹èååæã
     * @param {SuperMap.SummaryMeshJobParameter} params - ç¹èååæä»»å¡åæ°ç±»ã
     * @param {function} callback - è¯·æ±ç»æçåè°å½æ°ã
     * @param {number} [seconds=1000] - å¼å§åå»ºåï¼è·ååå»ºæåç»æçæ¶é´é´éã
     * @param {SuperMap.DataFormat} [resultFormat=SuperMap.DataFormat.GEOJSON] - è¿åçç»æç±»åã
*/
    addSummaryMeshJob(params, callback, seconds, resultFormat) {
        var me = this, format = me._processFormat(resultFormat);
        var summaryMeshJobsService = new SummaryMeshJobsService_SummaryMeshJobsService(me.url, {
            proxy: me.proxy,
            withCredentials: me.withCredentials,
            eventListeners: {
                scope: me,
                processCompleted: callback,
                processFailed: callback,
                processRunning(job) {
                    me.summaryMeshJobs[job.id] = job.state;
                }
            },
            format: format
        });
        summaryMeshJobsService.addSummaryMeshJob(params, seconds);
    }

    /**
     * @function SuperMap.REST.ProcessingService.prototype.getSummaryMeshJobState
     * @description è·åç¹èååæçç¶æã
     * @param {string} id - ç¹èååæç idã
     * @returns {Object} ç¹èååæçç¶æã
     */
    getSummaryMeshJobState(id) {
        return this.summaryMeshJobs[id];
    }

    /**
     * @function SuperMap.REST.ProcessingService.prototype.getQueryJobs
     * @description è·ååå¯¹è±¡æ¥è¯¢åæçåè¡¨ã
     * @param {function} callback - è¯·æ±ç»æçåè°å½æ°ã
     * @param {SuperMap.DataFormat} [resultFormat=SuperMap.DataFormat.GEOJSON] - è¿åçç»æç±»åã
     */
    getQueryJobs(callback, resultFormat) {
        var me = this,
            format = me._processFormat(resultFormat);
        var singleObjectQueryJobsService = new SingleObjectQueryJobsService_SingleObjectQueryJobsService(me.url, {
            proxy: me.proxy,
            withCredentials: me.withCredentials,
            serverType: me.serverType,
            eventListeners: {
                scope: me,
                processCompleted: callback,
                processFailed: callback
            },
            format: format
        });
        singleObjectQueryJobsService.getQueryJobs();
    }

    /**
     * @function SuperMap.REST.ProcessingService.prototype.getQueryJob
     * @description è·åæä¸ä¸ªåå¯¹è±¡æ¥è¯¢åæã
     * @param {string} id - ç©ºé´åæç idã
     * @param {function} callback - è¯·æ±ç»æçåè°å½æ°ã
     * @param {SuperMap.DataFormat} [resultFormat=SuperMap.DataFormat.GEOJSON] - è¿åçç»æç±»åã
     */
    getQueryJob(id, callback, resultFormat) {
        var me = this,
            format = me._processFormat(resultFormat);
        var singleObjectQueryJobsService = new SingleObjectQueryJobsService_SingleObjectQueryJobsService(me.url, {
            proxy: me.proxy,
            withCredentials: me.withCredentials,
            serverType: me.serverType,
            eventListeners: {
                scope: me,
                processCompleted: callback,
                processFailed: callback
            },
            format: format
        });
        singleObjectQueryJobsService.getQueryJob(id);
    }

    /**
     * @function SuperMap.REST.ProcessingService.prototype.addQueryJob
     * @description æ°å»ºä¸ä¸ªåå¯¹è±¡æ¥è¯¢åæã
     * @param {SuperMap.SingleObjectQueryJobsParameter} params - åå»ºä¸ä¸ªç©ºé´åæçè¯·æ±åæ°ã
     * @param {function} callback - è¯·æ±ç»æçåè°å½æ°ã
     * @param {number} [seconds=1000] - å¼å§åå»ºåï¼è·ååå»ºæåç»æçæ¶é´é´éã
     * @param {SuperMap.DataFormat} [resultFormat=SuperMap.DataFormat.GEOJSON] - è¿åçç»æç±»åã
     */
    addQueryJob(params, callback, seconds, resultFormat) {
        var me = this,
            param = me._processParams(params),
            format = me._processFormat(resultFormat);
        var singleObjectQueryJobsService = new SingleObjectQueryJobsService_SingleObjectQueryJobsService(me.url, {
            proxy: me.proxy,
            withCredentials: me.withCredentials,
            eventListeners: {
                scope: me,
                processCompleted: callback,
                processFailed: callback,
                processRunning(job) {
                    me.queryJobs[job.id] = job.state;
                }
            },
            format: format
        });
        singleObjectQueryJobsService.addQueryJob(param, seconds);
    }

    /**
     * @function SuperMap.REST.ProcessingService.prototype.getQueryJobState
     * @description è·ååå¯¹è±¡æ¥è¯¢åæçç¶æã
     * @param {string} id - åå¯¹è±¡æ¥è¯¢åæç idã
     * @returns {Object} åå¯¹è±¡æ¥è¯¢åæçç¶æ
     */
    getQueryJobState(id) {
        return this.queryJobs[id];
    }

    /**
     * @function SuperMap.REST.ProcessingService.prototype.getSummaryRegionJobs
     * @description è·ååºåæ±æ»åæçåè¡¨ã
     * @param {function} callback - è¯·æ±ç»æçåè°å½æ°ã
     * @param {SuperMap.DataFormat} [resultFormat=SuperMap.DataFormat.GEOJSON] - è¿åçç»æç±»åã
     */
    getSummaryRegionJobs(callback, resultFormat) {
        var me = this,
            format = me._processFormat(resultFormat);
        var summaryRegionJobsService = new SummaryRegionJobsService_SummaryRegionJobsService(me.url, {
            proxy: me.proxy,
            withCredentials: me.withCredentials,
            serverType: me.serverType,
            eventListeners: {
                scope: me,
                processCompleted: callback,
                processFailed: callback
            },
            format: format
        });
        summaryRegionJobsService.getSummaryRegionJobs();
    }

    /**
     * @function SuperMap.REST.ProcessingService.prototype.getSummaryRegionJob
     * @description è·åæä¸ä¸ªåºåæ±æ»åæã
     * @param {string} id - åºåæ±æ»åæç idã
     * @param {function} callback - è¯·æ±ç»æçåè°å½æ°ã
     * @param {SuperMap.DataFormat} [resultFormat=SuperMap.DataFormat.GEOJSON] - è¿åçç»æç±»åã
     */
    getSummaryRegionJob(id, callback, resultFormat) {
        var me = this,
            format = me._processFormat(resultFormat);
        var summaryRegionJobsService = new SummaryRegionJobsService_SummaryRegionJobsService(me.url, {
            proxy: me.proxy,
            withCredentials: me.withCredentials,
            serverType: me.serverType,
            eventListeners: {
                scope: me,
                processCompleted: callback,
                processFailed: callback
            },
            format: format
        });
        summaryRegionJobsService.getSummaryRegionJob(id);
    }

    /**
     * @function SuperMap.REST.ProcessingService.prototype.addSummaryRegionJob
     * @description æ°å»ºä¸ä¸ªåºåæ±æ»åæã
     * @param {SuperMap.SummaryRegionJobParameter} params -åå»ºä¸ä¸ªåºåæ±æ»åæçè¯·æ±åæ°ã
     * @param {function} callback - è¯·æ±ç»æçåè°å½æ°ã
     * @param {number} [seconds=1000] - å¼å§åå»ºåï¼è·ååå»ºæåç»æçæ¶é´é´éã
     * @param {SuperMap.DataFormat} [resultFormat=SuperMap.DataFormat.GEOJSON] - è¿åçç»æç±»åã
     */
    addSummaryRegionJob(params, callback, seconds, resultFormat) {
        var me = this, format = me._processFormat(resultFormat);
        var summaryRegionJobsService = new SummaryRegionJobsService_SummaryRegionJobsService(me.url, {
            proxy: me.proxy,
            withCredentials: me.withCredentials,
            eventListeners: {
                scope: me,
                processCompleted: callback,
                processFailed: callback,
                processRunning(job) {
                    me.summaryRegionJobs[job.id] = job.state;
                }
            },
            format: format
        });
        summaryRegionJobsService.addSummaryRegionJob(params, seconds);
    }

    /**
     * @function SuperMap.REST.ProcessingService.prototype.getSummaryRegionJobState
     * @description è·ååºåæ±æ»åæçç¶æã
     * @param {string} id - åºåæ±æ»åæç idã
     * @returns {Object} åºåæ±æ»åæçç¶æã
     */
    getSummaryRegionJobState(id) {
        return this.summaryRegionJobs[id];
    }

    /**
     * @function SuperMap.REST.ProcessingService.prototype.getVectorClipJobs
     * @description è·åç¢éè£åªåæçåè¡¨ã
     * @param {function} callback - è¯·æ±ç»æçåè°å½æ°ã
     * @param {SuperMap.DataFormat} [resultFormat=SuperMap.DataFormat.GEOJSON] - è¿åçç»æç±»åã
     */
    getVectorClipJobs(callback, resultFormat) {
        var me = this,
            format = me._processFormat(resultFormat);
        var vectorClipJobsService = new VectorClipJobsService_VectorClipJobsService(me.url, {
            proxy: me.proxy,
            withCredentials: me.withCredentials,
            serverType: me.serverType,
            eventListeners: {
                scope: me,
                processCompleted: callback,
                processFailed: callback
            },
            format: format
        });
        vectorClipJobsService.getVectorClipJobs();
    }

    /**
     * @function SuperMap.REST.ProcessingService.prototype.getVectorClipJob
     * @description è·åæä¸ä¸ªç¢éè£åªåæã
     * @param {string} id - ç©ºé´åæç idã
     * @param {function} callback - è¯·æ±ç»æçåè°å½æ°ã
     * @param {SuperMap.DataFormat} [resultFormat=SuperMap.DataFormat.GEOJSON] - è¿åçç»æç±»åã
     */
    getVectorClipJob(id, callback, resultFormat) {
        var me = this,
            format = me._processFormat(resultFormat);
        var vectorClipJobsService = new VectorClipJobsService_VectorClipJobsService(me.url, {
            proxy: me.proxy,
            withCredentials: me.withCredentials,
            serverType: me.serverType,
            eventListeners: {
                scope: me,
                processCompleted: callback,
                processFailed: callback
            },
            format: format
        });
        vectorClipJobsService.getVectorClipJob(id);
    }

    /**
     * @function SuperMap.REST.ProcessingService.prototype.addVectorClipJob
     * @description æ°å»ºä¸ä¸ªç¢éè£åªåæã
     * @param {SuperMap.VectorClipJobsParameter} params - åå»ºä¸ä¸ªç©ºé´åæçè¯·æ±åæ°ã
     * @param {function} callback - è¯·æ±ç»æçåè°å½æ°ã
     * @param {number} [seconds=1000] - å¼å§åå»ºåï¼è·ååå»ºæåç»æçæ¶é´é´éã
     * @param {SuperMap.DataFormat} [resultFormat=SuperMap.DataFormat.GEOJSON] - è¿åçç»æç±»åã
     */
    addVectorClipJob(params, callback, seconds, resultFormat) {
        var me = this,
            param = me._processParams(params),
            format = me._processFormat(resultFormat);
        var vectorClipJobsService = new VectorClipJobsService_VectorClipJobsService(me.url, {
            proxy: me.proxy,
            withCredentials: me.withCredentials,
            serverType: me.serverType,
            eventListeners: {
                scope: me,
                processCompleted: callback,
                processFailed: callback,
                processRunning(job) {
                    me.vectorClipJobs[job.id] = job.state;
                }
            },
            format: format
        });
        vectorClipJobsService.addVectorClipJob(param, seconds);
    }

    /**
     * @function SuperMap.REST.ProcessingService.prototype.getVectorClipJobState
     * @description è·åç¢éè£åªåæçç¶æã
     * @param {string} id - ç¢éè£åªåæç idã
     * @returns {Object} ç¢éè£åªåæçç¶æã
     */
    getVectorClipJobState(id) {
        return this.vectorClipJobs[id];
    }

    /**
     * @function SuperMap.REST.ProcessingService.prototype.getOverlayGeoJobs
     * @description è·åå å åæçåè¡¨ã
     * @param {function} callback - è¯·æ±ç»æçåè°å½æ°ã
     * @param {SuperMap.DataFormat} [resultFormat=SuperMap.DataFormat.GEOJSON] - è¿åçç»æç±»åã
     */
    getOverlayGeoJobs(callback, resultFormat) {
        var me = this,
            format = me._processFormat(resultFormat);
        var overlayGeoJobsService = new OverlayGeoJobsService_OverlayGeoJobsService(me.url, {
            proxy: me.proxy,
            withCredentials: me.withCredentials,
            serverType: me.serverType,
            eventListeners: {
                scope: me,
                processCompleted: callback,
                processFailed: callback
            },
            format: format
        });
        overlayGeoJobsService.getOverlayGeoJobs();
    }

    /**
     * @function SuperMap.REST.ProcessingService.prototype.getOverlayGeoJob
     * @description è·åæä¸ä¸ªå å åæã
     * @param {string} id - ç©ºé´åæç idã
     * @param {function} callback - è¯·æ±ç»æçåè°å½æ°ã
     * @param {SuperMap.DataFormat} [resultFormat=SuperMap.DataFormat.GEOJSON] - è¿åçç»æç±»åã
     */
    getOverlayGeoJob(id, callback, resultFormat) {
        var me = this,
            format = me._processFormat(resultFormat);
        var overlayGeoJobsService = new OverlayGeoJobsService_OverlayGeoJobsService(me.url, {
            proxy: me.proxy,
            withCredentials: me.withCredentials,
            serverType: me.serverType,
            eventListeners: {
                scope: me,
                processCompleted: callback,
                processFailed: callback
            },
            format: format
        });
        overlayGeoJobsService.getOverlayGeoJob(id);
    }

    /**
     * @function SuperMap.REST.ProcessingService.prototype.addOverlayGeoJob
     * @description æ°å»ºä¸ä¸ªå å åæã
     * @param {SuperMap.OverlayGeoJobParameter} params - åå»ºä¸ä¸ªç©ºé´åæçè¯·æ±åæ°ã
     * @param {function} callback - è¯·æ±ç»æçåè°å½æ°ã
     * @param {number} [seconds=1000] - å¼å§åå»ºåï¼è·ååå»ºæåç»æçæ¶é´é´éã
     * @param {SuperMap.DataFormat} [resultFormat=SuperMap.DataFormat.GEOJSON] - è¿åçç»æç±»åã
     */
    addOverlayGeoJob(params, callback, seconds, resultFormat) {
        var me = this,
            format = me._processFormat(resultFormat);
        var overlayGeoJobsService = new OverlayGeoJobsService_OverlayGeoJobsService(me.url, {
            proxy: me.proxy,
            withCredentials: me.withCredentials,
            serverType: me.serverType,
            eventListeners: {
                scope: me,
                processCompleted: callback,
                processFailed: callback,
                processRunning: function (job) {
                    me.overlayGeoJobs[job.id] = job.state;
                }
            },
            format: format
        });
        overlayGeoJobsService.addOverlayGeoJob(params, seconds);
    }

    /**
     * @function SuperMap.REST.ProcessingService.prototype.getoverlayGeoJobState
     * @description è·åå å åæçç¶æã
     * @param {string} id - å å åæç idã
     * @returns {Object} å å åæçç¶æã
     */
    getoverlayGeoJobState(id) {
        return this.overlayGeoJobs[id];
    }

    /**
     * @function SuperMap.REST.ProcessingService.prototype.getBuffersJobs
     * @description è·åç¼å²åºåæçåè¡¨ã
     * @param {function} callback - è¯·æ±ç»æçåè°å½æ°ã
     * @param {SuperMap.DataFormat} [resultFormat=SuperMap.DataFormat.GEOJSON] - è¿åçç»æç±»åã
     */
    getBuffersJobs(callback, resultFormat) {
        var me = this,
            format = me._processFormat(resultFormat);
        var buffersAnalystJobsService = new BuffersAnalystJobsService_BuffersAnalystJobsService(me.url, {
            proxy: me.proxy,
            withCredentials: me.withCredentials,
            serverType: me.serverType,
            eventListeners: {
                scope: me,
                processCompleted: callback,
                processFailed: callback
            },
            format: format
        });
        buffersAnalystJobsService.getBuffersJobs();
    }

    /**
     * @function SuperMap.REST.ProcessingService.prototype.getBuffersJob
     * @description è·åæä¸ä¸ªç¼å²åºåæã
     * @param {string} id - ç©ºé´åæç idã
     * @param {function} callback - è¯·æ±ç»æçåè°å½æ°ã
     * @param {SuperMap.DataFormat} [resultFormat=SuperMap.DataFormat.GEOJSON] - è¿åçç»æç±»åã
     */
    getBuffersJob(id, callback, resultFormat) {
        var me = this,
            format = me._processFormat(resultFormat);
        var buffersAnalystJobsService = new BuffersAnalystJobsService_BuffersAnalystJobsService(me.url, {
            proxy: me.proxy,
            withCredentials: me.withCredentials,
            serverType: me.serverType,
            eventListeners: {
                scope: me,
                processCompleted: callback,
                processFailed: callback
            },
            format: format
        });
        buffersAnalystJobsService.getBuffersJob(id);
    }

    /**
     * @function SuperMap.REST.ProcessingService.prototype.addBuffersJob
     * @description æ°å»ºä¸ä¸ªç¼å²åºåæã
     * @param {SuperMap.BuffersAnalystJobsParameter} params - åå»ºä¸ä¸ªç©ºé´åæçè¯·æ±åæ°ã
     * @param {function} callback - è¯·æ±ç»æçåè°å½æ°ã
     * @param {number} [seconds=1000] - å¼å§åå»ºåï¼è·ååå»ºæåç»æçæ¶é´é´éã
     * @param {SuperMap.DataFormat} [resultFormat=SuperMap.DataFormat.GEOJSON] - è¿åçç»æç±»åã
     */
    addBuffersJob(params, callback, seconds, resultFormat) {
        var me = this,
            format = me._processFormat(resultFormat);
        var buffersAnalystJobsService = new BuffersAnalystJobsService_BuffersAnalystJobsService(me.url, {
            proxy: me.proxy,
            withCredentials: me.withCredentials,
            serverType: me.serverType,
            eventListeners: {
                scope: me,
                processCompleted: callback,
                processFailed: callback,
                processRunning: function (job) {
                    me.buffersJobs[job.id] = job.state;
                }
            },
            format: format
        });
        buffersAnalystJobsService.addBuffersJob(params, seconds);
    }

    /**
     * @function SuperMap.REST.ProcessingService.prototype.getBuffersJobState
     * @description è·åç¼å²åºåæçç¶æã
     * @param {string} id - ç¼å²åºåæç idã
     * @returns {Object} ç¼å²åºåæçç¶æã
     */
    getBuffersJobState(id) {
        return this.buffersJobs[id];
    }

    /**
     * @function SuperMap.REST.ProcessingService.prototype.getTopologyValidatorJobs
     * @description è·åæææ£æ¥åæçåè¡¨ã
     * @param {function} callback - è¯·æ±ç»æçåè°å½æ°ã
     * @param {SuperMap.DataFormat} [resultFormat=SuperMap.DataFormat.GEOJSON] - è¿åçç»æç±»åã
     */
    getTopologyValidatorJobs(callback, resultFormat) {
        var me = this,
            format = me._processFormat(resultFormat);
        var topologyValidatorJobsService = new TopologyValidatorJobsService_TopologyValidatorJobsService(me.url, {
            proxy: me.proxy,
            withCredentials: me.withCredentials,
            serverType: me.serverType,
            eventListeners: {
                scope: me,
                processCompleted: callback,
                processFailed: callback
            },
            format: format
        });
        topologyValidatorJobsService.getTopologyValidatorJobs();
    }

    /**
     * @function SuperMap.REST.ProcessingService.prototype.getTopologyValidatorJob
     * @description è·åæä¸ä¸ªæææ£æ¥åæã
     * @param {string} id - ç©ºé´åæç idã
     * @param {function} callback - è¯·æ±ç»æçåè°å½æ°ã
     * @param {SuperMap.DataFormat} [resultFormat=SuperMap.DataFormat.GEOJSON] - è¿åçç»æç±»åã
     */
    getTopologyValidatorJob(id, callback, resultFormat) {
        var me = this,
            format = me._processFormat(resultFormat);
        var topologyValidatorJobsService = new TopologyValidatorJobsService_TopologyValidatorJobsService(me.url, {
            proxy: me.proxy,
            withCredentials: me.withCredentials,
            serverType: me.serverType,
            eventListeners: {
                scope: me,
                processCompleted: callback,
                processFailed: callback
            },
            format: format
        });
        topologyValidatorJobsService.getTopologyValidatorJob(id);
    }

    /**
     * @function SuperMap.REST.ProcessingService.prototype.addTopologyValidatorJob
     * @description æ°å»ºä¸ä¸ªæææ£æ¥åæã
     * @param {SuperMap.TopologyValidatorJobsParameter} params - åå»ºä¸ä¸ªç©ºé´åæçè¯·æ±åæ°ã
     * @param {function} callback - è¯·æ±ç»æçåè°å½æ°ã
     * @param {number} [seconds=1000] - å¼å§åå»ºåï¼è·ååå»ºæåç»æçæ¶é´é´éã
     * @param {SuperMap.DataFormat} [resultFormat=SuperMap.DataFormat.GEOJSON] - è¿åçç»æç±»åã
     */
    addTopologyValidatorJob(params, callback, seconds, resultFormat) {
        var me = this,
            format = me._processFormat(resultFormat);
        var topologyValidatorJobsService = new TopologyValidatorJobsService_TopologyValidatorJobsService(me.url, {
            proxy: me.proxy,
            withCredentials: me.withCredentials,
            serverType: me.serverType,
            eventListeners: {
                scope: me,
                processCompleted: callback,
                processFailed: callback,
                processRunning: function (job) {
                    me.topologyValidatorJobs[job.id] = job.state;
                }
            },
            format: format
        });
        topologyValidatorJobsService.addTopologyValidatorJob(params, seconds);
    }

    /**
     * @function SuperMap.REST.ProcessingService.prototype.getTopologyValidatorJobState
     * @description è·åæææ£æ¥åæçç¶æã
     * @param {string} id - æææ£æ¥åæç idã
     * @returns {Object} æææ£æ¥åæçç¶æã
     */
    getTopologyValidatorJobState(id) {
        return this.topologyValidatorJobs[id];
    }

    /**
     * @function SuperMap.REST.ProcessingService.prototype.getSummaryAttributesJobs
     * @description è·åå±æ§æ±æ»åæçåè¡¨ã
     * @param {function} callback - è¯·æ±ç»æçåè°å½æ°ã
     * @param {SuperMap.DataFormat} [resultFormat=SuperMap.DataFormat.GEOJSON] - è¿åçç»æç±»åã
     */
    getSummaryAttributesJobs(callback, resultFormat) {
        var me = this,
            format = me._processFormat(resultFormat);
        var summaryAttributesJobsService = new SummaryAttributesJobsService_SummaryAttributesJobsService(me.url, {
            proxy: me.proxy,
            withCredentials: me.withCredentials,
            serverType: me.serverType,
            eventListeners: {
                scope: me,
                processCompleted: callback,
                processFailed: callback
            },
            format: format
        });
        summaryAttributesJobsService.getSummaryAttributesJobs();
    }

    /**
     * @function SuperMap.REST.ProcessingService.prototype.getSummaryAttributesJob
     * @description è·åæä¸ä¸ªå±æ§æ±æ»åæã
     * @param {string} id - ç©ºé´åæç idã
     * @param {function} callback - è¯·æ±ç»æçåè°å½æ°ã
     * @param {SuperMap.DataFormat} [resultFormat=SuperMap.DataFormat.GEOJSON] - è¿åçç»æç±»åã
     */
    getSummaryAttributesJob(id, callback, resultFormat) {
        var me = this,
            format = me._processFormat(resultFormat);
        var summaryAttributesJobsService = new SummaryAttributesJobsService_SummaryAttributesJobsService(me.url, {
            proxy: me.proxy,
            withCredentials: me.withCredentials,
            serverType: me.serverType,
            eventListeners: {
                scope: me,
                processCompleted: callback,
                processFailed: callback
            },
            format: format
        });
        summaryAttributesJobsService.getSummaryAttributesJob(id);
    }

    /**
     * @function SuperMap.REST.ProcessingService.prototype.addSummaryAttributesJob
     * @description æ°å»ºä¸ä¸ªå±æ§æ±æ»åæã
     * @param {SuperMap.SummaryAttributesJobsParameter} params - åå»ºä¸ä¸ªç©ºé´åæçè¯·æ±åæ°ã
     * @param {function} callback - è¯·æ±ç»æçåè°å½æ°ã
     * @param {number} [seconds=1000] - å¼å§åå»ºåï¼è·ååå»ºæåç»æçæ¶é´é´éã
     * @param {SuperMap.DataFormat} [resultFormat=SuperMap.DataFormat.GEOJSON] - è¿åçç»æç±»åã
     */
    addSummaryAttributesJob(params, callback, seconds, resultFormat) {
        var me = this,
            format = me._processFormat(resultFormat);
        var summaryAttributesJobsService = new SummaryAttributesJobsService_SummaryAttributesJobsService(me.url, {
            proxy: me.proxy,
            withCredentials: me.withCredentials,
            serverType: me.serverType,
            eventListeners: {
                scope: me,
                processCompleted: callback,
                processFailed: callback,
                processRunning: function (job) {
                    me.summaryAttributesJobs[job.id] = job.state;
                }
            },
            format: format
        });
        summaryAttributesJobsService.addSummaryAttributesJob(params, seconds);
    }

    /**
     * @function SuperMap.REST.ProcessingService.prototype.getSummaryAttributesJobState
     * @description è·åå±æ§æ±æ»åæçç¶æã
     * @param {string} id - å±æ§æ±æ»åæç idã
     * @returns {Object} å±æ§æ±æ»åæçç¶æã
     */
    getSummaryAttributesJobState(id) {
        return this.summaryAttributesJobs[id];
    }

    _processFormat(resultFormat) {
        return (resultFormat) ? resultFormat : DataFormat.GEOJSON;
    }

    _processParams(params) {
        if (!params) {
            return {};
        }
        if (params.geometryQuery) {
            params.geometryQuery = this._convertPatams(params.geometryQuery);
        }
        if (params.geometryClip) {
            params.geometryClip = this._convertPatams(params.geometryClip);
        }
        return params;
    }

    _convertPatams(points) {
        var geometryParam = {};
        if (points.length < 1) {
            geometryParam = "";
        } else {
            var results = [];
            for (var i = 0; i < points.length; i++) {
                var point = {};
                point.x = points[i].x;
                point.y = points[i].y;
                results.push(point);
            }
            geometryParam.type = "REGION";
            geometryParam.points = results;
        }
        return geometryParam;
    }

}

SuperMap_SuperMap.REST.ProcessingService = ProcessingService_ProcessingService;

// CONCATENATED MODULE: ./src/classic/services/index.js
/* CopyrightÂ© 2000 - 2019 SuperMap Software Co.Ltd. All rights reserved.
 * This program are made available under the terms of the Apache License, Version 2.0
 * which accompanies this distribution and is available at http://www.apache.org/licenses/LICENSE-2.0.html.*/


// CONCATENATED MODULE: ./src/classic/index.js
/* concated harmony reexport */__webpack_require__.d(__webpack_exports__, "ElasticSearch", function() { return ElasticSearch_ElasticSearch; });
/* concated harmony reexport */__webpack_require__.d(__webpack_exports__, "SecurityManager", function() { return SecurityManager_SecurityManager; });
/* concated harmony reexport */__webpack_require__.d(__webpack_exports__, "KernelDensityJobParameter", function() { return KernelDensityJobParameter_KernelDensityJobParameter; });
/* concated harmony reexport */__webpack_require__.d(__webpack_exports__, "SingleObjectQueryJobsParameter", function() { return SingleObjectQueryJobsParameter_SingleObjectQueryJobsParameter; });
/* concated harmony reexport */__webpack_require__.d(__webpack_exports__, "SummaryAttributesJobsParameter", function() { return SummaryAttributesJobsParameter_SummaryAttributesJobsParameter; });
/* concated harmony reexport */__webpack_require__.d(__webpack_exports__, "SummaryMeshJobParameter", function() { return SummaryMeshJobParameter_SummaryMeshJobParameter; });
/* concated harmony reexport */__webpack_require__.d(__webpack_exports__, "SummaryRegionJobParameter", function() { return SummaryRegionJobParameter_SummaryRegionJobParameter; });
/* concated harmony reexport */__webpack_require__.d(__webpack_exports__, "OverlayGeoJobParameter", function() { return OverlayGeoJobParameter_OverlayGeoJobParameter; });
/* concated harmony reexport */__webpack_require__.d(__webpack_exports__, "BuffersAnalystJobsParameter", function() { return BuffersAnalystJobsParameter_BuffersAnalystJobsParameter; });
/* concated harmony reexport */__webpack_require__.d(__webpack_exports__, "TopologyValidatorJobsParameter", function() { return TopologyValidatorJobsParameter_TopologyValidatorJobsParameter; });
/* concated harmony reexport */__webpack_require__.d(__webpack_exports__, "OutputSetting", function() { return OutputSetting_OutputSetting; });
/* concated harmony reexport */__webpack_require__.d(__webpack_exports__, "MappingParameters", function() { return MappingParameters_MappingParameters; });
/* concated harmony reexport */__webpack_require__.d(__webpack_exports__, "GeoCodingParameter", function() { return GeoCodingParameter_GeoCodingParameter; });
/* concated harmony reexport */__webpack_require__.d(__webpack_exports__, "GeoDecodingParameter", function() { return GeoDecodingParameter_GeoDecodingParameter; });
/* concated harmony reexport */__webpack_require__.d(__webpack_exports__, "FileTypes", function() { return FileTypes; });
/* concated harmony reexport */__webpack_require__.d(__webpack_exports__, "FileConfig", function() { return FileConfig; });
/* concated harmony reexport */__webpack_require__.d(__webpack_exports__, "FileModel", function() { return FileModel_FileModel; });
/* concated harmony reexport */__webpack_require__.d(__webpack_exports__, "MessageBox", function() { return MessageBox; });
/* concated harmony reexport */__webpack_require__.d(__webpack_exports__, "CommonContainer", function() { return CommonContainer_CommonContainer; });
/* concated harmony reexport */__webpack_require__.d(__webpack_exports__, "DropDownBox", function() { return DropDownBox_DropDownBox; });
/* concated harmony reexport */__webpack_require__.d(__webpack_exports__, "Select", function() { return Select_Select; });
/* concated harmony reexport */__webpack_require__.d(__webpack_exports__, "AttributesPopContainer", function() { return AttributesPopContainer_AttributesPopContainer; });
/* concated harmony reexport */__webpack_require__.d(__webpack_exports__, "PopContainer", function() { return PopContainer_PopContainer; });
/* concated harmony reexport */__webpack_require__.d(__webpack_exports__, "IndexTabsPageContainer", function() { return IndexTabsPageContainer_IndexTabsPageContainer; });
/* concated harmony reexport */__webpack_require__.d(__webpack_exports__, "CityTabsPage", function() { return CityTabsPage_CityTabsPage; });
/* concated harmony reexport */__webpack_require__.d(__webpack_exports__, "NavTabsPage", function() { return NavTabsPage_NavTabsPage; });
/* concated harmony reexport */__webpack_require__.d(__webpack_exports__, "PaginationContainer", function() { return PaginationContainer_PaginationContainer; });
/* concated harmony reexport */__webpack_require__.d(__webpack_exports__, "widgetsUtil", function() { return widgetsUtil; });
/* concated harmony reexport */__webpack_require__.d(__webpack_exports__, "FileReaderUtil", function() { return FileReaderUtil; });
/* concated harmony reexport */__webpack_require__.d(__webpack_exports__, "MapVLayer", function() { return MapVLayer_MapVLayer; });
/* concated harmony reexport */__webpack_require__.d(__webpack_exports__, "MapVRenderer", function() { return MapVRenderer_MapVRenderer; });
/* concated harmony reexport */__webpack_require__.d(__webpack_exports__, "AddressMatchService", function() { return services_AddressMatchService_AddressMatchService; });
/* concated harmony reexport */__webpack_require__.d(__webpack_exports__, "ProcessingService", function() { return ProcessingService_ProcessingService; });
/* concated harmony reexport */__webpack_require__.d(__webpack_exports__, "SuperMap", function() { return SuperMap_SuperMap; });
/* CopyrightÂ© 2000 - 2019 SuperMap Software Co.Ltd. All rights reserved.
 * This program are made available under the terms of the Apache License, Version 2.0
 * which accompanies this distribution and is available at http://www.apache.org/licenses/LICENSE-2.0.html.*/




















/***/ }),
/* 8 */
/***/ (function(module, exports) {

(function(self) {
  'use strict';

  // if __disableNativeFetch is set to true, the it will always polyfill fetch
  // with Ajax.
  if (!self.__disableNativeFetch && self.fetch) {
    return
  }

  function normalizeName(name) {
    if (typeof name !== 'string') {
      name = String(name)
    }
    if (/[^a-z0-9\-#$%&'*+.\^_`|~]/i.test(name)) {
      throw new TypeError('Invalid character in header field name')
    }
    return name.toLowerCase()
  }

  function normalizeValue(value) {
    if (typeof value !== 'string') {
      value = String(value)
    }
    return value
  }

  function Headers(headers) {
    this.map = {}

    if (headers instanceof Headers) {
      headers.forEach(function(value, name) {
        this.append(name, value)
      }, this)

    } else if (headers) {
      Object.getOwnPropertyNames(headers).forEach(function(name) {
        this.append(name, headers[name])
      }, this)
    }
  }

  Headers.prototype.append = function(name, value) {
    name = normalizeName(name)
    value = normalizeValue(value)
    var list = this.map[name]
    if (!list) {
      list = []
      this.map[name] = list
    }
    list.push(value)
  }

  Headers.prototype['delete'] = function(name) {
    delete this.map[normalizeName(name)]
  }

  Headers.prototype.get = function(name) {
    var values = this.map[normalizeName(name)]
    return values ? values[0] : null
  }

  Headers.prototype.getAll = function(name) {
    return this.map[normalizeName(name)] || []
  }

  Headers.prototype.has = function(name) {
    return this.map.hasOwnProperty(normalizeName(name))
  }

  Headers.prototype.set = function(name, value) {
    this.map[normalizeName(name)] = [normalizeValue(value)]
  }

  Headers.prototype.forEach = function(callback, thisArg) {
    Object.getOwnPropertyNames(this.map).forEach(function(name) {
      this.map[name].forEach(function(value) {
        callback.call(thisArg, value, name, this)
      }, this)
    }, this)
  }

  function consumed(body) {
    if (body.bodyUsed) {
      return Promise.reject(new TypeError('Already read'))
    }
    body.bodyUsed = true
  }

  function fileReaderReady(reader) {
    return new Promise(function(resolve, reject) {
      reader.onload = function() {
        resolve(reader.result)
      }
      reader.onerror = function() {
        reject(reader.error)
      }
    })
  }

  function readBlobAsArrayBuffer(blob) {
    var reader = new FileReader()
    reader.readAsArrayBuffer(blob)
    return fileReaderReady(reader)
  }

  function readBlobAsText(blob, options) {
    var reader = new FileReader()
    var contentType = options.headers.map['content-type'] ? options.headers.map['content-type'].toString() : ''
    var regex = /charset\=[0-9a-zA-Z\-\_]*;?/
    var _charset = blob.type.match(regex) || contentType.match(regex)
    var args = [blob]

    if(_charset) {
      args.push(_charset[0].replace(/^charset\=/, '').replace(/;$/, ''))
    }

    reader.readAsText.apply(reader, args)
    return fileReaderReady(reader)
  }

  var support = {
    blob: 'FileReader' in self && 'Blob' in self && (function() {
      try {
        new Blob();
        return true
      } catch(e) {
        return false
      }
    })(),
    formData: 'FormData' in self,
    arrayBuffer: 'ArrayBuffer' in self
  }

  function Body() {
    this.bodyUsed = false


    this._initBody = function(body, options) {
      this._bodyInit = body
      if (typeof body === 'string') {
        this._bodyText = body
      } else if (support.blob && Blob.prototype.isPrototypeOf(body)) {
        this._bodyBlob = body
        this._options = options
      } else if (support.formData && FormData.prototype.isPrototypeOf(body)) {
        this._bodyFormData = body
      } else if (!body) {
        this._bodyText = ''
      } else if (support.arrayBuffer && ArrayBuffer.prototype.isPrototypeOf(body)) {
        // Only support ArrayBuffers for POST method.
        // Receiving ArrayBuffers happens via Blobs, instead.
      } else {
        throw new Error('unsupported BodyInit type')
      }
    }

    if (support.blob) {
      this.blob = function() {
        var rejected = consumed(this)
        if (rejected) {
          return rejected
        }

        if (this._bodyBlob) {
          return Promise.resolve(this._bodyBlob)
        } else if (this._bodyFormData) {
          throw new Error('could not read FormData body as blob')
        } else {
          return Promise.resolve(new Blob([this._bodyText]))
        }
      }

      this.arrayBuffer = function() {
        return this.blob().then(readBlobAsArrayBuffer)
      }

      this.text = function() {
        var rejected = consumed(this)
        if (rejected) {
          return rejected
        }

        if (this._bodyBlob) {
          return readBlobAsText(this._bodyBlob, this._options)
        } else if (this._bodyFormData) {
          throw new Error('could not read FormData body as text')
        } else {
          return Promise.resolve(this._bodyText)
        }
      }
    } else {
      this.text = function() {
        var rejected = consumed(this)
        return rejected ? rejected : Promise.resolve(this._bodyText)
      }
    }

    if (support.formData) {
      this.formData = function() {
        return this.text().then(decode)
      }
    }

    this.json = function() {
      return this.text().then(JSON.parse)
    }

    return this
  }

  // HTTP methods whose capitalization should be normalized
  var methods = ['DELETE', 'GET', 'HEAD', 'OPTIONS', 'POST', 'PUT']

  function normalizeMethod(method) {
    var upcased = method.toUpperCase()
    return (methods.indexOf(upcased) > -1) ? upcased : method
  }

  function Request(input, options) {
    options = options || {}
    var body = options.body
    if (Request.prototype.isPrototypeOf(input)) {
      if (input.bodyUsed) {
        throw new TypeError('Already read')
      }
      this.url = input.url
      this.credentials = input.credentials
      if (!options.headers) {
        this.headers = new Headers(input.headers)
      }
      this.method = input.method
      this.mode = input.mode
      if (!body) {
        body = input._bodyInit
        input.bodyUsed = true
      }
    } else {
      this.url = input
    }

    this.credentials = options.credentials || this.credentials || 'omit'
    if (options.headers || !this.headers) {
      this.headers = new Headers(options.headers)
    }
    this.method = normalizeMethod(options.method || this.method || 'GET')
    this.mode = options.mode || this.mode || null
    this.referrer = null

    if ((this.method === 'GET' || this.method === 'HEAD') && body) {
      throw new TypeError('Body not allowed for GET or HEAD requests')
    }
    this._initBody(body, options)
  }

  Request.prototype.clone = function() {
    return new Request(this)
  }

  function decode(body) {
    var form = new FormData()
    body.trim().split('&').forEach(function(bytes) {
      if (bytes) {
        var split = bytes.split('=')
        var name = split.shift().replace(/\+/g, ' ')
        var value = split.join('=').replace(/\+/g, ' ')
        form.append(decodeURIComponent(name), decodeURIComponent(value))
      }
    })
    return form
  }

  function headers(xhr) {
    var head = new Headers()
    var pairs = xhr.getAllResponseHeaders().trim().split('\n')
    pairs.forEach(function(header) {
      var split = header.trim().split(':')
      var key = split.shift().trim()
      var value = split.join(':').trim()
      head.append(key, value)
    })
    return head
  }

  Body.call(Request.prototype)

  function Response(bodyInit, options) {
    if (!options) {
      options = {}
    }

    this._initBody(bodyInit, options)
    this.type = 'default'
    this.status = options.status
    this.ok = this.status >= 200 && this.status < 300
    this.statusText = options.statusText
    this.headers = options.headers instanceof Headers ? options.headers : new Headers(options.headers)
    this.url = options.url || ''
  }

  Body.call(Response.prototype)

  Response.prototype.clone = function() {
    return new Response(this._bodyInit, {
      status: this.status,
      statusText: this.statusText,
      headers: new Headers(this.headers),
      url: this.url
    })
  }

  Response.error = function() {
    var response = new Response(null, {status: 0, statusText: ''})
    response.type = 'error'
    return response
  }

  var redirectStatuses = [301, 302, 303, 307, 308]

  Response.redirect = function(url, status) {
    if (redirectStatuses.indexOf(status) === -1) {
      throw new RangeError('Invalid status code')
    }

    return new Response(null, {status: status, headers: {location: url}})
  }

  self.Headers = Headers;
  self.Request = Request;
  self.Response = Response;

  self.fetch = function(input, init) {
    return new Promise(function(resolve, reject) {
      var request
      if (Request.prototype.isPrototypeOf(input) && !init) {
        request = input
      } else {
        request = new Request(input, init)
      }

      var xhr = new XMLHttpRequest()

      function responseURL() {
        if ('responseURL' in xhr) {
          return xhr.responseURL
        }

        // Avoid security warnings on getResponseHeader when not allowed by CORS
        if (/^X-Request-URL:/m.test(xhr.getAllResponseHeaders())) {
          return xhr.getResponseHeader('X-Request-URL')
        }

        return;
      }

      var __onLoadHandled = false;

      function onload() {
        if (xhr.readyState !== 4) {
          return
        }
        var status = (xhr.status === 1223) ? 204 : xhr.status
        if (status < 100 || status > 599) {
          if (__onLoadHandled) { return; } else { __onLoadHandled = true; }
          reject(new TypeError('Network request failed'))
          return
        }
        var options = {
          status: status,
          statusText: xhr.statusText,
          headers: headers(xhr),
          url: responseURL()
        }
        var body = 'response' in xhr ? xhr.response : xhr.responseText;

        if (__onLoadHandled) { return; } else { __onLoadHandled = true; }
        resolve(new Response(body, options))
      }
      xhr.onreadystatechange = onload;
      xhr.onload = onload;
      xhr.onerror = function() {
        if (__onLoadHandled) { return; } else { __onLoadHandled = true; }
        reject(new TypeError('Network request failed'))
      }

      xhr.open(request.method, request.url, true)

      // `withCredentials` should be setted after calling `.open` in IE10
      // http://stackoverflow.com/a/19667959/1219343
      try {
        if (request.credentials === 'include') {
          if ('withCredentials' in xhr) {
            xhr.withCredentials = true;
          } else {
            console && console.warn && console.warn('withCredentials is not supported, you can ignore this warning');
          }
        }
      } catch (e) {
        console && console.warn && console.warn('set withCredentials error:' + e);
      }

      if ('responseType' in xhr && support.blob) {
        xhr.responseType = 'blob'
      }

      request.headers.forEach(function(value, name) {
        xhr.setRequestHeader(name, value)
      })

      xhr.send(typeof request._bodyInit === 'undefined' ? null : request._bodyInit)
    })
  }
  self.fetch.polyfill = true

  // Support CommonJS
  if (typeof module !== 'undefined' && module.exports) {
    module.exports = self.fetch;
  }
})(typeof self !== 'undefined' ? self : this);


/***/ }),
/* 9 */
/***/ (function(module, exports) {

// shim for using process in browser
var process = module.exports = {};

// cached from whatever global is present so that test runners that stub it
// don't break things.  But we need to wrap it in a try catch in case it is
// wrapped in strict mode code which doesn't define any globals.  It's inside a
// function because try/catches deoptimize in certain engines.

var cachedSetTimeout;
var cachedClearTimeout;

function defaultSetTimout() {
    throw new Error('setTimeout has not been defined');
}
function defaultClearTimeout () {
    throw new Error('clearTimeout has not been defined');
}
(function () {
    try {
        if (typeof setTimeout === 'function') {
            cachedSetTimeout = setTimeout;
        } else {
            cachedSetTimeout = defaultSetTimout;
        }
    } catch (e) {
        cachedSetTimeout = defaultSetTimout;
    }
    try {
        if (typeof clearTimeout === 'function') {
            cachedClearTimeout = clearTimeout;
        } else {
            cachedClearTimeout = defaultClearTimeout;
        }
    } catch (e) {
        cachedClearTimeout = defaultClearTimeout;
    }
} ())
function runTimeout(fun) {
    if (cachedSetTimeout === setTimeout) {
        //normal enviroments in sane situations
        return setTimeout(fun, 0);
    }
    // if setTimeout wasn't available but was latter defined
    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
        cachedSetTimeout = setTimeout;
        return setTimeout(fun, 0);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedSetTimeout(fun, 0);
    } catch(e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
            return cachedSetTimeout.call(null, fun, 0);
        } catch(e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
            return cachedSetTimeout.call(this, fun, 0);
        }
    }


}
function runClearTimeout(marker) {
    if (cachedClearTimeout === clearTimeout) {
        //normal enviroments in sane situations
        return clearTimeout(marker);
    }
    // if clearTimeout wasn't available but was latter defined
    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
        cachedClearTimeout = clearTimeout;
        return clearTimeout(marker);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedClearTimeout(marker);
    } catch (e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
            return cachedClearTimeout.call(null, marker);
        } catch (e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
            // Some versions of I.E. have different rules for clearTimeout vs setTimeout
            return cachedClearTimeout.call(this, marker);
        }
    }



}
var queue = [];
var draining = false;
var currentQueue;
var queueIndex = -1;

function cleanUpNextTick() {
    if (!draining || !currentQueue) {
        return;
    }
    draining = false;
    if (currentQueue.length) {
        queue = currentQueue.concat(queue);
    } else {
        queueIndex = -1;
    }
    if (queue.length) {
        drainQueue();
    }
}

function drainQueue() {
    if (draining) {
        return;
    }
    var timeout = runTimeout(cleanUpNextTick);
    draining = true;

    var len = queue.length;
    while(len) {
        currentQueue = queue;
        queue = [];
        while (++queueIndex < len) {
            if (currentQueue) {
                currentQueue[queueIndex].run();
            }
        }
        queueIndex = -1;
        len = queue.length;
    }
    currentQueue = null;
    draining = false;
    runClearTimeout(timeout);
}

process.nextTick = function (fun) {
    var args = new Array(arguments.length - 1);
    if (arguments.length > 1) {
        for (var i = 1; i < arguments.length; i++) {
            args[i - 1] = arguments[i];
        }
    }
    queue.push(new Item(fun, args));
    if (queue.length === 1 && !draining) {
        runTimeout(drainQueue);
    }
};

// v8 likes predictible objects
function Item(fun, array) {
    this.fun = fun;
    this.array = array;
}
Item.prototype.run = function () {
    this.fun.apply(null, this.array);
};
process.title = 'browser';
process.browser = true;
process.env = {};
process.argv = [];
process.version = ''; // empty string to avoid regexp issues
process.versions = {};

function noop() {}

process.on = noop;
process.addListener = noop;
process.once = noop;
process.off = noop;
process.removeListener = noop;
process.removeAllListeners = noop;
process.emit = noop;
process.prependListener = noop;
process.prependOnceListener = noop;

process.listeners = function (name) { return [] }

process.binding = function (name) {
    throw new Error('process.binding is not supported');
};

process.cwd = function () { return '/' };
process.chdir = function (dir) {
    throw new Error('process.chdir is not supported');
};
process.umask = function() { return 0; };


/***/ }),
/* 10 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global, process) {(function (global, undefined) {
    "use strict";

    if (global.setImmediate) {
        return;
    }

    var nextHandle = 1; // Spec says greater than zero
    var tasksByHandle = {};
    var currentlyRunningATask = false;
    var doc = global.document;
    var registerImmediate;

    function setImmediate(callback) {
      // Callback can either be a function or a string
      if (typeof callback !== "function") {
        callback = new Function("" + callback);
      }
      // Copy function arguments
      var args = new Array(arguments.length - 1);
      for (var i = 0; i < args.length; i++) {
          args[i] = arguments[i + 1];
      }
      // Store and register the task
      var task = { callback: callback, args: args };
      tasksByHandle[nextHandle] = task;
      registerImmediate(nextHandle);
      return nextHandle++;
    }

    function clearImmediate(handle) {
        delete tasksByHandle[handle];
    }

    function run(task) {
        var callback = task.callback;
        var args = task.args;
        switch (args.length) {
        case 0:
            callback();
            break;
        case 1:
            callback(args[0]);
            break;
        case 2:
            callback(args[0], args[1]);
            break;
        case 3:
            callback(args[0], args[1], args[2]);
            break;
        default:
            callback.apply(undefined, args);
            break;
        }
    }

    function runIfPresent(handle) {
        // From the spec: "Wait until any invocations of this algorithm started before this one have completed."
        // So if we're currently running a task, we'll need to delay this invocation.
        if (currentlyRunningATask) {
            // Delay by doing a setTimeout. setImmediate was tried instead, but in Firefox 7 it generated a
            // "too much recursion" error.
            setTimeout(runIfPresent, 0, handle);
        } else {
            var task = tasksByHandle[handle];
            if (task) {
                currentlyRunningATask = true;
                try {
                    run(task);
                } finally {
                    clearImmediate(handle);
                    currentlyRunningATask = false;
                }
            }
        }
    }

    function installNextTickImplementation() {
        registerImmediate = function(handle) {
            process.nextTick(function () { runIfPresent(handle); });
        };
    }

    function canUsePostMessage() {
        // The test against `importScripts` prevents this implementation from being installed inside a web worker,
        // where `global.postMessage` means something completely different and can't be used for this purpose.
        if (global.postMessage && !global.importScripts) {
            var postMessageIsAsynchronous = true;
            var oldOnMessage = global.onmessage;
            global.onmessage = function() {
                postMessageIsAsynchronous = false;
            };
            global.postMessage("", "*");
            global.onmessage = oldOnMessage;
            return postMessageIsAsynchronous;
        }
    }

    function installPostMessageImplementation() {
        // Installs an event handler on `global` for the `message` event: see
        // * https://developer.mozilla.org/en/DOM/window.postMessage
        // * http://www.whatwg.org/specs/web-apps/current-work/multipage/comms.html#crossDocumentMessages

        var messagePrefix = "setImmediate$" + Math.random() + "$";
        var onGlobalMessage = function(event) {
            if (event.source === global &&
                typeof event.data === "string" &&
                event.data.indexOf(messagePrefix) === 0) {
                runIfPresent(+event.data.slice(messagePrefix.length));
            }
        };

        if (global.addEventListener) {
            global.addEventListener("message", onGlobalMessage, false);
        } else {
            global.attachEvent("onmessage", onGlobalMessage);
        }

        registerImmediate = function(handle) {
            global.postMessage(messagePrefix + handle, "*");
        };
    }

    function installMessageChannelImplementation() {
        var channel = new MessageChannel();
        channel.port1.onmessage = function(event) {
            var handle = event.data;
            runIfPresent(handle);
        };

        registerImmediate = function(handle) {
            channel.port2.postMessage(handle);
        };
    }

    function installReadyStateChangeImplementation() {
        var html = doc.documentElement;
        registerImmediate = function(handle) {
            // Create a <script> element; its readystatechange event will be fired asynchronously once it is inserted
            // into the document. Do so, thus queuing up the task. Remember to clean up once it's been called.
            var script = doc.createElement("script");
            script.onreadystatechange = function () {
                runIfPresent(handle);
                script.onreadystatechange = null;
                html.removeChild(script);
                script = null;
            };
            html.appendChild(script);
        };
    }

    function installSetTimeoutImplementation() {
        registerImmediate = function(handle) {
            setTimeout(runIfPresent, 0, handle);
        };
    }

    // If supported, we should attach to the prototype of global, since that is where setTimeout et al. live.
    var attachTo = Object.getPrototypeOf && Object.getPrototypeOf(global);
    attachTo = attachTo && attachTo.setTimeout ? attachTo : global;

    // Don't get fooled by e.g. browserify environments.
    if ({}.toString.call(global.process) === "[object process]") {
        // For Node.js before 0.9
        installNextTickImplementation();

    } else if (canUsePostMessage()) {
        // For non-IE10 modern browsers
        installPostMessageImplementation();

    } else if (global.MessageChannel) {
        // For web workers, where supported
        installMessageChannelImplementation();

    } else if (doc && "onreadystatechange" in doc.createElement("script")) {
        // For IE 6â8
        installReadyStateChangeImplementation();

    } else {
        // For older browsers
        installSetTimeoutImplementation();
    }

    attachTo.setImmediate = setImmediate;
    attachTo.clearImmediate = clearImmediate;
}(typeof self === "undefined" ? typeof global === "undefined" ? this : global : self));

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(3), __webpack_require__(9)))

/***/ }),
/* 11 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global) {var scope = (typeof global !== "undefined" && global) ||
            (typeof self !== "undefined" && self) ||
            window;
var apply = Function.prototype.apply;

// DOM APIs, for completeness

exports.setTimeout = function() {
  return new Timeout(apply.call(setTimeout, scope, arguments), clearTimeout);
};
exports.setInterval = function() {
  return new Timeout(apply.call(setInterval, scope, arguments), clearInterval);
};
exports.clearTimeout =
exports.clearInterval = function(timeout) {
  if (timeout) {
    timeout.close();
  }
};

function Timeout(id, clearFn) {
  this._id = id;
  this._clearFn = clearFn;
}
Timeout.prototype.unref = Timeout.prototype.ref = function() {};
Timeout.prototype.close = function() {
  this._clearFn.call(scope, this._id);
};

// Does not start the time, just sets up the members needed.
exports.enroll = function(item, msecs) {
  clearTimeout(item._idleTimeoutId);
  item._idleTimeout = msecs;
};

exports.unenroll = function(item) {
  clearTimeout(item._idleTimeoutId);
  item._idleTimeout = -1;
};

exports._unrefActive = exports.active = function(item) {
  clearTimeout(item._idleTimeoutId);

  var msecs = item._idleTimeout;
  if (msecs >= 0) {
    item._idleTimeoutId = setTimeout(function onTimeout() {
      if (item._onTimeout)
        item._onTimeout();
    }, msecs);
  }
};

// setimmediate attaches itself to the global object
__webpack_require__(10);
// On some exotic environments, it's not clear which object `setimmediate` was
// able to install onto.  Search each possibility in the same order as the
// `setimmediate` library.
exports.setImmediate = (typeof self !== "undefined" && self.setImmediate) ||
                       (typeof global !== "undefined" && global.setImmediate) ||
                       (this && this.setImmediate);
exports.clearImmediate = (typeof self !== "undefined" && self.clearImmediate) ||
                         (typeof global !== "undefined" && global.clearImmediate) ||
                         (this && this.clearImmediate);

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(3)))

/***/ })
/******/ ]);